Terminals unused in grammar

    STRUCT
    TYPEDEF
    UNION
    HASH
    WS


State 341 conflicts: 1 shift/reduce


Grammar

    0 $accept: translation_unit $end

    1 primary_expression: IDENTIFIER
    2                   | CHAR_CONSTANT
    3                   | STRING_LITERAL
    4                   | FLOATING_CONSTANT
    5                   | INTEGER_CONSTANT
    6                   | ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE

    7 postfix_expression: primary_expression
    8                   | postfix_expression SQUARE_BRACKET_OPEN expression SQUARE_BRACKET_CLOSE
    9                   | postfix_expression ROUND_BRACKET_OPEN ROUND_BRACKET_CLOSE
   10                   | postfix_expression ROUND_BRACKET_OPEN argument_expression_list ROUND_BRACKET_CLOSE
   11                   | postfix_expression DOT IDENTIFIER
   12                   | postfix_expression ARROW IDENTIFIER
   13                   | postfix_expression INCREMENT
   14                   | postfix_expression DECREMENT
   15                   | ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   16                   | ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE

   17 argument_expression_list: assignment_expression
   18                         | argument_expression_list COMMA assignment_expression

   19 unary_expression: postfix_expression
   20                 | INCREMENT unary_expression
   21                 | DECREMENT unary_expression
   22                 | unary_operator cast_expression
   23                 | SIZEOF unary_expression
   24                 | SIZEOF ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE

   25 unary_operator: BIT_AND
   26               | MULTIPLY
   27               | PLUS
   28               | MINUS
   29               | BITWISE_NOT
   30               | LOGICAL_NOT

   31 cast_expression: unary_expression
   32                | ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE cast_expression

   33 multiplicative_expression: cast_expression
   34                          | multiplicative_expression MULTIPLY cast_expression
   35                          | multiplicative_expression DIVIDE cast_expression
   36                          | multiplicative_expression MODULO cast_expression

   37 additive_expression: multiplicative_expression
   38                    | additive_expression PLUS multiplicative_expression
   39                    | additive_expression MINUS multiplicative_expression

   40 shift_expression: additive_expression
   41                 | shift_expression LEFT_SHIFT additive_expression
   42                 | shift_expression RIGHT_SHIFT additive_expression

   43 relational_expression: shift_expression
   44                      | relational_expression LESS_THAN shift_expression
   45                      | relational_expression GREATER_THAN shift_expression
   46                      | relational_expression LESS_THAN_EQUAL shift_expression
   47                      | relational_expression GREATER_THAN_EQUAL shift_expression

   48 equality_expression: relational_expression
   49                    | equality_expression EQUAL relational_expression
   50                    | equality_expression NOT_EQUAL relational_expression

   51 AND_expression: equality_expression
   52               | AND_expression BIT_AND equality_expression

   53 exclusive_OR_expression: AND_expression
   54                        | exclusive_OR_expression BIT_XOR AND_expression

   55 inclusive_OR_expression: exclusive_OR_expression
   56                        | inclusive_OR_expression BIT_OR exclusive_OR_expression

   57 logical_AND_expression: inclusive_OR_expression
   58                       | logical_AND_expression LOGICAL_AND M inclusive_OR_expression

   59 logical_OR_expression: logical_AND_expression
   60                      | logical_OR_expression LOGICAL_OR M logical_AND_expression

   61 conditional_expression: logical_OR_expression
   62                       | logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression

   63 M: %empty

   64 N: %empty

   65 assignment_expression: conditional_expression
   66                      | unary_expression assignment_operator assignment_expression

   67 assignment_operator: ASSIGN_T
   68                    | MULTIPLY_ASSIGN
   69                    | DIVIDE_ASSIGN
   70                    | MODULO_ASSIGN
   71                    | PLUS_ASSIGN
   72                    | MINUS_ASSIGN
   73                    | LEFT_SHIFT_ASSIGN
   74                    | RIGHT_SHIFT_ASSIGN
   75                    | BIT_AND_ASSIGN
   76                    | BIT_XOR_ASSIGN
   77                    | BIT_OR_ASSIGN

   78 expression: assignment_expression
   79           | expression COMMA assignment_expression

   80 constant_expression: conditional_expression

   81 declaration: declaration_specifiers SEMICOLON
   82            | declaration_specifiers init_declarator_list SEMICOLON

   83 declaration_specifiers: storage_class_specifier declaration_specifiers_opt
   84                       | type_specifier declaration_specifiers_opt
   85                       | type_qualifier declaration_specifiers_opt
   86                       | function_specifier declaration_specifiers_opt

   87 declaration_specifiers_opt: declaration_specifiers
   88                           | %empty

   89 init_declarator_list: init_declarator
   90                     | init_declarator_list COMMA init_declarator

   91 init_declarator: declarator
   92                | declarator ASSIGN_T initializer

   93 storage_class_specifier: EXTERN
   94                        | STATIC
   95                        | AUTO
   96                        | REGISTER

   97 type_specifier: VOID_T
   98               | CHAR_T
   99               | SHORT
  100               | INT_T
  101               | LONG
  102               | FLOAT_T
  103               | DOUBLE
  104               | SIGNED
  105               | UNSIGNED
  106               | BOOL_T
  107               | COMPLEX
  108               | IMAGINARY
  109               | enum_specifier

  110 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt
  111                         | type_qualifier specifier_qualifier_list_opt

  112 specifier_qualifier_list_opt: specifier_qualifier_list
  113                             | %empty

  114 enum_specifier: ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list CURLY_BRACKET_CLOSE
  115               | ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list COMMA CURLY_BRACKET_CLOSE
  116               | ENUM IDENTIFIER

  117 identifier_opt: IDENTIFIER
  118               | %empty

  119 enumerator_list: enumerator
  120                | enumerator_list COMMA enumerator

  121 enumerator: IDENTIFIER
  122           | IDENTIFIER ASSIGN_T constant_expression

  123 type_qualifier: CONST
  124               | RESTRICT
  125               | VOLATILE

  126 function_specifier: INLINE

  127 declarator: pointer direct_declarator
  128           | direct_declarator

  129 direct_declarator: IDENTIFIER
  130                  | ROUND_BRACKET_OPEN declarator ROUND_BRACKET_CLOSE
  131                  | direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list_opt SQUARE_BRACKET_CLOSE
  132                  | direct_declarator SQUARE_BRACKET_OPEN STATIC type_qualifier_list_opt assignment_expression SQUARE_BRACKET_CLOSE
  133                  | direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list STATIC assignment_expression SQUARE_BRACKET_CLOSE
  134                  | direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list_opt assignment_expression SQUARE_BRACKET_CLOSE
  135                  | direct_declarator ROUND_BRACKET_OPEN parameter_type_list ROUND_BRACKET_CLOSE
  136                  | direct_declarator ROUND_BRACKET_OPEN identifier_list ROUND_BRACKET_CLOSE
  137                  | direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list_opt MULTIPLY SQUARE_BRACKET_CLOSE

  138 type_qualifier_list_opt: type_qualifier_list
  139                        | %empty

  140 pointer: MULTIPLY type_qualifier_list
  141        | MULTIPLY type_qualifier_list pointer
  142        | MULTIPLY pointer
  143        | MULTIPLY

  144 type_qualifier_list: type_qualifier
  145                    | type_qualifier_list type_qualifier

  146 parameter_type_list: parameter_list
  147                    | parameter_list COMMA ELLIPSIS

  148 parameter_list: parameter_declaration
  149               | parameter_list COMMA parameter_declaration

  150 parameter_declaration: declaration_specifiers declarator
  151                      | declaration_specifiers

  152 identifier_list: IDENTIFIER
  153                | identifier_list COMMA IDENTIFIER

  154 type_name: specifier_qualifier_list

  155 initializer: assignment_expression
  156            | CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
  157            | CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE

  158 initializer_list: designation_opt initializer
  159                 | initializer_list COMMA designation_opt initializer

  160 designation_opt: designation
  161                | %empty

  162 designation: designator_list ASSIGN_T

  163 designator_list: designator
  164                | designator_list designator

  165 designator: SQUARE_BRACKET_OPEN constant_expression SQUARE_BRACKET_CLOSE
  166           | DOT IDENTIFIER

  167 statement: labeled_statement
  168          | compound_statement
  169          | expression_statement
  170          | selection_statement
  171          | iteration_statement
  172          | jump_statement

  173 labeled_statement: IDENTIFIER COLON statement
  174                  | CASE constant_expression COLON statement
  175                  | DEFAULT COLON statement

  176 compound_statement: CURLY_BRACKET_OPEN CURLY_BRACKET_CLOSE
  177                   | CURLY_BRACKET_OPEN block_item_list CURLY_BRACKET_CLOSE

  178 block_item_list: block_item
  179                | block_item_list M block_item

  180 block_item: declaration
  181           | statement

  182 expression_statement: expression SEMICOLON
  183                     | SEMICOLON

  184 selection_statement: IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N
  185                    | IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N ELSE M statement N
  186                    | SWITCH ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE statement

  187 iteration_statement: WHILE M ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement
  188                    | DO M statement M WHILE ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE SEMICOLON
  189                    | FOR ROUND_BRACKET_OPEN expression_statement M expression_statement N M expression N ROUND_BRACKET_CLOSE M statement

  190 jump_statement: GOTO_T IDENTIFIER SEMICOLON
  191               | CONTINUE SEMICOLON
  192               | BREAK SEMICOLON
  193               | RETURN_T SEMICOLON
  194               | RETURN_T expression SEMICOLON

  195 translation_unit: external_declaration
  196                 | translation_unit external_declaration

  197 external_declaration: function_definition
  198                     | declaration

  199 function_definition: declaration_specifiers declarator declaration_list compound_statement
  200                    | function_prototype compound_statement

  201 function_prototype: declaration_specifiers declarator

  202 declaration_list: declaration
  203                 | declaration_list declaration


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    AUTO (258) 95
    BREAK (259) 192
    CASE (260) 174
    CHAR_T (261) 98
    CONST (262) 123
    CONTINUE (263) 191
    DEFAULT (264) 175
    DO (265) 188
    DOUBLE (266) 103
    ELSE (267) 185
    ENUM (268) 114 115 116
    EXTERN (269) 93
    FLOAT_T (270) 102
    FOR (271) 189
    GOTO_T (272) 190
    IF (273) 184 185
    INLINE (274) 126
    INT_T (275) 100
    LONG (276) 101
    REGISTER (277) 96
    RESTRICT (278) 124
    RETURN_T (279) 193 194
    SHORT (280) 99
    SIGNED (281) 104
    SIZEOF (282) 23 24
    STATIC (283) 94 132 133
    STRUCT (284)
    SWITCH (285) 186
    TYPEDEF (286)
    UNION (287)
    UNSIGNED (288) 105
    VOID_T (289) 97
    VOLATILE (290) 125
    WHILE (291) 187 188
    BOOL_T (292) 106
    COMPLEX (293) 107
    IMAGINARY (294) 108
    SQUARE_BRACKET_OPEN (295) 8 131 132 133 134 137 165
    SQUARE_BRACKET_CLOSE (296) 8 131 132 133 134 137 165
    ROUND_BRACKET_OPEN (297) 6 9 10 15 16 24 32 130 135 136 184 185 186 187 188 189
    ROUND_BRACKET_CLOSE (298) 6 9 10 15 16 24 32 130 135 136 184 185 186 187 188 189
    CURLY_BRACKET_OPEN (299) 15 16 114 115 156 157 176 177
    CURLY_BRACKET_CLOSE (300) 15 16 114 115 156 157 176 177
    DOT (301) 11 166
    ARROW (302) 12
    INCREMENT (303) 13 20
    DECREMENT (304) 14 21
    BIT_AND (305) 25 52
    BIT_OR (306) 56
    BIT_XOR (307) 54
    BITWISE_NOT (308) 29
    LOGICAL_AND (309) 58
    LOGICAL_OR (310) 60
    LOGICAL_NOT (311) 30
    MULTIPLY (312) 26 34 137 140 141 142 143
    DIVIDE (313) 35
    MODULO (314) 36
    PLUS (315) 27 38
    MINUS (316) 28 39
    LEFT_SHIFT (317) 41
    RIGHT_SHIFT (318) 42
    LESS_THAN (319) 44
    GREATER_THAN (320) 45
    LESS_THAN_EQUAL (321) 46
    GREATER_THAN_EQUAL (322) 47
    EQUAL (323) 49
    NOT_EQUAL (324) 50
    ASSIGN_T (325) 67 92 122 162
    PLUS_ASSIGN (326) 71
    MINUS_ASSIGN (327) 72
    MULTIPLY_ASSIGN (328) 68
    DIVIDE_ASSIGN (329) 69
    MODULO_ASSIGN (330) 70
    LEFT_SHIFT_ASSIGN (331) 73
    RIGHT_SHIFT_ASSIGN (332) 74
    BIT_AND_ASSIGN (333) 75
    BIT_XOR_ASSIGN (334) 76
    BIT_OR_ASSIGN (335) 77
    COMMA (336) 16 18 79 90 115 120 147 149 153 157 159
    COLON (337) 62 173 174 175
    SEMICOLON (338) 81 82 182 183 188 190 191 192 193 194
    ELLIPSIS (339) 147
    QUESTION_MARK (340) 62
    HASH (341)
    INTEGER_CONSTANT <intval> (342) 5
    FLOATING_CONSTANT <floatval> (343) 4
    CHAR_CONSTANT <charval> (344) 2
    STRING_LITERAL <str> (345) 3
    IDENTIFIER <str> (346) 1 11 12 116 117 121 122 129 152 153 166 173 190
    WS (347)


Nonterminals, with rules where they appear

    $accept (93)
        on left: 0
    primary_expression <expr> (94)
        on left: 1 2 3 4 5 6
        on right: 7
    postfix_expression <expr> (95)
        on left: 7 8 9 10 11 12 13 14 15 16
        on right: 8 9 10 11 12 13 14 19
    argument_expression_list <p_list> (96)
        on left: 17 18
        on right: 10 18
    unary_expression <expr> (97)
        on left: 19 20 21 22 23 24
        on right: 20 21 23 31 66
    unary_operator <charval> (98)
        on left: 25 26 27 28 29 30
        on right: 22
    cast_expression <expr> (99)
        on left: 31 32
        on right: 22 32 33 34 35 36
    multiplicative_expression <expr> (100)
        on left: 33 34 35 36
        on right: 34 35 36 37 38 39
    additive_expression <expr> (101)
        on left: 37 38 39
        on right: 38 39 40 41 42
    shift_expression <expr> (102)
        on left: 40 41 42
        on right: 41 42 43 44 45 46 47
    relational_expression <expr> (103)
        on left: 43 44 45 46 47
        on right: 44 45 46 47 48 49 50
    equality_expression <expr> (104)
        on left: 48 49 50
        on right: 49 50 51 52
    AND_expression <expr> (105)
        on left: 51 52
        on right: 52 53 54
    exclusive_OR_expression <expr> (106)
        on left: 53 54
        on right: 54 55 56
    inclusive_OR_expression <expr> (107)
        on left: 55 56
        on right: 56 57 58
    logical_AND_expression <expr> (108)
        on left: 57 58
        on right: 58 59 60
    logical_OR_expression <expr> (109)
        on left: 59 60
        on right: 60 61 62
    conditional_expression <expr> (110)
        on left: 61 62
        on right: 62 65 80
    M <expr> (111)
        on left: 63
        on right: 58 60 62 179 184 185 187 188 189
    N <expr> (112)
        on left: 64
        on right: 62 184 185 187 188 189
    assignment_expression <expr> (113)
        on left: 65 66
        on right: 17 18 66 78 79 132 133 134 155
    assignment_operator (114)
        on left: 67 68 69 70 71 72 73 74 75 76 77
        on right: 66
    expression <expr> (115)
        on left: 78 79
        on right: 6 8 62 79 182 184 185 186 187 188 189 194
    constant_expression (116)
        on left: 80
        on right: 122 165 174
    declaration (117)
        on left: 81 82
        on right: 180 198 202 203
    declaration_specifiers <types> (118)
        on left: 83 84 85 86
        on right: 81 82 87 150 151 199 201
    declaration_specifiers_opt (119)
        on left: 87 88
        on right: 83 84 85 86
    init_declarator_list <dec_list> (120)
        on left: 89 90
        on right: 82 90
    init_declarator <dec> (121)
        on left: 91 92
        on right: 89 90
    storage_class_specifier (122)
        on left: 93 94 95 96
        on right: 83
    type_specifier <types> (123)
        on left: 97 98 99 100 101 102 103 104 105 106 107 108 109
        on right: 84 110
    specifier_qualifier_list (124)
        on left: 110 111
        on right: 112 154
    specifier_qualifier_list_opt (125)
        on left: 112 113
        on right: 110 111
    enum_specifier (126)
        on left: 114 115 116
        on right: 109
    identifier_opt (127)
        on left: 117 118
        on right: 114 115
    enumerator_list (128)
        on left: 119 120
        on right: 114 115 120
    enumerator (129)
        on left: 121 122
        on right: 119 120
    type_qualifier (130)
        on left: 123 124 125
        on right: 85 111 144 145
    function_specifier (131)
        on left: 126
        on right: 86
    declarator <dec> (132)
        on left: 127 128
        on right: 91 92 130 150 199 201
    direct_declarator <dec> (133)
        on left: 129 130 131 132 133 134 135 136 137
        on right: 127 128 131 132 133 134 135 136 137
    type_qualifier_list_opt (134)
        on left: 138 139
        on right: 131 132 134 137
    pointer <intval> (135)
        on left: 140 141 142 143
        on right: 127 141 142
    type_qualifier_list (136)
        on left: 144 145
        on right: 133 138 140 141 145
    parameter_type_list <p_list> (137)
        on left: 146 147
        on right: 135
    parameter_list <p_list> (138)
        on left: 148 149
        on right: 146 147 149
    parameter_declaration <p> (139)
        on left: 150 151
        on right: 148 149
    identifier_list (140)
        on left: 152 153
        on right: 136 153
    type_name (141)
        on left: 154
        on right: 15 16 24 32
    initializer <expr> (142)
        on left: 155 156 157
        on right: 92 158 159
    initializer_list (143)
        on left: 158 159
        on right: 15 16 156 157 159
    designation_opt (144)
        on left: 160 161
        on right: 158 159
    designation (145)
        on left: 162
        on right: 160
    designator_list (146)
        on left: 163 164
        on right: 162 164
    designator (147)
        on left: 165 166
        on right: 163 164
    statement <expr> (148)
        on left: 167 168 169 170 171 172
        on right: 173 174 175 181 184 185 186 187 188 189
    labeled_statement <expr> (149)
        on left: 173 174 175
        on right: 167
    compound_statement <expr> (150)
        on left: 176 177
        on right: 168 199 200
    block_item_list <expr> (151)
        on left: 178 179
        on right: 177 179
    block_item <expr> (152)
        on left: 180 181
        on right: 178 179
    expression_statement <expr> (153)
        on left: 182 183
        on right: 169 189
    selection_statement <expr> (154)
        on left: 184 185 186
        on right: 170
    iteration_statement <expr> (155)
        on left: 187 188 189
        on right: 171
    jump_statement <expr> (156)
        on left: 190 191 192 193 194
        on right: 172
    translation_unit (157)
        on left: 195 196
        on right: 0 196
    external_declaration (158)
        on left: 197 198
        on right: 195 196
    function_definition (159)
        on left: 199 200
        on right: 197
    function_prototype <dec> (160)
        on left: 201
        on right: 200
    declaration_list (161)
        on left: 202 203
        on right: 199 203


State 0

    0 $accept: . translation_unit $end

    AUTO       shift, and go to state 1
    CHAR_T     shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOAT_T    shift, and go to state 7
    INLINE     shift, and go to state 8
    INT_T      shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOID_T     shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL_T     shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21

    declaration              go to state 22
    declaration_specifiers   go to state 23
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    translation_unit         go to state 29
    external_declaration     go to state 30
    function_definition      go to state 31
    function_prototype       go to state 32


State 1

   95 storage_class_specifier: AUTO .

    $default  reduce using rule 95 (storage_class_specifier)


State 2

   98 type_specifier: CHAR_T .

    $default  reduce using rule 98 (type_specifier)


State 3

  123 type_qualifier: CONST .

    $default  reduce using rule 123 (type_qualifier)


State 4

  103 type_specifier: DOUBLE .

    $default  reduce using rule 103 (type_specifier)


State 5

  114 enum_specifier: ENUM . identifier_opt CURLY_BRACKET_OPEN enumerator_list CURLY_BRACKET_CLOSE
  115               | ENUM . identifier_opt CURLY_BRACKET_OPEN enumerator_list COMMA CURLY_BRACKET_CLOSE
  116               | ENUM . IDENTIFIER

    IDENTIFIER  shift, and go to state 33

    $default  reduce using rule 118 (identifier_opt)

    identifier_opt  go to state 34


State 6

   93 storage_class_specifier: EXTERN .

    $default  reduce using rule 93 (storage_class_specifier)


State 7

  102 type_specifier: FLOAT_T .

    $default  reduce using rule 102 (type_specifier)


State 8

  126 function_specifier: INLINE .

    $default  reduce using rule 126 (function_specifier)


State 9

  100 type_specifier: INT_T .

    $default  reduce using rule 100 (type_specifier)


State 10

  101 type_specifier: LONG .

    $default  reduce using rule 101 (type_specifier)


State 11

   96 storage_class_specifier: REGISTER .

    $default  reduce using rule 96 (storage_class_specifier)


State 12

  124 type_qualifier: RESTRICT .

    $default  reduce using rule 124 (type_qualifier)


State 13

   99 type_specifier: SHORT .

    $default  reduce using rule 99 (type_specifier)


State 14

  104 type_specifier: SIGNED .

    $default  reduce using rule 104 (type_specifier)


State 15

   94 storage_class_specifier: STATIC .

    $default  reduce using rule 94 (storage_class_specifier)


State 16

  105 type_specifier: UNSIGNED .

    $default  reduce using rule 105 (type_specifier)


State 17

   97 type_specifier: VOID_T .

    $default  reduce using rule 97 (type_specifier)


State 18

  125 type_qualifier: VOLATILE .

    $default  reduce using rule 125 (type_qualifier)


State 19

  106 type_specifier: BOOL_T .

    $default  reduce using rule 106 (type_specifier)


State 20

  107 type_specifier: COMPLEX .

    $default  reduce using rule 107 (type_specifier)


State 21

  108 type_specifier: IMAGINARY .

    $default  reduce using rule 108 (type_specifier)


State 22

  198 external_declaration: declaration .

    $default  reduce using rule 198 (external_declaration)


State 23

   81 declaration: declaration_specifiers . SEMICOLON
   82            | declaration_specifiers . init_declarator_list SEMICOLON
  199 function_definition: declaration_specifiers . declarator declaration_list compound_statement
  201 function_prototype: declaration_specifiers . declarator

    ROUND_BRACKET_OPEN  shift, and go to state 35
    MULTIPLY            shift, and go to state 36
    SEMICOLON           shift, and go to state 37
    IDENTIFIER          shift, and go to state 38

    init_declarator_list  go to state 39
    init_declarator       go to state 40
    declarator            go to state 41
    direct_declarator     go to state 42
    pointer               go to state 43


State 24

   83 declaration_specifiers: storage_class_specifier . declaration_specifiers_opt

    AUTO       shift, and go to state 1
    CHAR_T     shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOAT_T    shift, and go to state 7
    INLINE     shift, and go to state 8
    INT_T      shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOID_T     shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL_T     shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21

    $default  reduce using rule 88 (declaration_specifiers_opt)

    declaration_specifiers      go to state 44
    declaration_specifiers_opt  go to state 45
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


State 25

   84 declaration_specifiers: type_specifier . declaration_specifiers_opt

    AUTO       shift, and go to state 1
    CHAR_T     shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOAT_T    shift, and go to state 7
    INLINE     shift, and go to state 8
    INT_T      shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOID_T     shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL_T     shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21

    $default  reduce using rule 88 (declaration_specifiers_opt)

    declaration_specifiers      go to state 44
    declaration_specifiers_opt  go to state 46
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


State 26

  109 type_specifier: enum_specifier .

    $default  reduce using rule 109 (type_specifier)


State 27

   85 declaration_specifiers: type_qualifier . declaration_specifiers_opt

    AUTO       shift, and go to state 1
    CHAR_T     shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOAT_T    shift, and go to state 7
    INLINE     shift, and go to state 8
    INT_T      shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOID_T     shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL_T     shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21

    $default  reduce using rule 88 (declaration_specifiers_opt)

    declaration_specifiers      go to state 44
    declaration_specifiers_opt  go to state 47
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


State 28

   86 declaration_specifiers: function_specifier . declaration_specifiers_opt

    AUTO       shift, and go to state 1
    CHAR_T     shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOAT_T    shift, and go to state 7
    INLINE     shift, and go to state 8
    INT_T      shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOID_T     shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL_T     shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21

    $default  reduce using rule 88 (declaration_specifiers_opt)

    declaration_specifiers      go to state 44
    declaration_specifiers_opt  go to state 48
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


State 29

    0 $accept: translation_unit . $end
  196 translation_unit: translation_unit . external_declaration

    $end       shift, and go to state 49
    AUTO       shift, and go to state 1
    CHAR_T     shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOAT_T    shift, and go to state 7
    INLINE     shift, and go to state 8
    INT_T      shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOID_T     shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL_T     shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21

    declaration              go to state 22
    declaration_specifiers   go to state 23
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    external_declaration     go to state 50
    function_definition      go to state 31
    function_prototype       go to state 32


State 30

  195 translation_unit: external_declaration .

    $default  reduce using rule 195 (translation_unit)


State 31

  197 external_declaration: function_definition .

    $default  reduce using rule 197 (external_declaration)


State 32

  200 function_definition: function_prototype . compound_statement

    CURLY_BRACKET_OPEN  shift, and go to state 51

    compound_statement  go to state 52


State 33

  116 enum_specifier: ENUM IDENTIFIER .
  117 identifier_opt: IDENTIFIER .

    CURLY_BRACKET_OPEN  reduce using rule 117 (identifier_opt)
    $default            reduce using rule 116 (enum_specifier)


State 34

  114 enum_specifier: ENUM identifier_opt . CURLY_BRACKET_OPEN enumerator_list CURLY_BRACKET_CLOSE
  115               | ENUM identifier_opt . CURLY_BRACKET_OPEN enumerator_list COMMA CURLY_BRACKET_CLOSE

    CURLY_BRACKET_OPEN  shift, and go to state 53


State 35

  130 direct_declarator: ROUND_BRACKET_OPEN . declarator ROUND_BRACKET_CLOSE

    ROUND_BRACKET_OPEN  shift, and go to state 35
    MULTIPLY            shift, and go to state 36
    IDENTIFIER          shift, and go to state 38

    declarator         go to state 54
    direct_declarator  go to state 42
    pointer            go to state 43


State 36

  140 pointer: MULTIPLY . type_qualifier_list
  141        | MULTIPLY . type_qualifier_list pointer
  142        | MULTIPLY . pointer
  143        | MULTIPLY .

    CONST     shift, and go to state 3
    RESTRICT  shift, and go to state 12
    VOLATILE  shift, and go to state 18
    MULTIPLY  shift, and go to state 36

    $default  reduce using rule 143 (pointer)

    type_qualifier       go to state 55
    pointer              go to state 56
    type_qualifier_list  go to state 57


State 37

   81 declaration: declaration_specifiers SEMICOLON .

    $default  reduce using rule 81 (declaration)


State 38

  129 direct_declarator: IDENTIFIER .

    $default  reduce using rule 129 (direct_declarator)


State 39

   82 declaration: declaration_specifiers init_declarator_list . SEMICOLON
   90 init_declarator_list: init_declarator_list . COMMA init_declarator

    COMMA      shift, and go to state 58
    SEMICOLON  shift, and go to state 59


State 40

   89 init_declarator_list: init_declarator .

    $default  reduce using rule 89 (init_declarator_list)


State 41

   91 init_declarator: declarator .
   92                | declarator . ASSIGN_T initializer
  199 function_definition: declaration_specifiers declarator . declaration_list compound_statement
  201 function_prototype: declaration_specifiers declarator .

    AUTO       shift, and go to state 1
    CHAR_T     shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOAT_T    shift, and go to state 7
    INLINE     shift, and go to state 8
    INT_T      shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOID_T     shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL_T     shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21
    ASSIGN_T   shift, and go to state 60

    CURLY_BRACKET_OPEN  reduce using rule 201 (function_prototype)
    $default            reduce using rule 91 (init_declarator)

    declaration              go to state 61
    declaration_specifiers   go to state 62
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    declaration_list         go to state 63


State 42

  128 declarator: direct_declarator .
  131 direct_declarator: direct_declarator . SQUARE_BRACKET_OPEN type_qualifier_list_opt SQUARE_BRACKET_CLOSE
  132                  | direct_declarator . SQUARE_BRACKET_OPEN STATIC type_qualifier_list_opt assignment_expression SQUARE_BRACKET_CLOSE
  133                  | direct_declarator . SQUARE_BRACKET_OPEN type_qualifier_list STATIC assignment_expression SQUARE_BRACKET_CLOSE
  134                  | direct_declarator . SQUARE_BRACKET_OPEN type_qualifier_list_opt assignment_expression SQUARE_BRACKET_CLOSE
  135                  | direct_declarator . ROUND_BRACKET_OPEN parameter_type_list ROUND_BRACKET_CLOSE
  136                  | direct_declarator . ROUND_BRACKET_OPEN identifier_list ROUND_BRACKET_CLOSE
  137                  | direct_declarator . SQUARE_BRACKET_OPEN type_qualifier_list_opt MULTIPLY SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_OPEN  shift, and go to state 64
    ROUND_BRACKET_OPEN   shift, and go to state 65

    $default  reduce using rule 128 (declarator)


State 43

  127 declarator: pointer . direct_declarator

    ROUND_BRACKET_OPEN  shift, and go to state 35
    IDENTIFIER          shift, and go to state 38

    direct_declarator  go to state 66


State 44

   87 declaration_specifiers_opt: declaration_specifiers .

    $default  reduce using rule 87 (declaration_specifiers_opt)


State 45

   83 declaration_specifiers: storage_class_specifier declaration_specifiers_opt .

    $default  reduce using rule 83 (declaration_specifiers)


State 46

   84 declaration_specifiers: type_specifier declaration_specifiers_opt .

    $default  reduce using rule 84 (declaration_specifiers)


State 47

   85 declaration_specifiers: type_qualifier declaration_specifiers_opt .

    $default  reduce using rule 85 (declaration_specifiers)


State 48

   86 declaration_specifiers: function_specifier declaration_specifiers_opt .

    $default  reduce using rule 86 (declaration_specifiers)


State 49

    0 $accept: translation_unit $end .

    $default  accept


State 50

  196 translation_unit: translation_unit external_declaration .

    $default  reduce using rule 196 (translation_unit)


State 51

  176 compound_statement: CURLY_BRACKET_OPEN . CURLY_BRACKET_CLOSE
  177                   | CURLY_BRACKET_OPEN . block_item_list CURLY_BRACKET_CLOSE

    AUTO                 shift, and go to state 1
    BREAK                shift, and go to state 67
    CASE                 shift, and go to state 68
    CHAR_T               shift, and go to state 2
    CONST                shift, and go to state 3
    CONTINUE             shift, and go to state 69
    DEFAULT              shift, and go to state 70
    DO                   shift, and go to state 71
    DOUBLE               shift, and go to state 4
    ENUM                 shift, and go to state 5
    EXTERN               shift, and go to state 6
    FLOAT_T              shift, and go to state 7
    FOR                  shift, and go to state 72
    GOTO_T               shift, and go to state 73
    IF                   shift, and go to state 74
    INLINE               shift, and go to state 8
    INT_T                shift, and go to state 9
    LONG                 shift, and go to state 10
    REGISTER             shift, and go to state 11
    RESTRICT             shift, and go to state 12
    RETURN_T             shift, and go to state 75
    SHORT                shift, and go to state 13
    SIGNED               shift, and go to state 14
    SIZEOF               shift, and go to state 76
    STATIC               shift, and go to state 15
    SWITCH               shift, and go to state 77
    UNSIGNED             shift, and go to state 16
    VOID_T               shift, and go to state 17
    VOLATILE             shift, and go to state 18
    WHILE                shift, and go to state 78
    BOOL_T               shift, and go to state 19
    COMPLEX              shift, and go to state 20
    IMAGINARY            shift, and go to state 21
    ROUND_BRACKET_OPEN   shift, and go to state 79
    CURLY_BRACKET_OPEN   shift, and go to state 51
    CURLY_BRACKET_CLOSE  shift, and go to state 80
    INCREMENT            shift, and go to state 81
    DECREMENT            shift, and go to state 82
    BIT_AND              shift, and go to state 83
    BITWISE_NOT          shift, and go to state 84
    LOGICAL_NOT          shift, and go to state 85
    MULTIPLY             shift, and go to state 86
    PLUS                 shift, and go to state 87
    MINUS                shift, and go to state 88
    SEMICOLON            shift, and go to state 89
    INTEGER_CONSTANT     shift, and go to state 90
    FLOATING_CONSTANT    shift, and go to state 91
    CHAR_CONSTANT        shift, and go to state 92
    STRING_LITERAL       shift, and go to state 93
    IDENTIFIER           shift, and go to state 94

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    declaration                go to state 113
    declaration_specifiers     go to state 62
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 114
    labeled_statement          go to state 115
    compound_statement         go to state 116
    block_item_list            go to state 117
    block_item                 go to state 118
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 52

  200 function_definition: function_prototype compound_statement .

    $default  reduce using rule 200 (function_definition)


State 53

  114 enum_specifier: ENUM identifier_opt CURLY_BRACKET_OPEN . enumerator_list CURLY_BRACKET_CLOSE
  115               | ENUM identifier_opt CURLY_BRACKET_OPEN . enumerator_list COMMA CURLY_BRACKET_CLOSE

    IDENTIFIER  shift, and go to state 123

    enumerator_list  go to state 124
    enumerator       go to state 125


State 54

  130 direct_declarator: ROUND_BRACKET_OPEN declarator . ROUND_BRACKET_CLOSE

    ROUND_BRACKET_CLOSE  shift, and go to state 126


State 55

  144 type_qualifier_list: type_qualifier .

    $default  reduce using rule 144 (type_qualifier_list)


State 56

  142 pointer: MULTIPLY pointer .

    $default  reduce using rule 142 (pointer)


State 57

  140 pointer: MULTIPLY type_qualifier_list .
  141        | MULTIPLY type_qualifier_list . pointer
  145 type_qualifier_list: type_qualifier_list . type_qualifier

    CONST     shift, and go to state 3
    RESTRICT  shift, and go to state 12
    VOLATILE  shift, and go to state 18
    MULTIPLY  shift, and go to state 36

    $default  reduce using rule 140 (pointer)

    type_qualifier  go to state 127
    pointer         go to state 128


State 58

   90 init_declarator_list: init_declarator_list COMMA . init_declarator

    ROUND_BRACKET_OPEN  shift, and go to state 35
    MULTIPLY            shift, and go to state 36
    IDENTIFIER          shift, and go to state 38

    init_declarator    go to state 129
    declarator         go to state 130
    direct_declarator  go to state 42
    pointer            go to state 43


State 59

   82 declaration: declaration_specifiers init_declarator_list SEMICOLON .

    $default  reduce using rule 82 (declaration)


State 60

   92 init_declarator: declarator ASSIGN_T . initializer

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    CURLY_BRACKET_OPEN  shift, and go to state 131
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 133
    initializer                go to state 134


State 61

  202 declaration_list: declaration .

    $default  reduce using rule 202 (declaration_list)


State 62

   81 declaration: declaration_specifiers . SEMICOLON
   82            | declaration_specifiers . init_declarator_list SEMICOLON

    ROUND_BRACKET_OPEN  shift, and go to state 35
    MULTIPLY            shift, and go to state 36
    SEMICOLON           shift, and go to state 37
    IDENTIFIER          shift, and go to state 38

    init_declarator_list  go to state 39
    init_declarator       go to state 40
    declarator            go to state 130
    direct_declarator     go to state 42
    pointer               go to state 43


State 63

  199 function_definition: declaration_specifiers declarator declaration_list . compound_statement
  203 declaration_list: declaration_list . declaration

    AUTO                shift, and go to state 1
    CHAR_T              shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FLOAT_T             shift, and go to state 7
    INLINE              shift, and go to state 8
    INT_T               shift, and go to state 9
    LONG                shift, and go to state 10
    REGISTER            shift, and go to state 11
    RESTRICT            shift, and go to state 12
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    STATIC              shift, and go to state 15
    UNSIGNED            shift, and go to state 16
    VOID_T              shift, and go to state 17
    VOLATILE            shift, and go to state 18
    BOOL_T              shift, and go to state 19
    COMPLEX             shift, and go to state 20
    IMAGINARY           shift, and go to state 21
    CURLY_BRACKET_OPEN  shift, and go to state 51

    declaration              go to state 135
    declaration_specifiers   go to state 62
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    compound_statement       go to state 136


State 64

  131 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN . type_qualifier_list_opt SQUARE_BRACKET_CLOSE
  132                  | direct_declarator SQUARE_BRACKET_OPEN . STATIC type_qualifier_list_opt assignment_expression SQUARE_BRACKET_CLOSE
  133                  | direct_declarator SQUARE_BRACKET_OPEN . type_qualifier_list STATIC assignment_expression SQUARE_BRACKET_CLOSE
  134                  | direct_declarator SQUARE_BRACKET_OPEN . type_qualifier_list_opt assignment_expression SQUARE_BRACKET_CLOSE
  137                  | direct_declarator SQUARE_BRACKET_OPEN . type_qualifier_list_opt MULTIPLY SQUARE_BRACKET_CLOSE

    CONST     shift, and go to state 3
    RESTRICT  shift, and go to state 12
    STATIC    shift, and go to state 137
    VOLATILE  shift, and go to state 18

    $default  reduce using rule 139 (type_qualifier_list_opt)

    type_qualifier           go to state 55
    type_qualifier_list_opt  go to state 138
    type_qualifier_list      go to state 139


State 65

  135 direct_declarator: direct_declarator ROUND_BRACKET_OPEN . parameter_type_list ROUND_BRACKET_CLOSE
  136                  | direct_declarator ROUND_BRACKET_OPEN . identifier_list ROUND_BRACKET_CLOSE

    AUTO        shift, and go to state 1
    CHAR_T      shift, and go to state 2
    CONST       shift, and go to state 3
    DOUBLE      shift, and go to state 4
    ENUM        shift, and go to state 5
    EXTERN      shift, and go to state 6
    FLOAT_T     shift, and go to state 7
    INLINE      shift, and go to state 8
    INT_T       shift, and go to state 9
    LONG        shift, and go to state 10
    REGISTER    shift, and go to state 11
    RESTRICT    shift, and go to state 12
    SHORT       shift, and go to state 13
    SIGNED      shift, and go to state 14
    STATIC      shift, and go to state 15
    UNSIGNED    shift, and go to state 16
    VOID_T      shift, and go to state 17
    VOLATILE    shift, and go to state 18
    BOOL_T      shift, and go to state 19
    COMPLEX     shift, and go to state 20
    IMAGINARY   shift, and go to state 21
    IDENTIFIER  shift, and go to state 140

    declaration_specifiers   go to state 141
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    parameter_type_list      go to state 142
    parameter_list           go to state 143
    parameter_declaration    go to state 144
    identifier_list          go to state 145


State 66

  127 declarator: pointer direct_declarator .
  131 direct_declarator: direct_declarator . SQUARE_BRACKET_OPEN type_qualifier_list_opt SQUARE_BRACKET_CLOSE
  132                  | direct_declarator . SQUARE_BRACKET_OPEN STATIC type_qualifier_list_opt assignment_expression SQUARE_BRACKET_CLOSE
  133                  | direct_declarator . SQUARE_BRACKET_OPEN type_qualifier_list STATIC assignment_expression SQUARE_BRACKET_CLOSE
  134                  | direct_declarator . SQUARE_BRACKET_OPEN type_qualifier_list_opt assignment_expression SQUARE_BRACKET_CLOSE
  135                  | direct_declarator . ROUND_BRACKET_OPEN parameter_type_list ROUND_BRACKET_CLOSE
  136                  | direct_declarator . ROUND_BRACKET_OPEN identifier_list ROUND_BRACKET_CLOSE
  137                  | direct_declarator . SQUARE_BRACKET_OPEN type_qualifier_list_opt MULTIPLY SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_OPEN  shift, and go to state 64
    ROUND_BRACKET_OPEN   shift, and go to state 65

    $default  reduce using rule 127 (declarator)


State 67

  192 jump_statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 146


State 68

  174 labeled_statement: CASE . constant_expression COLON statement

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 147
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 148
    constant_expression        go to state 149


State 69

  191 jump_statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 150


State 70

  175 labeled_statement: DEFAULT . COLON statement

    COLON  shift, and go to state 151


State 71

  188 iteration_statement: DO . M statement M WHILE ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE SEMICOLON

    $default  reduce using rule 63 (M)

    M  go to state 152


State 72

  189 iteration_statement: FOR . ROUND_BRACKET_OPEN expression_statement M expression_statement N M expression N ROUND_BRACKET_CLOSE M statement

    ROUND_BRACKET_OPEN  shift, and go to state 153


State 73

  190 jump_statement: GOTO_T . IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 154


State 74

  184 selection_statement: IF . ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N
  185                    | IF . ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N ELSE M statement N

    ROUND_BRACKET_OPEN  shift, and go to state 155


State 75

  193 jump_statement: RETURN_T . SEMICOLON
  194               | RETURN_T . expression SEMICOLON

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    SEMICOLON           shift, and go to state 156
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 157


State 76

   23 unary_expression: SIZEOF . unary_expression
   24                 | SIZEOF . ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 158
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression  go to state 95
    postfix_expression  go to state 96
    unary_expression    go to state 159
    unary_operator      go to state 98


State 77

  186 selection_statement: SWITCH . ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE statement

    ROUND_BRACKET_OPEN  shift, and go to state 160


State 78

  187 iteration_statement: WHILE . M ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement

    $default  reduce using rule 63 (M)

    M  go to state 161


State 79

    6 primary_expression: ROUND_BRACKET_OPEN . expression ROUND_BRACKET_CLOSE
   15 postfix_expression: ROUND_BRACKET_OPEN . type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   16                   | ROUND_BRACKET_OPEN . type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE
   32 cast_expression: ROUND_BRACKET_OPEN . type_name ROUND_BRACKET_CLOSE cast_expression

    CHAR_T              shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    FLOAT_T             shift, and go to state 7
    INT_T               shift, and go to state 9
    LONG                shift, and go to state 10
    RESTRICT            shift, and go to state 12
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 76
    UNSIGNED            shift, and go to state 16
    VOID_T              shift, and go to state 17
    VOLATILE            shift, and go to state 18
    BOOL_T              shift, and go to state 19
    COMPLEX             shift, and go to state 20
    IMAGINARY           shift, and go to state 21
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 162
    type_specifier             go to state 163
    specifier_qualifier_list   go to state 164
    enum_specifier             go to state 26
    type_qualifier             go to state 165
    type_name                  go to state 166


State 80

  176 compound_statement: CURLY_BRACKET_OPEN CURLY_BRACKET_CLOSE .

    $default  reduce using rule 176 (compound_statement)


State 81

   20 unary_expression: INCREMENT . unary_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 167
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression  go to state 95
    postfix_expression  go to state 96
    unary_expression    go to state 168
    unary_operator      go to state 98


State 82

   21 unary_expression: DECREMENT . unary_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 167
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression  go to state 95
    postfix_expression  go to state 96
    unary_expression    go to state 169
    unary_operator      go to state 98


State 83

   25 unary_operator: BIT_AND .

    $default  reduce using rule 25 (unary_operator)


State 84

   29 unary_operator: BITWISE_NOT .

    $default  reduce using rule 29 (unary_operator)


State 85

   30 unary_operator: LOGICAL_NOT .

    $default  reduce using rule 30 (unary_operator)


State 86

   26 unary_operator: MULTIPLY .

    $default  reduce using rule 26 (unary_operator)


State 87

   27 unary_operator: PLUS .

    $default  reduce using rule 27 (unary_operator)


State 88

   28 unary_operator: MINUS .

    $default  reduce using rule 28 (unary_operator)


State 89

  183 expression_statement: SEMICOLON .

    $default  reduce using rule 183 (expression_statement)


State 90

    5 primary_expression: INTEGER_CONSTANT .

    $default  reduce using rule 5 (primary_expression)


State 91

    4 primary_expression: FLOATING_CONSTANT .

    $default  reduce using rule 4 (primary_expression)


State 92

    2 primary_expression: CHAR_CONSTANT .

    $default  reduce using rule 2 (primary_expression)


State 93

    3 primary_expression: STRING_LITERAL .

    $default  reduce using rule 3 (primary_expression)


State 94

    1 primary_expression: IDENTIFIER .
  173 labeled_statement: IDENTIFIER . COLON statement

    COLON  shift, and go to state 170

    $default  reduce using rule 1 (primary_expression)


State 95

    7 postfix_expression: primary_expression .

    $default  reduce using rule 7 (postfix_expression)


State 96

    8 postfix_expression: postfix_expression . SQUARE_BRACKET_OPEN expression SQUARE_BRACKET_CLOSE
    9                   | postfix_expression . ROUND_BRACKET_OPEN ROUND_BRACKET_CLOSE
   10                   | postfix_expression . ROUND_BRACKET_OPEN argument_expression_list ROUND_BRACKET_CLOSE
   11                   | postfix_expression . DOT IDENTIFIER
   12                   | postfix_expression . ARROW IDENTIFIER
   13                   | postfix_expression . INCREMENT
   14                   | postfix_expression . DECREMENT
   19 unary_expression: postfix_expression .

    SQUARE_BRACKET_OPEN  shift, and go to state 171
    ROUND_BRACKET_OPEN   shift, and go to state 172
    DOT                  shift, and go to state 173
    ARROW                shift, and go to state 174
    INCREMENT            shift, and go to state 175
    DECREMENT            shift, and go to state 176

    $default  reduce using rule 19 (unary_expression)


State 97

   31 cast_expression: unary_expression .
   66 assignment_expression: unary_expression . assignment_operator assignment_expression

    ASSIGN_T            shift, and go to state 177
    PLUS_ASSIGN         shift, and go to state 178
    MINUS_ASSIGN        shift, and go to state 179
    MULTIPLY_ASSIGN     shift, and go to state 180
    DIVIDE_ASSIGN       shift, and go to state 181
    MODULO_ASSIGN       shift, and go to state 182
    LEFT_SHIFT_ASSIGN   shift, and go to state 183
    RIGHT_SHIFT_ASSIGN  shift, and go to state 184
    BIT_AND_ASSIGN      shift, and go to state 185
    BIT_XOR_ASSIGN      shift, and go to state 186
    BIT_OR_ASSIGN       shift, and go to state 187

    $default  reduce using rule 31 (cast_expression)

    assignment_operator  go to state 188


State 98

   22 unary_expression: unary_operator . cast_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression  go to state 95
    postfix_expression  go to state 96
    unary_expression    go to state 147
    unary_operator      go to state 98
    cast_expression     go to state 189


State 99

   33 multiplicative_expression: cast_expression .

    $default  reduce using rule 33 (multiplicative_expression)


State 100

   34 multiplicative_expression: multiplicative_expression . MULTIPLY cast_expression
   35                          | multiplicative_expression . DIVIDE cast_expression
   36                          | multiplicative_expression . MODULO cast_expression
   37 additive_expression: multiplicative_expression .

    MULTIPLY  shift, and go to state 190
    DIVIDE    shift, and go to state 191
    MODULO    shift, and go to state 192

    $default  reduce using rule 37 (additive_expression)


State 101

   38 additive_expression: additive_expression . PLUS multiplicative_expression
   39                    | additive_expression . MINUS multiplicative_expression
   40 shift_expression: additive_expression .

    PLUS   shift, and go to state 193
    MINUS  shift, and go to state 194

    $default  reduce using rule 40 (shift_expression)


State 102

   41 shift_expression: shift_expression . LEFT_SHIFT additive_expression
   42                 | shift_expression . RIGHT_SHIFT additive_expression
   43 relational_expression: shift_expression .

    LEFT_SHIFT   shift, and go to state 195
    RIGHT_SHIFT  shift, and go to state 196

    $default  reduce using rule 43 (relational_expression)


State 103

   44 relational_expression: relational_expression . LESS_THAN shift_expression
   45                      | relational_expression . GREATER_THAN shift_expression
   46                      | relational_expression . LESS_THAN_EQUAL shift_expression
   47                      | relational_expression . GREATER_THAN_EQUAL shift_expression
   48 equality_expression: relational_expression .

    LESS_THAN           shift, and go to state 197
    GREATER_THAN        shift, and go to state 198
    LESS_THAN_EQUAL     shift, and go to state 199
    GREATER_THAN_EQUAL  shift, and go to state 200

    $default  reduce using rule 48 (equality_expression)


State 104

   49 equality_expression: equality_expression . EQUAL relational_expression
   50                    | equality_expression . NOT_EQUAL relational_expression
   51 AND_expression: equality_expression .

    EQUAL      shift, and go to state 201
    NOT_EQUAL  shift, and go to state 202

    $default  reduce using rule 51 (AND_expression)


State 105

   52 AND_expression: AND_expression . BIT_AND equality_expression
   53 exclusive_OR_expression: AND_expression .

    BIT_AND  shift, and go to state 203

    $default  reduce using rule 53 (exclusive_OR_expression)


State 106

   54 exclusive_OR_expression: exclusive_OR_expression . BIT_XOR AND_expression
   55 inclusive_OR_expression: exclusive_OR_expression .

    BIT_XOR  shift, and go to state 204

    $default  reduce using rule 55 (inclusive_OR_expression)


State 107

   56 inclusive_OR_expression: inclusive_OR_expression . BIT_OR exclusive_OR_expression
   57 logical_AND_expression: inclusive_OR_expression .

    BIT_OR  shift, and go to state 205

    $default  reduce using rule 57 (logical_AND_expression)


State 108

   58 logical_AND_expression: logical_AND_expression . LOGICAL_AND M inclusive_OR_expression
   59 logical_OR_expression: logical_AND_expression .

    LOGICAL_AND  shift, and go to state 206

    $default  reduce using rule 59 (logical_OR_expression)


State 109

   60 logical_OR_expression: logical_OR_expression . LOGICAL_OR M logical_AND_expression
   61 conditional_expression: logical_OR_expression .
   62                       | logical_OR_expression . N QUESTION_MARK M expression N COLON M conditional_expression

    LOGICAL_OR  shift, and go to state 207

    QUESTION_MARK  reduce using rule 64 (N)
    $default       reduce using rule 61 (conditional_expression)

    N  go to state 208


State 110

   65 assignment_expression: conditional_expression .

    $default  reduce using rule 65 (assignment_expression)


State 111

   78 expression: assignment_expression .

    $default  reduce using rule 78 (expression)


State 112

   79 expression: expression . COMMA assignment_expression
  182 expression_statement: expression . SEMICOLON

    COMMA      shift, and go to state 209
    SEMICOLON  shift, and go to state 210


State 113

  180 block_item: declaration .

    $default  reduce using rule 180 (block_item)


State 114

  181 block_item: statement .

    $default  reduce using rule 181 (block_item)


State 115

  167 statement: labeled_statement .

    $default  reduce using rule 167 (statement)


State 116

  168 statement: compound_statement .

    $default  reduce using rule 168 (statement)


State 117

  177 compound_statement: CURLY_BRACKET_OPEN block_item_list . CURLY_BRACKET_CLOSE
  179 block_item_list: block_item_list . M block_item

    CURLY_BRACKET_CLOSE  shift, and go to state 211

    $default  reduce using rule 63 (M)

    M  go to state 212


State 118

  178 block_item_list: block_item .

    $default  reduce using rule 178 (block_item_list)


State 119

  169 statement: expression_statement .

    $default  reduce using rule 169 (statement)


State 120

  170 statement: selection_statement .

    $default  reduce using rule 170 (statement)


State 121

  171 statement: iteration_statement .

    $default  reduce using rule 171 (statement)


State 122

  172 statement: jump_statement .

    $default  reduce using rule 172 (statement)


State 123

  121 enumerator: IDENTIFIER .
  122           | IDENTIFIER . ASSIGN_T constant_expression

    ASSIGN_T  shift, and go to state 213

    $default  reduce using rule 121 (enumerator)


State 124

  114 enum_specifier: ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list . CURLY_BRACKET_CLOSE
  115               | ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list . COMMA CURLY_BRACKET_CLOSE
  120 enumerator_list: enumerator_list . COMMA enumerator

    CURLY_BRACKET_CLOSE  shift, and go to state 214
    COMMA                shift, and go to state 215


State 125

  119 enumerator_list: enumerator .

    $default  reduce using rule 119 (enumerator_list)


State 126

  130 direct_declarator: ROUND_BRACKET_OPEN declarator ROUND_BRACKET_CLOSE .

    $default  reduce using rule 130 (direct_declarator)


State 127

  145 type_qualifier_list: type_qualifier_list type_qualifier .

    $default  reduce using rule 145 (type_qualifier_list)


State 128

  141 pointer: MULTIPLY type_qualifier_list pointer .

    $default  reduce using rule 141 (pointer)


State 129

   90 init_declarator_list: init_declarator_list COMMA init_declarator .

    $default  reduce using rule 90 (init_declarator_list)


State 130

   91 init_declarator: declarator .
   92                | declarator . ASSIGN_T initializer

    ASSIGN_T  shift, and go to state 60

    $default  reduce using rule 91 (init_declarator)


State 131

  156 initializer: CURLY_BRACKET_OPEN . initializer_list CURLY_BRACKET_CLOSE
  157            | CURLY_BRACKET_OPEN . initializer_list COMMA CURLY_BRACKET_CLOSE

    SQUARE_BRACKET_OPEN  shift, and go to state 216
    DOT                  shift, and go to state 217

    $default  reduce using rule 161 (designation_opt)

    initializer_list  go to state 218
    designation_opt   go to state 219
    designation       go to state 220
    designator_list   go to state 221
    designator        go to state 222


State 132

    1 primary_expression: IDENTIFIER .

    $default  reduce using rule 1 (primary_expression)


State 133

  155 initializer: assignment_expression .

    $default  reduce using rule 155 (initializer)


State 134

   92 init_declarator: declarator ASSIGN_T initializer .

    $default  reduce using rule 92 (init_declarator)


State 135

  203 declaration_list: declaration_list declaration .

    $default  reduce using rule 203 (declaration_list)


State 136

  199 function_definition: declaration_specifiers declarator declaration_list compound_statement .

    $default  reduce using rule 199 (function_definition)


State 137

  132 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN STATIC . type_qualifier_list_opt assignment_expression SQUARE_BRACKET_CLOSE

    CONST     shift, and go to state 3
    RESTRICT  shift, and go to state 12
    VOLATILE  shift, and go to state 18

    $default  reduce using rule 139 (type_qualifier_list_opt)

    type_qualifier           go to state 55
    type_qualifier_list_opt  go to state 223
    type_qualifier_list      go to state 224


State 138

  131 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list_opt . SQUARE_BRACKET_CLOSE
  134                  | direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list_opt . assignment_expression SQUARE_BRACKET_CLOSE
  137                  | direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list_opt . MULTIPLY SQUARE_BRACKET_CLOSE

    SIZEOF                shift, and go to state 76
    SQUARE_BRACKET_CLOSE  shift, and go to state 225
    ROUND_BRACKET_OPEN    shift, and go to state 79
    INCREMENT             shift, and go to state 81
    DECREMENT             shift, and go to state 82
    BIT_AND               shift, and go to state 83
    BITWISE_NOT           shift, and go to state 84
    LOGICAL_NOT           shift, and go to state 85
    MULTIPLY              shift, and go to state 226
    PLUS                  shift, and go to state 87
    MINUS                 shift, and go to state 88
    INTEGER_CONSTANT      shift, and go to state 90
    FLOATING_CONSTANT     shift, and go to state 91
    CHAR_CONSTANT         shift, and go to state 92
    STRING_LITERAL        shift, and go to state 93
    IDENTIFIER            shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 227


State 139

  133 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list . STATIC assignment_expression SQUARE_BRACKET_CLOSE
  138 type_qualifier_list_opt: type_qualifier_list .
  145 type_qualifier_list: type_qualifier_list . type_qualifier

    CONST     shift, and go to state 3
    RESTRICT  shift, and go to state 12
    STATIC    shift, and go to state 228
    VOLATILE  shift, and go to state 18

    $default  reduce using rule 138 (type_qualifier_list_opt)

    type_qualifier  go to state 127


State 140

  152 identifier_list: IDENTIFIER .

    $default  reduce using rule 152 (identifier_list)


State 141

  150 parameter_declaration: declaration_specifiers . declarator
  151                      | declaration_specifiers .

    ROUND_BRACKET_OPEN  shift, and go to state 35
    MULTIPLY            shift, and go to state 36
    IDENTIFIER          shift, and go to state 38

    $default  reduce using rule 151 (parameter_declaration)

    declarator         go to state 229
    direct_declarator  go to state 42
    pointer            go to state 43


State 142

  135 direct_declarator: direct_declarator ROUND_BRACKET_OPEN parameter_type_list . ROUND_BRACKET_CLOSE

    ROUND_BRACKET_CLOSE  shift, and go to state 230


State 143

  146 parameter_type_list: parameter_list .
  147                    | parameter_list . COMMA ELLIPSIS
  149 parameter_list: parameter_list . COMMA parameter_declaration

    COMMA  shift, and go to state 231

    $default  reduce using rule 146 (parameter_type_list)


State 144

  148 parameter_list: parameter_declaration .

    $default  reduce using rule 148 (parameter_list)


State 145

  136 direct_declarator: direct_declarator ROUND_BRACKET_OPEN identifier_list . ROUND_BRACKET_CLOSE
  153 identifier_list: identifier_list . COMMA IDENTIFIER

    ROUND_BRACKET_CLOSE  shift, and go to state 232
    COMMA                shift, and go to state 233


State 146

  192 jump_statement: BREAK SEMICOLON .

    $default  reduce using rule 192 (jump_statement)


State 147

   31 cast_expression: unary_expression .

    $default  reduce using rule 31 (cast_expression)


State 148

   80 constant_expression: conditional_expression .

    $default  reduce using rule 80 (constant_expression)


State 149

  174 labeled_statement: CASE constant_expression . COLON statement

    COLON  shift, and go to state 234


State 150

  191 jump_statement: CONTINUE SEMICOLON .

    $default  reduce using rule 191 (jump_statement)


State 151

  175 labeled_statement: DEFAULT COLON . statement

    BREAK               shift, and go to state 67
    CASE                shift, and go to state 68
    CONTINUE            shift, and go to state 69
    DEFAULT             shift, and go to state 70
    DO                  shift, and go to state 71
    FOR                 shift, and go to state 72
    GOTO_T              shift, and go to state 73
    IF                  shift, and go to state 74
    RETURN_T            shift, and go to state 75
    SIZEOF              shift, and go to state 76
    SWITCH              shift, and go to state 77
    WHILE               shift, and go to state 78
    ROUND_BRACKET_OPEN  shift, and go to state 79
    CURLY_BRACKET_OPEN  shift, and go to state 51
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    SEMICOLON           shift, and go to state 89
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 94

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    statement                  go to state 235
    labeled_statement          go to state 115
    compound_statement         go to state 116
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 152

  188 iteration_statement: DO M . statement M WHILE ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE SEMICOLON

    BREAK               shift, and go to state 67
    CASE                shift, and go to state 68
    CONTINUE            shift, and go to state 69
    DEFAULT             shift, and go to state 70
    DO                  shift, and go to state 71
    FOR                 shift, and go to state 72
    GOTO_T              shift, and go to state 73
    IF                  shift, and go to state 74
    RETURN_T            shift, and go to state 75
    SIZEOF              shift, and go to state 76
    SWITCH              shift, and go to state 77
    WHILE               shift, and go to state 78
    ROUND_BRACKET_OPEN  shift, and go to state 79
    CURLY_BRACKET_OPEN  shift, and go to state 51
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    SEMICOLON           shift, and go to state 89
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 94

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    statement                  go to state 236
    labeled_statement          go to state 115
    compound_statement         go to state 116
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 153

  189 iteration_statement: FOR ROUND_BRACKET_OPEN . expression_statement M expression_statement N M expression N ROUND_BRACKET_CLOSE M statement

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    SEMICOLON           shift, and go to state 89
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    expression_statement       go to state 237


State 154

  190 jump_statement: GOTO_T IDENTIFIER . SEMICOLON

    SEMICOLON  shift, and go to state 238


State 155

  184 selection_statement: IF ROUND_BRACKET_OPEN . expression N ROUND_BRACKET_CLOSE M statement N
  185                    | IF ROUND_BRACKET_OPEN . expression N ROUND_BRACKET_CLOSE M statement N ELSE M statement N

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 239


State 156

  193 jump_statement: RETURN_T SEMICOLON .

    $default  reduce using rule 193 (jump_statement)


State 157

   79 expression: expression . COMMA assignment_expression
  194 jump_statement: RETURN_T expression . SEMICOLON

    COMMA      shift, and go to state 209
    SEMICOLON  shift, and go to state 240


State 158

    6 primary_expression: ROUND_BRACKET_OPEN . expression ROUND_BRACKET_CLOSE
   15 postfix_expression: ROUND_BRACKET_OPEN . type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   16                   | ROUND_BRACKET_OPEN . type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE
   24 unary_expression: SIZEOF ROUND_BRACKET_OPEN . type_name ROUND_BRACKET_CLOSE

    CHAR_T              shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    FLOAT_T             shift, and go to state 7
    INT_T               shift, and go to state 9
    LONG                shift, and go to state 10
    RESTRICT            shift, and go to state 12
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 76
    UNSIGNED            shift, and go to state 16
    VOID_T              shift, and go to state 17
    VOLATILE            shift, and go to state 18
    BOOL_T              shift, and go to state 19
    COMPLEX             shift, and go to state 20
    IMAGINARY           shift, and go to state 21
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 162
    type_specifier             go to state 163
    specifier_qualifier_list   go to state 164
    enum_specifier             go to state 26
    type_qualifier             go to state 165
    type_name                  go to state 241


State 159

   23 unary_expression: SIZEOF unary_expression .

    $default  reduce using rule 23 (unary_expression)


State 160

  186 selection_statement: SWITCH ROUND_BRACKET_OPEN . expression ROUND_BRACKET_CLOSE statement

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 242


State 161

  187 iteration_statement: WHILE M . ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement

    ROUND_BRACKET_OPEN  shift, and go to state 243


State 162

    6 primary_expression: ROUND_BRACKET_OPEN expression . ROUND_BRACKET_CLOSE
   79 expression: expression . COMMA assignment_expression

    ROUND_BRACKET_CLOSE  shift, and go to state 244
    COMMA                shift, and go to state 209


State 163

  110 specifier_qualifier_list: type_specifier . specifier_qualifier_list_opt

    CHAR_T     shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    FLOAT_T    shift, and go to state 7
    INT_T      shift, and go to state 9
    LONG       shift, and go to state 10
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    UNSIGNED   shift, and go to state 16
    VOID_T     shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL_T     shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21

    $default  reduce using rule 113 (specifier_qualifier_list_opt)

    type_specifier                go to state 163
    specifier_qualifier_list      go to state 245
    specifier_qualifier_list_opt  go to state 246
    enum_specifier                go to state 26
    type_qualifier                go to state 165


State 164

  154 type_name: specifier_qualifier_list .

    $default  reduce using rule 154 (type_name)


State 165

  111 specifier_qualifier_list: type_qualifier . specifier_qualifier_list_opt

    CHAR_T     shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    FLOAT_T    shift, and go to state 7
    INT_T      shift, and go to state 9
    LONG       shift, and go to state 10
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    UNSIGNED   shift, and go to state 16
    VOID_T     shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL_T     shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21

    $default  reduce using rule 113 (specifier_qualifier_list_opt)

    type_specifier                go to state 163
    specifier_qualifier_list      go to state 245
    specifier_qualifier_list_opt  go to state 247
    enum_specifier                go to state 26
    type_qualifier                go to state 165


State 166

   15 postfix_expression: ROUND_BRACKET_OPEN type_name . ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   16                   | ROUND_BRACKET_OPEN type_name . ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE
   32 cast_expression: ROUND_BRACKET_OPEN type_name . ROUND_BRACKET_CLOSE cast_expression

    ROUND_BRACKET_CLOSE  shift, and go to state 248


State 167

    6 primary_expression: ROUND_BRACKET_OPEN . expression ROUND_BRACKET_CLOSE
   15 postfix_expression: ROUND_BRACKET_OPEN . type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   16                   | ROUND_BRACKET_OPEN . type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE

    CHAR_T              shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    FLOAT_T             shift, and go to state 7
    INT_T               shift, and go to state 9
    LONG                shift, and go to state 10
    RESTRICT            shift, and go to state 12
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 76
    UNSIGNED            shift, and go to state 16
    VOID_T              shift, and go to state 17
    VOLATILE            shift, and go to state 18
    BOOL_T              shift, and go to state 19
    COMPLEX             shift, and go to state 20
    IMAGINARY           shift, and go to state 21
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 162
    type_specifier             go to state 163
    specifier_qualifier_list   go to state 164
    enum_specifier             go to state 26
    type_qualifier             go to state 165
    type_name                  go to state 249


State 168

   20 unary_expression: INCREMENT unary_expression .

    $default  reduce using rule 20 (unary_expression)


State 169

   21 unary_expression: DECREMENT unary_expression .

    $default  reduce using rule 21 (unary_expression)


State 170

  173 labeled_statement: IDENTIFIER COLON . statement

    BREAK               shift, and go to state 67
    CASE                shift, and go to state 68
    CONTINUE            shift, and go to state 69
    DEFAULT             shift, and go to state 70
    DO                  shift, and go to state 71
    FOR                 shift, and go to state 72
    GOTO_T              shift, and go to state 73
    IF                  shift, and go to state 74
    RETURN_T            shift, and go to state 75
    SIZEOF              shift, and go to state 76
    SWITCH              shift, and go to state 77
    WHILE               shift, and go to state 78
    ROUND_BRACKET_OPEN  shift, and go to state 79
    CURLY_BRACKET_OPEN  shift, and go to state 51
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    SEMICOLON           shift, and go to state 89
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 94

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    statement                  go to state 250
    labeled_statement          go to state 115
    compound_statement         go to state 116
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 171

    8 postfix_expression: postfix_expression SQUARE_BRACKET_OPEN . expression SQUARE_BRACKET_CLOSE

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 251


State 172

    9 postfix_expression: postfix_expression ROUND_BRACKET_OPEN . ROUND_BRACKET_CLOSE
   10                   | postfix_expression ROUND_BRACKET_OPEN . argument_expression_list ROUND_BRACKET_CLOSE

    SIZEOF               shift, and go to state 76
    ROUND_BRACKET_OPEN   shift, and go to state 79
    ROUND_BRACKET_CLOSE  shift, and go to state 252
    INCREMENT            shift, and go to state 81
    DECREMENT            shift, and go to state 82
    BIT_AND              shift, and go to state 83
    BITWISE_NOT          shift, and go to state 84
    LOGICAL_NOT          shift, and go to state 85
    MULTIPLY             shift, and go to state 86
    PLUS                 shift, and go to state 87
    MINUS                shift, and go to state 88
    INTEGER_CONSTANT     shift, and go to state 90
    FLOATING_CONSTANT    shift, and go to state 91
    CHAR_CONSTANT        shift, and go to state 92
    STRING_LITERAL       shift, and go to state 93
    IDENTIFIER           shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    argument_expression_list   go to state 253
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 254


State 173

   11 postfix_expression: postfix_expression DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 255


State 174

   12 postfix_expression: postfix_expression ARROW . IDENTIFIER

    IDENTIFIER  shift, and go to state 256


State 175

   13 postfix_expression: postfix_expression INCREMENT .

    $default  reduce using rule 13 (postfix_expression)


State 176

   14 postfix_expression: postfix_expression DECREMENT .

    $default  reduce using rule 14 (postfix_expression)


State 177

   67 assignment_operator: ASSIGN_T .

    $default  reduce using rule 67 (assignment_operator)


State 178

   71 assignment_operator: PLUS_ASSIGN .

    $default  reduce using rule 71 (assignment_operator)


State 179

   72 assignment_operator: MINUS_ASSIGN .

    $default  reduce using rule 72 (assignment_operator)


State 180

   68 assignment_operator: MULTIPLY_ASSIGN .

    $default  reduce using rule 68 (assignment_operator)


State 181

   69 assignment_operator: DIVIDE_ASSIGN .

    $default  reduce using rule 69 (assignment_operator)


State 182

   70 assignment_operator: MODULO_ASSIGN .

    $default  reduce using rule 70 (assignment_operator)


State 183

   73 assignment_operator: LEFT_SHIFT_ASSIGN .

    $default  reduce using rule 73 (assignment_operator)


State 184

   74 assignment_operator: RIGHT_SHIFT_ASSIGN .

    $default  reduce using rule 74 (assignment_operator)


State 185

   75 assignment_operator: BIT_AND_ASSIGN .

    $default  reduce using rule 75 (assignment_operator)


State 186

   76 assignment_operator: BIT_XOR_ASSIGN .

    $default  reduce using rule 76 (assignment_operator)


State 187

   77 assignment_operator: BIT_OR_ASSIGN .

    $default  reduce using rule 77 (assignment_operator)


State 188

   66 assignment_expression: unary_expression assignment_operator . assignment_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 257


State 189

   22 unary_expression: unary_operator cast_expression .

    $default  reduce using rule 22 (unary_expression)


State 190

   34 multiplicative_expression: multiplicative_expression MULTIPLY . cast_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression  go to state 95
    postfix_expression  go to state 96
    unary_expression    go to state 147
    unary_operator      go to state 98
    cast_expression     go to state 258


State 191

   35 multiplicative_expression: multiplicative_expression DIVIDE . cast_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression  go to state 95
    postfix_expression  go to state 96
    unary_expression    go to state 147
    unary_operator      go to state 98
    cast_expression     go to state 259


State 192

   36 multiplicative_expression: multiplicative_expression MODULO . cast_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression  go to state 95
    postfix_expression  go to state 96
    unary_expression    go to state 147
    unary_operator      go to state 98
    cast_expression     go to state 260


State 193

   38 additive_expression: additive_expression PLUS . multiplicative_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 147
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 261


State 194

   39 additive_expression: additive_expression MINUS . multiplicative_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 147
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 262


State 195

   41 shift_expression: shift_expression LEFT_SHIFT . additive_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 147
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 263


State 196

   42 shift_expression: shift_expression RIGHT_SHIFT . additive_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 147
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 264


State 197

   44 relational_expression: relational_expression LESS_THAN . shift_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 147
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 265


State 198

   45 relational_expression: relational_expression GREATER_THAN . shift_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 147
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 266


State 199

   46 relational_expression: relational_expression LESS_THAN_EQUAL . shift_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 147
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 267


State 200

   47 relational_expression: relational_expression GREATER_THAN_EQUAL . shift_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 147
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 268


State 201

   49 equality_expression: equality_expression EQUAL . relational_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 147
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 269


State 202

   50 equality_expression: equality_expression NOT_EQUAL . relational_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 147
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 270


State 203

   52 AND_expression: AND_expression BIT_AND . equality_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 147
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 271


State 204

   54 exclusive_OR_expression: exclusive_OR_expression BIT_XOR . AND_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 147
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 272


State 205

   56 inclusive_OR_expression: inclusive_OR_expression BIT_OR . exclusive_OR_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 147
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 273


State 206

   58 logical_AND_expression: logical_AND_expression LOGICAL_AND . M inclusive_OR_expression

    $default  reduce using rule 63 (M)

    M  go to state 274


State 207

   60 logical_OR_expression: logical_OR_expression LOGICAL_OR . M logical_AND_expression

    $default  reduce using rule 63 (M)

    M  go to state 275


State 208

   62 conditional_expression: logical_OR_expression N . QUESTION_MARK M expression N COLON M conditional_expression

    QUESTION_MARK  shift, and go to state 276


State 209

   79 expression: expression COMMA . assignment_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 277


State 210

  182 expression_statement: expression SEMICOLON .

    $default  reduce using rule 182 (expression_statement)


State 211

  177 compound_statement: CURLY_BRACKET_OPEN block_item_list CURLY_BRACKET_CLOSE .

    $default  reduce using rule 177 (compound_statement)


State 212

  179 block_item_list: block_item_list M . block_item

    AUTO                shift, and go to state 1
    BREAK               shift, and go to state 67
    CASE                shift, and go to state 68
    CHAR_T              shift, and go to state 2
    CONST               shift, and go to state 3
    CONTINUE            shift, and go to state 69
    DEFAULT             shift, and go to state 70
    DO                  shift, and go to state 71
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FLOAT_T             shift, and go to state 7
    FOR                 shift, and go to state 72
    GOTO_T              shift, and go to state 73
    IF                  shift, and go to state 74
    INLINE              shift, and go to state 8
    INT_T               shift, and go to state 9
    LONG                shift, and go to state 10
    REGISTER            shift, and go to state 11
    RESTRICT            shift, and go to state 12
    RETURN_T            shift, and go to state 75
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 76
    STATIC              shift, and go to state 15
    SWITCH              shift, and go to state 77
    UNSIGNED            shift, and go to state 16
    VOID_T              shift, and go to state 17
    VOLATILE            shift, and go to state 18
    WHILE               shift, and go to state 78
    BOOL_T              shift, and go to state 19
    COMPLEX             shift, and go to state 20
    IMAGINARY           shift, and go to state 21
    ROUND_BRACKET_OPEN  shift, and go to state 79
    CURLY_BRACKET_OPEN  shift, and go to state 51
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    SEMICOLON           shift, and go to state 89
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 94

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    declaration                go to state 113
    declaration_specifiers     go to state 62
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 114
    labeled_statement          go to state 115
    compound_statement         go to state 116
    block_item                 go to state 278
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 213

  122 enumerator: IDENTIFIER ASSIGN_T . constant_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 147
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 148
    constant_expression        go to state 279


State 214

  114 enum_specifier: ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list CURLY_BRACKET_CLOSE .

    $default  reduce using rule 114 (enum_specifier)


State 215

  115 enum_specifier: ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list COMMA . CURLY_BRACKET_CLOSE
  120 enumerator_list: enumerator_list COMMA . enumerator

    CURLY_BRACKET_CLOSE  shift, and go to state 280
    IDENTIFIER           shift, and go to state 123

    enumerator  go to state 281


State 216

  165 designator: SQUARE_BRACKET_OPEN . constant_expression SQUARE_BRACKET_CLOSE

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 147
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 148
    constant_expression        go to state 282


State 217

  166 designator: DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 283


State 218

  156 initializer: CURLY_BRACKET_OPEN initializer_list . CURLY_BRACKET_CLOSE
  157            | CURLY_BRACKET_OPEN initializer_list . COMMA CURLY_BRACKET_CLOSE
  159 initializer_list: initializer_list . COMMA designation_opt initializer

    CURLY_BRACKET_CLOSE  shift, and go to state 284
    COMMA                shift, and go to state 285


State 219

  158 initializer_list: designation_opt . initializer

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    CURLY_BRACKET_OPEN  shift, and go to state 131
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 133
    initializer                go to state 286


State 220

  160 designation_opt: designation .

    $default  reduce using rule 160 (designation_opt)


State 221

  162 designation: designator_list . ASSIGN_T
  164 designator_list: designator_list . designator

    SQUARE_BRACKET_OPEN  shift, and go to state 216
    DOT                  shift, and go to state 217
    ASSIGN_T             shift, and go to state 287

    designator  go to state 288


State 222

  163 designator_list: designator .

    $default  reduce using rule 163 (designator_list)


State 223

  132 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN STATIC type_qualifier_list_opt . assignment_expression SQUARE_BRACKET_CLOSE

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 289


State 224

  138 type_qualifier_list_opt: type_qualifier_list .
  145 type_qualifier_list: type_qualifier_list . type_qualifier

    CONST     shift, and go to state 3
    RESTRICT  shift, and go to state 12
    VOLATILE  shift, and go to state 18

    $default  reduce using rule 138 (type_qualifier_list_opt)

    type_qualifier  go to state 127


State 225

  131 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list_opt SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 131 (direct_declarator)


State 226

   26 unary_operator: MULTIPLY .
  137 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list_opt MULTIPLY . SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_CLOSE  shift, and go to state 290

    $default  reduce using rule 26 (unary_operator)


State 227

  134 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list_opt assignment_expression . SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_CLOSE  shift, and go to state 291


State 228

  133 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list STATIC . assignment_expression SQUARE_BRACKET_CLOSE

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 292


State 229

  150 parameter_declaration: declaration_specifiers declarator .

    $default  reduce using rule 150 (parameter_declaration)


State 230

  135 direct_declarator: direct_declarator ROUND_BRACKET_OPEN parameter_type_list ROUND_BRACKET_CLOSE .

    $default  reduce using rule 135 (direct_declarator)


State 231

  147 parameter_type_list: parameter_list COMMA . ELLIPSIS
  149 parameter_list: parameter_list COMMA . parameter_declaration

    AUTO       shift, and go to state 1
    CHAR_T     shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOAT_T    shift, and go to state 7
    INLINE     shift, and go to state 8
    INT_T      shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOID_T     shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL_T     shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21
    ELLIPSIS   shift, and go to state 293

    declaration_specifiers   go to state 141
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    parameter_declaration    go to state 294


State 232

  136 direct_declarator: direct_declarator ROUND_BRACKET_OPEN identifier_list ROUND_BRACKET_CLOSE .

    $default  reduce using rule 136 (direct_declarator)


State 233

  153 identifier_list: identifier_list COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 295


State 234

  174 labeled_statement: CASE constant_expression COLON . statement

    BREAK               shift, and go to state 67
    CASE                shift, and go to state 68
    CONTINUE            shift, and go to state 69
    DEFAULT             shift, and go to state 70
    DO                  shift, and go to state 71
    FOR                 shift, and go to state 72
    GOTO_T              shift, and go to state 73
    IF                  shift, and go to state 74
    RETURN_T            shift, and go to state 75
    SIZEOF              shift, and go to state 76
    SWITCH              shift, and go to state 77
    WHILE               shift, and go to state 78
    ROUND_BRACKET_OPEN  shift, and go to state 79
    CURLY_BRACKET_OPEN  shift, and go to state 51
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    SEMICOLON           shift, and go to state 89
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 94

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    statement                  go to state 296
    labeled_statement          go to state 115
    compound_statement         go to state 116
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 235

  175 labeled_statement: DEFAULT COLON statement .

    $default  reduce using rule 175 (labeled_statement)


State 236

  188 iteration_statement: DO M statement . M WHILE ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE SEMICOLON

    $default  reduce using rule 63 (M)

    M  go to state 297


State 237

  189 iteration_statement: FOR ROUND_BRACKET_OPEN expression_statement . M expression_statement N M expression N ROUND_BRACKET_CLOSE M statement

    $default  reduce using rule 63 (M)

    M  go to state 298


State 238

  190 jump_statement: GOTO_T IDENTIFIER SEMICOLON .

    $default  reduce using rule 190 (jump_statement)


State 239

   79 expression: expression . COMMA assignment_expression
  184 selection_statement: IF ROUND_BRACKET_OPEN expression . N ROUND_BRACKET_CLOSE M statement N
  185                    | IF ROUND_BRACKET_OPEN expression . N ROUND_BRACKET_CLOSE M statement N ELSE M statement N

    COMMA  shift, and go to state 209

    $default  reduce using rule 64 (N)

    N  go to state 299


State 240

  194 jump_statement: RETURN_T expression SEMICOLON .

    $default  reduce using rule 194 (jump_statement)


State 241

   15 postfix_expression: ROUND_BRACKET_OPEN type_name . ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   16                   | ROUND_BRACKET_OPEN type_name . ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE
   24 unary_expression: SIZEOF ROUND_BRACKET_OPEN type_name . ROUND_BRACKET_CLOSE

    ROUND_BRACKET_CLOSE  shift, and go to state 300


State 242

   79 expression: expression . COMMA assignment_expression
  186 selection_statement: SWITCH ROUND_BRACKET_OPEN expression . ROUND_BRACKET_CLOSE statement

    ROUND_BRACKET_CLOSE  shift, and go to state 301
    COMMA                shift, and go to state 209


State 243

  187 iteration_statement: WHILE M ROUND_BRACKET_OPEN . expression N ROUND_BRACKET_CLOSE M statement

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 302


State 244

    6 primary_expression: ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE .

    $default  reduce using rule 6 (primary_expression)


State 245

  112 specifier_qualifier_list_opt: specifier_qualifier_list .

    $default  reduce using rule 112 (specifier_qualifier_list_opt)


State 246

  110 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt .

    $default  reduce using rule 110 (specifier_qualifier_list)


State 247

  111 specifier_qualifier_list: type_qualifier specifier_qualifier_list_opt .

    $default  reduce using rule 111 (specifier_qualifier_list)


State 248

   15 postfix_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE . CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   16                   | ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE . CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE
   32 cast_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE . cast_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    CURLY_BRACKET_OPEN  shift, and go to state 303
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression  go to state 95
    postfix_expression  go to state 96
    unary_expression    go to state 147
    unary_operator      go to state 98
    cast_expression     go to state 304


State 249

   15 postfix_expression: ROUND_BRACKET_OPEN type_name . ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   16                   | ROUND_BRACKET_OPEN type_name . ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE

    ROUND_BRACKET_CLOSE  shift, and go to state 305


State 250

  173 labeled_statement: IDENTIFIER COLON statement .

    $default  reduce using rule 173 (labeled_statement)


State 251

    8 postfix_expression: postfix_expression SQUARE_BRACKET_OPEN expression . SQUARE_BRACKET_CLOSE
   79 expression: expression . COMMA assignment_expression

    SQUARE_BRACKET_CLOSE  shift, and go to state 306
    COMMA                 shift, and go to state 209


State 252

    9 postfix_expression: postfix_expression ROUND_BRACKET_OPEN ROUND_BRACKET_CLOSE .

    $default  reduce using rule 9 (postfix_expression)


State 253

   10 postfix_expression: postfix_expression ROUND_BRACKET_OPEN argument_expression_list . ROUND_BRACKET_CLOSE
   18 argument_expression_list: argument_expression_list . COMMA assignment_expression

    ROUND_BRACKET_CLOSE  shift, and go to state 307
    COMMA                shift, and go to state 308


State 254

   17 argument_expression_list: assignment_expression .

    $default  reduce using rule 17 (argument_expression_list)


State 255

   11 postfix_expression: postfix_expression DOT IDENTIFIER .

    $default  reduce using rule 11 (postfix_expression)


State 256

   12 postfix_expression: postfix_expression ARROW IDENTIFIER .

    $default  reduce using rule 12 (postfix_expression)


State 257

   66 assignment_expression: unary_expression assignment_operator assignment_expression .

    $default  reduce using rule 66 (assignment_expression)


State 258

   34 multiplicative_expression: multiplicative_expression MULTIPLY cast_expression .

    $default  reduce using rule 34 (multiplicative_expression)


State 259

   35 multiplicative_expression: multiplicative_expression DIVIDE cast_expression .

    $default  reduce using rule 35 (multiplicative_expression)


State 260

   36 multiplicative_expression: multiplicative_expression MODULO cast_expression .

    $default  reduce using rule 36 (multiplicative_expression)


State 261

   34 multiplicative_expression: multiplicative_expression . MULTIPLY cast_expression
   35                          | multiplicative_expression . DIVIDE cast_expression
   36                          | multiplicative_expression . MODULO cast_expression
   38 additive_expression: additive_expression PLUS multiplicative_expression .

    MULTIPLY  shift, and go to state 190
    DIVIDE    shift, and go to state 191
    MODULO    shift, and go to state 192

    $default  reduce using rule 38 (additive_expression)


State 262

   34 multiplicative_expression: multiplicative_expression . MULTIPLY cast_expression
   35                          | multiplicative_expression . DIVIDE cast_expression
   36                          | multiplicative_expression . MODULO cast_expression
   39 additive_expression: additive_expression MINUS multiplicative_expression .

    MULTIPLY  shift, and go to state 190
    DIVIDE    shift, and go to state 191
    MODULO    shift, and go to state 192

    $default  reduce using rule 39 (additive_expression)


State 263

   38 additive_expression: additive_expression . PLUS multiplicative_expression
   39                    | additive_expression . MINUS multiplicative_expression
   41 shift_expression: shift_expression LEFT_SHIFT additive_expression .

    PLUS   shift, and go to state 193
    MINUS  shift, and go to state 194

    $default  reduce using rule 41 (shift_expression)


State 264

   38 additive_expression: additive_expression . PLUS multiplicative_expression
   39                    | additive_expression . MINUS multiplicative_expression
   42 shift_expression: shift_expression RIGHT_SHIFT additive_expression .

    PLUS   shift, and go to state 193
    MINUS  shift, and go to state 194

    $default  reduce using rule 42 (shift_expression)


State 265

   41 shift_expression: shift_expression . LEFT_SHIFT additive_expression
   42                 | shift_expression . RIGHT_SHIFT additive_expression
   44 relational_expression: relational_expression LESS_THAN shift_expression .

    LEFT_SHIFT   shift, and go to state 195
    RIGHT_SHIFT  shift, and go to state 196

    $default  reduce using rule 44 (relational_expression)


State 266

   41 shift_expression: shift_expression . LEFT_SHIFT additive_expression
   42                 | shift_expression . RIGHT_SHIFT additive_expression
   45 relational_expression: relational_expression GREATER_THAN shift_expression .

    LEFT_SHIFT   shift, and go to state 195
    RIGHT_SHIFT  shift, and go to state 196

    $default  reduce using rule 45 (relational_expression)


State 267

   41 shift_expression: shift_expression . LEFT_SHIFT additive_expression
   42                 | shift_expression . RIGHT_SHIFT additive_expression
   46 relational_expression: relational_expression LESS_THAN_EQUAL shift_expression .

    LEFT_SHIFT   shift, and go to state 195
    RIGHT_SHIFT  shift, and go to state 196

    $default  reduce using rule 46 (relational_expression)


State 268

   41 shift_expression: shift_expression . LEFT_SHIFT additive_expression
   42                 | shift_expression . RIGHT_SHIFT additive_expression
   47 relational_expression: relational_expression GREATER_THAN_EQUAL shift_expression .

    LEFT_SHIFT   shift, and go to state 195
    RIGHT_SHIFT  shift, and go to state 196

    $default  reduce using rule 47 (relational_expression)


State 269

   44 relational_expression: relational_expression . LESS_THAN shift_expression
   45                      | relational_expression . GREATER_THAN shift_expression
   46                      | relational_expression . LESS_THAN_EQUAL shift_expression
   47                      | relational_expression . GREATER_THAN_EQUAL shift_expression
   49 equality_expression: equality_expression EQUAL relational_expression .

    LESS_THAN           shift, and go to state 197
    GREATER_THAN        shift, and go to state 198
    LESS_THAN_EQUAL     shift, and go to state 199
    GREATER_THAN_EQUAL  shift, and go to state 200

    $default  reduce using rule 49 (equality_expression)


State 270

   44 relational_expression: relational_expression . LESS_THAN shift_expression
   45                      | relational_expression . GREATER_THAN shift_expression
   46                      | relational_expression . LESS_THAN_EQUAL shift_expression
   47                      | relational_expression . GREATER_THAN_EQUAL shift_expression
   50 equality_expression: equality_expression NOT_EQUAL relational_expression .

    LESS_THAN           shift, and go to state 197
    GREATER_THAN        shift, and go to state 198
    LESS_THAN_EQUAL     shift, and go to state 199
    GREATER_THAN_EQUAL  shift, and go to state 200

    $default  reduce using rule 50 (equality_expression)


State 271

   49 equality_expression: equality_expression . EQUAL relational_expression
   50                    | equality_expression . NOT_EQUAL relational_expression
   52 AND_expression: AND_expression BIT_AND equality_expression .

    EQUAL      shift, and go to state 201
    NOT_EQUAL  shift, and go to state 202

    $default  reduce using rule 52 (AND_expression)


State 272

   52 AND_expression: AND_expression . BIT_AND equality_expression
   54 exclusive_OR_expression: exclusive_OR_expression BIT_XOR AND_expression .

    BIT_AND  shift, and go to state 203

    $default  reduce using rule 54 (exclusive_OR_expression)


State 273

   54 exclusive_OR_expression: exclusive_OR_expression . BIT_XOR AND_expression
   56 inclusive_OR_expression: inclusive_OR_expression BIT_OR exclusive_OR_expression .

    BIT_XOR  shift, and go to state 204

    $default  reduce using rule 56 (inclusive_OR_expression)


State 274

   58 logical_AND_expression: logical_AND_expression LOGICAL_AND M . inclusive_OR_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 147
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 309


State 275

   60 logical_OR_expression: logical_OR_expression LOGICAL_OR M . logical_AND_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 147
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 310


State 276

   62 conditional_expression: logical_OR_expression N QUESTION_MARK . M expression N COLON M conditional_expression

    $default  reduce using rule 63 (M)

    M  go to state 311


State 277

   79 expression: expression COMMA assignment_expression .

    $default  reduce using rule 79 (expression)


State 278

  179 block_item_list: block_item_list M block_item .

    $default  reduce using rule 179 (block_item_list)


State 279

  122 enumerator: IDENTIFIER ASSIGN_T constant_expression .

    $default  reduce using rule 122 (enumerator)


State 280

  115 enum_specifier: ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list COMMA CURLY_BRACKET_CLOSE .

    $default  reduce using rule 115 (enum_specifier)


State 281

  120 enumerator_list: enumerator_list COMMA enumerator .

    $default  reduce using rule 120 (enumerator_list)


State 282

  165 designator: SQUARE_BRACKET_OPEN constant_expression . SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_CLOSE  shift, and go to state 312


State 283

  166 designator: DOT IDENTIFIER .

    $default  reduce using rule 166 (designator)


State 284

  156 initializer: CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE .

    $default  reduce using rule 156 (initializer)


State 285

  157 initializer: CURLY_BRACKET_OPEN initializer_list COMMA . CURLY_BRACKET_CLOSE
  159 initializer_list: initializer_list COMMA . designation_opt initializer

    SQUARE_BRACKET_OPEN  shift, and go to state 216
    CURLY_BRACKET_CLOSE  shift, and go to state 313
    DOT                  shift, and go to state 217

    $default  reduce using rule 161 (designation_opt)

    designation_opt  go to state 314
    designation      go to state 220
    designator_list  go to state 221
    designator       go to state 222


State 286

  158 initializer_list: designation_opt initializer .

    $default  reduce using rule 158 (initializer_list)


State 287

  162 designation: designator_list ASSIGN_T .

    $default  reduce using rule 162 (designation)


State 288

  164 designator_list: designator_list designator .

    $default  reduce using rule 164 (designator_list)


State 289

  132 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN STATIC type_qualifier_list_opt assignment_expression . SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_CLOSE  shift, and go to state 315


State 290

  137 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list_opt MULTIPLY SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 137 (direct_declarator)


State 291

  134 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list_opt assignment_expression SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 134 (direct_declarator)


State 292

  133 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list STATIC assignment_expression . SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_CLOSE  shift, and go to state 316


State 293

  147 parameter_type_list: parameter_list COMMA ELLIPSIS .

    $default  reduce using rule 147 (parameter_type_list)


State 294

  149 parameter_list: parameter_list COMMA parameter_declaration .

    $default  reduce using rule 149 (parameter_list)


State 295

  153 identifier_list: identifier_list COMMA IDENTIFIER .

    $default  reduce using rule 153 (identifier_list)


State 296

  174 labeled_statement: CASE constant_expression COLON statement .

    $default  reduce using rule 174 (labeled_statement)


State 297

  188 iteration_statement: DO M statement M . WHILE ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE SEMICOLON

    WHILE  shift, and go to state 317


State 298

  189 iteration_statement: FOR ROUND_BRACKET_OPEN expression_statement M . expression_statement N M expression N ROUND_BRACKET_CLOSE M statement

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    SEMICOLON           shift, and go to state 89
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    expression_statement       go to state 318


State 299

  184 selection_statement: IF ROUND_BRACKET_OPEN expression N . ROUND_BRACKET_CLOSE M statement N
  185                    | IF ROUND_BRACKET_OPEN expression N . ROUND_BRACKET_CLOSE M statement N ELSE M statement N

    ROUND_BRACKET_CLOSE  shift, and go to state 319


State 300

   15 postfix_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE . CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   16                   | ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE . CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE
   24 unary_expression: SIZEOF ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE .

    CURLY_BRACKET_OPEN  shift, and go to state 303

    $default  reduce using rule 24 (unary_expression)


State 301

  186 selection_statement: SWITCH ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE . statement

    BREAK               shift, and go to state 67
    CASE                shift, and go to state 68
    CONTINUE            shift, and go to state 69
    DEFAULT             shift, and go to state 70
    DO                  shift, and go to state 71
    FOR                 shift, and go to state 72
    GOTO_T              shift, and go to state 73
    IF                  shift, and go to state 74
    RETURN_T            shift, and go to state 75
    SIZEOF              shift, and go to state 76
    SWITCH              shift, and go to state 77
    WHILE               shift, and go to state 78
    ROUND_BRACKET_OPEN  shift, and go to state 79
    CURLY_BRACKET_OPEN  shift, and go to state 51
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    SEMICOLON           shift, and go to state 89
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 94

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    statement                  go to state 320
    labeled_statement          go to state 115
    compound_statement         go to state 116
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 302

   79 expression: expression . COMMA assignment_expression
  187 iteration_statement: WHILE M ROUND_BRACKET_OPEN expression . N ROUND_BRACKET_CLOSE M statement

    COMMA  shift, and go to state 209

    $default  reduce using rule 64 (N)

    N  go to state 321


State 303

   15 postfix_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN . initializer_list CURLY_BRACKET_CLOSE
   16                   | ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN . initializer_list COMMA CURLY_BRACKET_CLOSE

    SQUARE_BRACKET_OPEN  shift, and go to state 216
    DOT                  shift, and go to state 217

    $default  reduce using rule 161 (designation_opt)

    initializer_list  go to state 322
    designation_opt   go to state 219
    designation       go to state 220
    designator_list   go to state 221
    designator        go to state 222


State 304

   32 cast_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE cast_expression .

    $default  reduce using rule 32 (cast_expression)


State 305

   15 postfix_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE . CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   16                   | ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE . CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE

    CURLY_BRACKET_OPEN  shift, and go to state 303


State 306

    8 postfix_expression: postfix_expression SQUARE_BRACKET_OPEN expression SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 8 (postfix_expression)


State 307

   10 postfix_expression: postfix_expression ROUND_BRACKET_OPEN argument_expression_list ROUND_BRACKET_CLOSE .

    $default  reduce using rule 10 (postfix_expression)


State 308

   18 argument_expression_list: argument_expression_list COMMA . assignment_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 323


State 309

   56 inclusive_OR_expression: inclusive_OR_expression . BIT_OR exclusive_OR_expression
   58 logical_AND_expression: logical_AND_expression LOGICAL_AND M inclusive_OR_expression .

    BIT_OR  shift, and go to state 205

    $default  reduce using rule 58 (logical_AND_expression)


State 310

   58 logical_AND_expression: logical_AND_expression . LOGICAL_AND M inclusive_OR_expression
   60 logical_OR_expression: logical_OR_expression LOGICAL_OR M logical_AND_expression .

    LOGICAL_AND  shift, and go to state 206

    $default  reduce using rule 60 (logical_OR_expression)


State 311

   62 conditional_expression: logical_OR_expression N QUESTION_MARK M . expression N COLON M conditional_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 324


State 312

  165 designator: SQUARE_BRACKET_OPEN constant_expression SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 165 (designator)


State 313

  157 initializer: CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE .

    $default  reduce using rule 157 (initializer)


State 314

  159 initializer_list: initializer_list COMMA designation_opt . initializer

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    CURLY_BRACKET_OPEN  shift, and go to state 131
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 133
    initializer                go to state 325


State 315

  132 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN STATIC type_qualifier_list_opt assignment_expression SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 132 (direct_declarator)


State 316

  133 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list STATIC assignment_expression SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 133 (direct_declarator)


State 317

  188 iteration_statement: DO M statement M WHILE . ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE SEMICOLON

    ROUND_BRACKET_OPEN  shift, and go to state 326


State 318

  189 iteration_statement: FOR ROUND_BRACKET_OPEN expression_statement M expression_statement . N M expression N ROUND_BRACKET_CLOSE M statement

    $default  reduce using rule 64 (N)

    N  go to state 327


State 319

  184 selection_statement: IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE . M statement N
  185                    | IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE . M statement N ELSE M statement N

    $default  reduce using rule 63 (M)

    M  go to state 328


State 320

  186 selection_statement: SWITCH ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE statement .

    $default  reduce using rule 186 (selection_statement)


State 321

  187 iteration_statement: WHILE M ROUND_BRACKET_OPEN expression N . ROUND_BRACKET_CLOSE M statement

    ROUND_BRACKET_CLOSE  shift, and go to state 329


State 322

   15 postfix_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list . CURLY_BRACKET_CLOSE
   16                   | ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list . COMMA CURLY_BRACKET_CLOSE
  159 initializer_list: initializer_list . COMMA designation_opt initializer

    CURLY_BRACKET_CLOSE  shift, and go to state 330
    COMMA                shift, and go to state 331


State 323

   18 argument_expression_list: argument_expression_list COMMA assignment_expression .

    $default  reduce using rule 18 (argument_expression_list)


State 324

   62 conditional_expression: logical_OR_expression N QUESTION_MARK M expression . N COLON M conditional_expression
   79 expression: expression . COMMA assignment_expression

    COMMA  shift, and go to state 209

    $default  reduce using rule 64 (N)

    N  go to state 332


State 325

  159 initializer_list: initializer_list COMMA designation_opt initializer .

    $default  reduce using rule 159 (initializer_list)


State 326

  188 iteration_statement: DO M statement M WHILE ROUND_BRACKET_OPEN . expression N ROUND_BRACKET_CLOSE SEMICOLON

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 333


State 327

  189 iteration_statement: FOR ROUND_BRACKET_OPEN expression_statement M expression_statement N . M expression N ROUND_BRACKET_CLOSE M statement

    $default  reduce using rule 63 (M)

    M  go to state 334


State 328

  184 selection_statement: IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M . statement N
  185                    | IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M . statement N ELSE M statement N

    BREAK               shift, and go to state 67
    CASE                shift, and go to state 68
    CONTINUE            shift, and go to state 69
    DEFAULT             shift, and go to state 70
    DO                  shift, and go to state 71
    FOR                 shift, and go to state 72
    GOTO_T              shift, and go to state 73
    IF                  shift, and go to state 74
    RETURN_T            shift, and go to state 75
    SIZEOF              shift, and go to state 76
    SWITCH              shift, and go to state 77
    WHILE               shift, and go to state 78
    ROUND_BRACKET_OPEN  shift, and go to state 79
    CURLY_BRACKET_OPEN  shift, and go to state 51
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    SEMICOLON           shift, and go to state 89
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 94

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    statement                  go to state 335
    labeled_statement          go to state 115
    compound_statement         go to state 116
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 329

  187 iteration_statement: WHILE M ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE . M statement

    $default  reduce using rule 63 (M)

    M  go to state 336


State 330

   15 postfix_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE .

    $default  reduce using rule 15 (postfix_expression)


State 331

   16 postfix_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA . CURLY_BRACKET_CLOSE
  159 initializer_list: initializer_list COMMA . designation_opt initializer

    SQUARE_BRACKET_OPEN  shift, and go to state 216
    CURLY_BRACKET_CLOSE  shift, and go to state 337
    DOT                  shift, and go to state 217

    $default  reduce using rule 161 (designation_opt)

    designation_opt  go to state 314
    designation      go to state 220
    designator_list  go to state 221
    designator       go to state 222


State 332

   62 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N . COLON M conditional_expression

    COLON  shift, and go to state 338


State 333

   79 expression: expression . COMMA assignment_expression
  188 iteration_statement: DO M statement M WHILE ROUND_BRACKET_OPEN expression . N ROUND_BRACKET_CLOSE SEMICOLON

    COMMA  shift, and go to state 209

    $default  reduce using rule 64 (N)

    N  go to state 339


State 334

  189 iteration_statement: FOR ROUND_BRACKET_OPEN expression_statement M expression_statement N M . expression N ROUND_BRACKET_CLOSE M statement

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 340


State 335

  184 selection_statement: IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement . N
  185                    | IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement . N ELSE M statement N

    $default  reduce using rule 64 (N)

    N  go to state 341


State 336

  187 iteration_statement: WHILE M ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M . statement

    BREAK               shift, and go to state 67
    CASE                shift, and go to state 68
    CONTINUE            shift, and go to state 69
    DEFAULT             shift, and go to state 70
    DO                  shift, and go to state 71
    FOR                 shift, and go to state 72
    GOTO_T              shift, and go to state 73
    IF                  shift, and go to state 74
    RETURN_T            shift, and go to state 75
    SIZEOF              shift, and go to state 76
    SWITCH              shift, and go to state 77
    WHILE               shift, and go to state 78
    ROUND_BRACKET_OPEN  shift, and go to state 79
    CURLY_BRACKET_OPEN  shift, and go to state 51
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    SEMICOLON           shift, and go to state 89
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 94

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    statement                  go to state 342
    labeled_statement          go to state 115
    compound_statement         go to state 116
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 337

   16 postfix_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE .

    $default  reduce using rule 16 (postfix_expression)


State 338

   62 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON . M conditional_expression

    $default  reduce using rule 63 (M)

    M  go to state 343


State 339

  188 iteration_statement: DO M statement M WHILE ROUND_BRACKET_OPEN expression N . ROUND_BRACKET_CLOSE SEMICOLON

    ROUND_BRACKET_CLOSE  shift, and go to state 344


State 340

   79 expression: expression . COMMA assignment_expression
  189 iteration_statement: FOR ROUND_BRACKET_OPEN expression_statement M expression_statement N M expression . N ROUND_BRACKET_CLOSE M statement

    COMMA  shift, and go to state 209

    $default  reduce using rule 64 (N)

    N  go to state 345


State 341

  184 selection_statement: IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N .
  185                    | IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N . ELSE M statement N

    ELSE  shift, and go to state 346

    ELSE      [reduce using rule 184 (selection_statement)]
    $default  reduce using rule 184 (selection_statement)


State 342

  187 iteration_statement: WHILE M ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement .

    $default  reduce using rule 187 (iteration_statement)


State 343

   62 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON M . conditional_expression

    SIZEOF              shift, and go to state 76
    ROUND_BRACKET_OPEN  shift, and go to state 79
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 132

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 147
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 347


State 344

  188 iteration_statement: DO M statement M WHILE ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE . SEMICOLON

    SEMICOLON  shift, and go to state 348


State 345

  189 iteration_statement: FOR ROUND_BRACKET_OPEN expression_statement M expression_statement N M expression N . ROUND_BRACKET_CLOSE M statement

    ROUND_BRACKET_CLOSE  shift, and go to state 349


State 346

  185 selection_statement: IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N ELSE . M statement N

    $default  reduce using rule 63 (M)

    M  go to state 350


State 347

   62 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression .

    $default  reduce using rule 62 (conditional_expression)


State 348

  188 iteration_statement: DO M statement M WHILE ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE SEMICOLON .

    $default  reduce using rule 188 (iteration_statement)


State 349

  189 iteration_statement: FOR ROUND_BRACKET_OPEN expression_statement M expression_statement N M expression N ROUND_BRACKET_CLOSE . M statement

    $default  reduce using rule 63 (M)

    M  go to state 351


State 350

  185 selection_statement: IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N ELSE M . statement N

    BREAK               shift, and go to state 67
    CASE                shift, and go to state 68
    CONTINUE            shift, and go to state 69
    DEFAULT             shift, and go to state 70
    DO                  shift, and go to state 71
    FOR                 shift, and go to state 72
    GOTO_T              shift, and go to state 73
    IF                  shift, and go to state 74
    RETURN_T            shift, and go to state 75
    SIZEOF              shift, and go to state 76
    SWITCH              shift, and go to state 77
    WHILE               shift, and go to state 78
    ROUND_BRACKET_OPEN  shift, and go to state 79
    CURLY_BRACKET_OPEN  shift, and go to state 51
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    SEMICOLON           shift, and go to state 89
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 94

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    statement                  go to state 352
    labeled_statement          go to state 115
    compound_statement         go to state 116
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 351

  189 iteration_statement: FOR ROUND_BRACKET_OPEN expression_statement M expression_statement N M expression N ROUND_BRACKET_CLOSE M . statement

    BREAK               shift, and go to state 67
    CASE                shift, and go to state 68
    CONTINUE            shift, and go to state 69
    DEFAULT             shift, and go to state 70
    DO                  shift, and go to state 71
    FOR                 shift, and go to state 72
    GOTO_T              shift, and go to state 73
    IF                  shift, and go to state 74
    RETURN_T            shift, and go to state 75
    SIZEOF              shift, and go to state 76
    SWITCH              shift, and go to state 77
    WHILE               shift, and go to state 78
    ROUND_BRACKET_OPEN  shift, and go to state 79
    CURLY_BRACKET_OPEN  shift, and go to state 51
    INCREMENT           shift, and go to state 81
    DECREMENT           shift, and go to state 82
    BIT_AND             shift, and go to state 83
    BITWISE_NOT         shift, and go to state 84
    LOGICAL_NOT         shift, and go to state 85
    MULTIPLY            shift, and go to state 86
    PLUS                shift, and go to state 87
    MINUS               shift, and go to state 88
    SEMICOLON           shift, and go to state 89
    INTEGER_CONSTANT    shift, and go to state 90
    FLOATING_CONSTANT   shift, and go to state 91
    CHAR_CONSTANT       shift, and go to state 92
    STRING_LITERAL      shift, and go to state 93
    IDENTIFIER          shift, and go to state 94

    primary_expression         go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    statement                  go to state 353
    labeled_statement          go to state 115
    compound_statement         go to state 116
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 352

  185 selection_statement: IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N ELSE M statement . N

    $default  reduce using rule 64 (N)

    N  go to state 354


State 353

  189 iteration_statement: FOR ROUND_BRACKET_OPEN expression_statement M expression_statement N M expression N ROUND_BRACKET_CLOSE M statement .

    $default  reduce using rule 189 (iteration_statement)


State 354

  185 selection_statement: IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N ELSE M statement N .

    $default  reduce using rule 185 (selection_statement)
