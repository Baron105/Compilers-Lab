Terminals unused in grammar

    STRUCT
    TYPEDEF
    UNION
    HASH
    WS


Rules useless in parser due to conflicts

   19 argument_expression_list_opt: %empty


State 140 conflicts: 1 shift/reduce
State 293 conflicts: 1 shift/reduce
State 372 conflicts: 1 shift/reduce
State 399 conflicts: 49 shift/reduce, 1 reduce/reduce
State 401 conflicts: 49 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: translation_unit $end

    1 primary_expression: IDENTIFIER
    2                   | constant
    3                   | STRING_LITERAL
    4                   | ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE

    5 constant: INTEGER_CONSTANT
    6         | FLOATING_CONSTANT
    7         | CHAR_CONSTANT

    8 postfix_expression: primary_expression
    9                   | postfix_expression SQUARE_BRACKET_OPEN expression SQUARE_BRACKET_CLOSE
   10                   | postfix_expression ROUND_BRACKET_OPEN ROUND_BRACKET_CLOSE
   11                   | postfix_expression ROUND_BRACKET_OPEN argument_expression_list_opt ROUND_BRACKET_CLOSE
   12                   | postfix_expression DOT IDENTIFIER
   13                   | postfix_expression ARROW IDENTIFIER
   14                   | postfix_expression INCREMENT
   15                   | postfix_expression DECREMENT
   16                   | ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE

   18 argument_expression_list_opt: argument_expression_list
   19                             | %empty

   20 argument_expression_list: assignment_expression
   21                         | argument_expression_list COMMA assignment_expression

   22 unary_expression: postfix_expression
   23                 | INCREMENT unary_expression
   24                 | DECREMENT unary_expression
   25                 | unary_operator cast_expression
   26                 | SIZEOF unary_expression
   27                 | SIZEOF ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE

   28 unary_operator: BITWISE_AND
   29               | MULTIPLY
   30               | PLUS
   31               | MINUS
   32               | BITWISE_NOT
   33               | LOGICAL_NOT

   34 cast_expression: unary_expression
   35                | ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE cast_expression

   36 multiplicative_expression: cast_expression
   37                          | multiplicative_expression MULTIPLY cast_expression
   38                          | multiplicative_expression DIVIDE cast_expression
   39                          | multiplicative_expression MODULO cast_expression

   40 additive_expression: multiplicative_expression
   41                    | additive_expression PLUS multiplicative_expression
   42                    | additive_expression MINUS multiplicative_expression

   43 shift_expression: additive_expression
   44                 | shift_expression LEFT_SHIFT additive_expression
   45                 | shift_expression RIGHT_SHIFT additive_expression

   46 relational_expression: shift_expression
   47                      | relational_expression LESS_THAN shift_expression
   48                      | relational_expression GREATER_THAN shift_expression
   49                      | relational_expression LESS_THAN_EQUAL shift_expression
   50                      | relational_expression GREATER_THAN_EQUAL shift_expression

   51 equality_expression: relational_expression
   52                    | equality_expression EQUAL relational_expression
   53                    | equality_expression NOT_EQUAL relational_expression

   54 AND_expression: equality_expression
   55               | AND_expression BITWISE_AND equality_expression

   56 exclusive_OR_expression: AND_expression
   57                        | exclusive_OR_expression BITWISE_XOR AND_expression

   58 inclusive_OR_expression: exclusive_OR_expression
   59                        | inclusive_OR_expression BITWISE_OR exclusive_OR_expression

   60 logical_AND_expression: inclusive_OR_expression
   61                       | logical_AND_expression LOGICAL_AND M inclusive_OR_expression

   62 logical_OR_expression: logical_AND_expression
   63                      | logical_OR_expression LOGICAL_OR M logical_AND_expression

   64 conditional_expression: logical_OR_expression
   65                       | logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression

   66 M: %empty

   67 N: %empty

   68 assignment_expression: conditional_expression
   69                      | unary_expression assignment_operator assignment_expression

   70 assignment_operator: ASSIGN
   71                    | MULTIPLY_ASSIGN
   72                    | DIVIDE_ASSIGN
   73                    | MODULO_ASSIGN
   74                    | PLUS_ASSIGN
   75                    | MINUS_ASSIGN
   76                    | LEFT_SHIFT_ASSIGN
   77                    | RIGHT_SHIFT_ASSIGN
   78                    | BITWISE_AND_ASSIGN
   79                    | BITWISE_XOR_ASSIGN
   80                    | BITWISE_OR_ASSIGN

   81 expression: assignment_expression
   82           | expression COMMA assignment_expression

   83 constant_expression: conditional_expression

   84 declaration: declaration_specifiers init_declarator_list_opt SEMICOLON

   85 init_declarator_list_opt: init_declarator_list
   86                         | %empty

   87 declaration_specifiers: storage_class_specifier declaration_specifiers_opt
   88                       | type_specifier declaration_specifiers_opt
   89                       | type_qualifier declaration_specifiers_opt
   90                       | function_specifier declaration_specifiers_opt

   91 declaration_specifiers_opt: declaration_specifiers
   92                           | %empty

   93 init_declarator_list: init_declarator
   94                     | init_declarator_list COMMA init_declarator

   95 init_declarator: declarator
   96                | declarator ASSIGN initializer

   97 storage_class_specifier: EXTERN
   98                        | STATIC
   99                        | AUTO
  100                        | REGISTER

  101 type_specifier: VOID
  102               | CHAR
  103               | SHORT
  104               | INT
  105               | LONG
  106               | FLOAT
  107               | DOUBLE
  108               | SIGNED
  109               | UNSIGNED
  110               | BOOL
  111               | COMPLEX
  112               | IMAGINARY
  113               | enum_specifier

  114 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt
  115                         | type_qualifier specifier_qualifier_list_opt

  116 specifier_qualifier_list_opt: specifier_qualifier_list
  117                             | %empty

  118 enum_specifier: ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list CURLY_BRACKET_CLOSE
  119               | ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list COMMA CURLY_BRACKET_CLOSE
  120               | ENUM IDENTIFIER

  121 identifier_opt: IDENTIFIER
  122               | %empty

  123 enumerator_list: enumerator
  124                | enumerator_list COMMA enumerator

  125 enumerator: IDENTIFIER
  126           | IDENTIFIER ASSIGN constant_expression

  127 type_qualifier: CONST
  128               | RESTRICT
  129               | VOLATILE

  130 function_specifier: INLINE

  131 declarator: pointer direct_declarator
  132           | direct_declarator

  133 direct_declarator: IDENTIFIER
  134                  | ROUND_BRACKET_OPEN declarator ROUND_BRACKET_CLOSE
  135                  | direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list assignment_expression SQUARE_BRACKET_CLOSE
  136                  | direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list SQUARE_BRACKET_CLOSE
  137                  | direct_declarator SQUARE_BRACKET_OPEN assignment_expression SQUARE_BRACKET_CLOSE
  138                  | direct_declarator SQUARE_BRACKET_OPEN SQUARE_BRACKET_CLOSE
  139                  | direct_declarator ROUND_BRACKET_OPEN change_table parameter_type_list ROUND_BRACKET_CLOSE
  140                  | direct_declarator ROUND_BRACKET_OPEN change_table ROUND_BRACKET_CLOSE
  141                  | direct_declarator ROUND_BRACKET_OPEN identifier_list ROUND_BRACKET_CLOSE
  142                  | direct_declarator SQUARE_BRACKET_OPEN STATIC type_qualifier_list assignment_expression SQUARE_BRACKET_CLOSE
  143                  | direct_declarator SQUARE_BRACKET_OPEN STATIC assignment_expression SQUARE_BRACKET_CLOSE
  144                  | direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list STATIC assignment_expression SQUARE_BRACKET_CLOSE
  145                  | direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list MULTIPLY SQUARE_BRACKET_CLOSE
  146                  | direct_declarator SQUARE_BRACKET_OPEN MULTIPLY SQUARE_BRACKET_CLOSE

  147 type_qualifier_list_opt: type_qualifier_list
  148                        | %empty

  149 pointer: MULTIPLY type_qualifier_list_opt
  150        | MULTIPLY type_qualifier_list_opt pointer

  151 type_qualifier_list: type_qualifier
  152                    | type_qualifier_list type_qualifier

  153 parameter_type_list: parameter_list
  154                    | parameter_list COMMA ELLIPSIS

  155 parameter_list: parameter_declaration
  156               | parameter_list COMMA parameter_declaration

  157 parameter_declaration: declaration_specifiers declarator
  158                      | declaration_specifiers

  159 identifier_list: IDENTIFIER
  160                | identifier_list COMMA IDENTIFIER

  161 type_name: specifier_qualifier_list

  162 initializer: assignment_expression
  163            | CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
  164            | CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE

  165 initializer_list: designation_opt initializer
  166                 | initializer_list COMMA designation_opt initializer

  167 designation_opt: designation
  168                | %empty

  169 designation: designator_list ASSIGN

  170 designator_list: designator
  171                | designator_list designator

  172 designator: SQUARE_BRACKET_OPEN constant_expression SQUARE_BRACKET_CLOSE
  173           | DOT IDENTIFIER

  174 statement: labeled_statement
  175          | compound_statement
  176          | expression_statement
  177          | selection_statement
  178          | iteration_statement
  179          | jump_statement

  180 loop_statement: labeled_statement
  181               | compound_statement
  182               | expression_statement
  183               | selection_statement
  184               | iteration_statement
  185               | jump_statement

  186 labeled_statement: IDENTIFIER COLON statement
  187                  | CASE constant_expression COLON statement
  188                  | DEFAULT COLON statement

  189 compound_statement: CURLY_BRACKET_OPEN X change_table block_item_list_opt CURLY_BRACKET_CLOSE

  190 block_item_list_opt: block_item_list
  191                    | %empty

  192 block_item_list: block_item
  193                | block_item_list M block_item

  194 block_item: declaration
  195           | statement

  196 expression_statement: expression SEMICOLON
  197                     | SEMICOLON

  198 selection_statement: IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N THEN
  199                    | IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N ELSE M statement
  200                    | SWITCH ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE statement

  201 iteration_statement: WHILE W ROUND_BRACKET_OPEN X change_table M expression ROUND_BRACKET_CLOSE M loop_statement
  202                    | WHILE W ROUND_BRACKET_OPEN X change_table M expression ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE
  203                    | DO D M loop_statement M WHILE ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE SEMICOLON
  204                    | DO D CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE M WHILE ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE SEMICOLON
  205                    | FOR F ROUND_BRACKET_OPEN X change_table declaration M expression_statement M expression N ROUND_BRACKET_CLOSE M loop_statement
  206                    | FOR F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE M loop_statement
  207                    | FOR F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE
  208                    | FOR F ROUND_BRACKET_OPEN X change_table declaration M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

  209 F: %empty

  210 W: %empty

  211 D: %empty

  212 X: %empty

  213 change_table: %empty

  214 jump_statement: GOTO IDENTIFIER SEMICOLON
  215               | CONTINUE SEMICOLON
  216               | BREAK SEMICOLON
  217               | RETURN expression SEMICOLON
  218               | RETURN SEMICOLON

  219 translation_unit: external_declaration
  220                 | translation_unit external_declaration

  221 external_declaration: function_definition
  222                     | declaration

  223 function_definition: declaration_specifiers declarator declaration_list_opt change_table CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

  224 declaration_list_opt: declaration_list
  225                     | %empty

  226 declaration_list: declaration
  227                 | declaration_list declaration


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    AUTO (258) 99
    BREAK (259) 216
    CASE (260) 187
    CHAR (261) 102
    CONST (262) 127
    CONTINUE (263) 215
    DEFAULT (264) 188
    DO (265) 203 204
    DOUBLE (266) 107
    ELSE (267) 199
    ENUM (268) 118 119 120
    EXTERN (269) 97
    FLOAT (270) 106
    FOR (271) 205 206 207 208
    GOTO (272) 214
    IF (273) 198 199
    INLINE (274) 130
    INT (275) 104
    LONG (276) 105
    REGISTER (277) 100
    RESTRICT (278) 128
    RETURN (279) 217 218
    SHORT (280) 103
    SIGNED (281) 108
    SIZEOF (282) 26 27
    STATIC (283) 98 142 143 144
    STRUCT (284)
    SWITCH (285) 200
    TYPEDEF (286)
    UNION (287)
    UNSIGNED (288) 109
    VOID (289) 101
    VOLATILE (290) 129
    WHILE (291) 201 202 203 204
    BOOL (292) 110
    COMPLEX (293) 111
    IMAGINARY (294) 112
    SQUARE_BRACKET_OPEN (295) 9 135 136 137 138 142 143 144 145 146 172
    SQUARE_BRACKET_CLOSE (296) 9 135 136 137 138 142 143 144 145 146 172
    ROUND_BRACKET_OPEN (297) 4 10 11 16 17 27 35 134 139 140 141 198 199 200 201 202 203 204 205 206 207 208
    ROUND_BRACKET_CLOSE (298) 4 10 11 16 17 27 35 134 139 140 141 198 199 200 201 202 203 204 205 206 207 208
    CURLY_BRACKET_OPEN (299) 16 17 118 119 163 164 189 202 204 207 208 223
    CURLY_BRACKET_CLOSE (300) 16 17 118 119 163 164 189 202 204 207 208 223
    DOT (301) 12 173
    ARROW (302) 13
    INCREMENT (303) 14 23
    DECREMENT (304) 15 24
    BITWISE_AND (305) 28 55
    BITWISE_OR (306) 59
    BITWISE_XOR (307) 57
    BITWISE_NOT (308) 32
    LOGICAL_AND (309) 61
    LOGICAL_OR (310) 63
    LOGICAL_NOT (311) 33
    MULTIPLY (312) 29 37 145 146 149 150
    DIVIDE (313) 38
    MODULO (314) 39
    PLUS (315) 30 41
    MINUS (316) 31 42
    LEFT_SHIFT (317) 44
    RIGHT_SHIFT (318) 45
    LESS_THAN (319) 47
    GREATER_THAN (320) 48
    LESS_THAN_EQUAL (321) 49
    GREATER_THAN_EQUAL (322) 50
    EQUAL (323) 52
    NOT_EQUAL (324) 53
    ASSIGN (325) 70 96 126 169
    PLUS_ASSIGN (326) 74
    MINUS_ASSIGN (327) 75
    MULTIPLY_ASSIGN (328) 71
    DIVIDE_ASSIGN (329) 72
    MODULO_ASSIGN (330) 73
    LEFT_SHIFT_ASSIGN (331) 76
    RIGHT_SHIFT_ASSIGN (332) 77
    BITWISE_AND_ASSIGN (333) 78
    BITWISE_XOR_ASSIGN (334) 79
    BITWISE_OR_ASSIGN (335) 80
    COMMA (336) 17 21 82 94 119 124 154 156 160 164 166
    COLON (337) 65 186 187 188
    SEMICOLON (338) 84 196 197 203 204 214 215 216 217 218
    ELLIPSIS (339) 154
    QUESTION_MARK (340) 65
    HASH (341)
    INTEGER_CONSTANT <intval> (342) 5
    FLOATING_CONSTANT <strval> (343) 6
    CHAR_CONSTANT <strval> (344) 7
    STRING_LITERAL <strval> (345) 3
    IDENTIFIER <sym> (346) 1 12 13 120 121 125 126 133 159 160 173 186 214
    THEN (347) 198
    WS (348)


Nonterminals, with rules where they appear

    $accept (94)
        on left: 0
    primary_expression <expr> (95)
        on left: 1 2 3 4
        on right: 8
    constant <sym> (96)
        on left: 5 6 7
        on right: 2
    postfix_expression <arr> (97)
        on left: 8 9 10 11 12 13 14 15 16 17
        on right: 9 10 11 12 13 14 15 22
    argument_expression_list_opt <nparam> (98)
        on left: 18 19
        on right: 11
    argument_expression_list <nparam> (99)
        on left: 20 21
        on right: 18 21
    unary_expression <arr> (100)
        on left: 22 23 24 25 26 27
        on right: 23 24 26 34 69
    unary_operator <op> (101)
        on left: 28 29 30 31 32 33
        on right: 25
    cast_expression <arr> (102)
        on left: 34 35
        on right: 25 35 36 37 38 39
    multiplicative_expression <expr> (103)
        on left: 36 37 38 39
        on right: 37 38 39 40 41 42
    additive_expression <expr> (104)
        on left: 40 41 42
        on right: 41 42 43 44 45
    shift_expression <expr> (105)
        on left: 43 44 45
        on right: 44 45 46 47 48 49 50
    relational_expression <expr> (106)
        on left: 46 47 48 49 50
        on right: 47 48 49 50 51 52 53
    equality_expression <expr> (107)
        on left: 51 52 53
        on right: 52 53 54 55
    AND_expression <expr> (108)
        on left: 54 55
        on right: 55 56 57
    exclusive_OR_expression <expr> (109)
        on left: 56 57
        on right: 57 58 59
    inclusive_OR_expression <expr> (110)
        on left: 58 59
        on right: 59 60 61
    logical_AND_expression <expr> (111)
        on left: 60 61
        on right: 61 62 63
    logical_OR_expression <expr> (112)
        on left: 62 63
        on right: 63 64 65
    conditional_expression <expr> (113)
        on left: 64 65
        on right: 65 68 83
    M <bp> (114)
        on left: 66
        on right: 61 63 65 193 198 199 201 202 203 204 205 206 207 208
    N <stmt> (115)
        on left: 67
        on right: 65 198 199 205 206 207 208
    assignment_expression <expr> (116)
        on left: 68 69
        on right: 20 21 69 81 82 135 137 142 143 144 162
    assignment_operator (117)
        on left: 70 71 72 73 74 75 76 77 78 79 80
        on right: 69
    expression <expr> (118)
        on left: 81 82
        on right: 4 9 65 82 196 198 199 200 201 202 203 204 205 206 207 208 217
    constant_expression <expr> (119)
        on left: 83
        on right: 126 172 187
    declaration (120)
        on left: 84
        on right: 194 205 208 222 226 227
    init_declarator_list_opt (121)
        on left: 85 86
        on right: 84
    declaration_specifiers (122)
        on left: 87 88 89 90
        on right: 84 91 157 158 223
    declaration_specifiers_opt (123)
        on left: 91 92
        on right: 87 88 89 90
    init_declarator_list (124)
        on left: 93 94
        on right: 85 94
    init_declarator <sym> (125)
        on left: 95 96
        on right: 93 94
    storage_class_specifier (126)
        on left: 97 98 99 100
        on right: 87
    type_specifier (127)
        on left: 101 102 103 104 105 106 107 108 109 110 111 112 113
        on right: 88 114
    specifier_qualifier_list (128)
        on left: 114 115
        on right: 116 161
    specifier_qualifier_list_opt (129)
        on left: 116 117
        on right: 114 115
    enum_specifier (130)
        on left: 118 119 120
        on right: 113
    identifier_opt (131)
        on left: 121 122
        on right: 118 119
    enumerator_list (132)
        on left: 123 124
        on right: 118 119 124
    enumerator (133)
        on left: 125 126
        on right: 123 124
    type_qualifier (134)
        on left: 127 128 129
        on right: 89 115 151 152
    function_specifier (135)
        on left: 130
        on right: 90
    declarator <sym> (136)
        on left: 131 132
        on right: 95 96 134 157 223
    direct_declarator <sym> (137)
        on left: 133 134 135 136 137 138 139 140 141 142 143 144 145 146
        on right: 131 132 135 136 137 138 139 140 141 142 143 144 145 146
    type_qualifier_list_opt (138)
        on left: 147 148
        on right: 149 150
    pointer <symtyp> (139)
        on left: 149 150
        on right: 131 150
    type_qualifier_list (140)
        on left: 151 152
        on right: 135 136 142 144 145 147 152
    parameter_type_list (141)
        on left: 153 154
        on right: 139
    parameter_list (142)
        on left: 155 156
        on right: 153 154 156
    parameter_declaration (143)
        on left: 157 158
        on right: 155 156
    identifier_list (144)
        on left: 159 160
        on right: 141 160
    type_name (145)
        on left: 161
        on right: 16 17 27 35
    initializer <sym> (146)
        on left: 162 163 164
        on right: 96 165 166
    initializer_list (147)
        on left: 165 166
        on right: 16 17 163 164 166
    designation_opt (148)
        on left: 167 168
        on right: 165 166
    designation (149)
        on left: 169
        on right: 167
    designator_list (150)
        on left: 170 171
        on right: 169 171
    designator (151)
        on left: 172 173
        on right: 170 171
    statement <stmt> (152)
        on left: 174 175 176 177 178 179
        on right: 186 187 188 195 198 199 200
    loop_statement <stmt> (153)
        on left: 180 181 182 183 184 185
        on right: 201 203 205 206
    labeled_statement <stmt> (154)
        on left: 186 187 188
        on right: 174 180
    compound_statement <stmt> (155)
        on left: 189
        on right: 175 181
    block_item_list_opt <stmt> (156)
        on left: 190 191
        on right: 189 202 204 207 208 223
    block_item_list <stmt> (157)
        on left: 192 193
        on right: 190 193
    block_item <stmt> (158)
        on left: 194 195
        on right: 192 193
    expression_statement <expr> (159)
        on left: 196 197
        on right: 176 182 205 206 207 208
    selection_statement <stmt> (160)
        on left: 198 199 200
        on right: 177 183
    iteration_statement <stmt> (161)
        on left: 201 202 203 204 205 206 207 208
        on right: 178 184
    F (162)
        on left: 209
        on right: 205 206 207 208
    W (163)
        on left: 210
        on right: 201 202
    D (164)
        on left: 211
        on right: 203 204
    X (165)
        on left: 212
        on right: 189 201 202 205 206 207 208
    change_table (166)
        on left: 213
        on right: 139 140 189 201 202 205 206 207 208 223
    jump_statement <stmt> (167)
        on left: 214 215 216 217 218
        on right: 179 185
    translation_unit (168)
        on left: 219 220
        on right: 0 220
    external_declaration (169)
        on left: 221 222
        on right: 219 220
    function_definition (170)
        on left: 223
        on right: 221
    declaration_list_opt (171)
        on left: 224 225
        on right: 223
    declaration_list (172)
        on left: 226 227
        on right: 224 227


State 0

    0 $accept: . translation_unit $end

    AUTO       shift, and go to state 1
    CHAR       shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOAT      shift, and go to state 7
    INLINE     shift, and go to state 8
    INT        shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOID       shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL       shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21

    declaration              go to state 22
    declaration_specifiers   go to state 23
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    translation_unit         go to state 29
    external_declaration     go to state 30
    function_definition      go to state 31


State 1

   99 storage_class_specifier: AUTO .

    $default  reduce using rule 99 (storage_class_specifier)


State 2

  102 type_specifier: CHAR .

    $default  reduce using rule 102 (type_specifier)


State 3

  127 type_qualifier: CONST .

    $default  reduce using rule 127 (type_qualifier)


State 4

  107 type_specifier: DOUBLE .

    $default  reduce using rule 107 (type_specifier)


State 5

  118 enum_specifier: ENUM . identifier_opt CURLY_BRACKET_OPEN enumerator_list CURLY_BRACKET_CLOSE
  119               | ENUM . identifier_opt CURLY_BRACKET_OPEN enumerator_list COMMA CURLY_BRACKET_CLOSE
  120               | ENUM . IDENTIFIER

    IDENTIFIER  shift, and go to state 32

    $default  reduce using rule 122 (identifier_opt)

    identifier_opt  go to state 33


State 6

   97 storage_class_specifier: EXTERN .

    $default  reduce using rule 97 (storage_class_specifier)


State 7

  106 type_specifier: FLOAT .

    $default  reduce using rule 106 (type_specifier)


State 8

  130 function_specifier: INLINE .

    $default  reduce using rule 130 (function_specifier)


State 9

  104 type_specifier: INT .

    $default  reduce using rule 104 (type_specifier)


State 10

  105 type_specifier: LONG .

    $default  reduce using rule 105 (type_specifier)


State 11

  100 storage_class_specifier: REGISTER .

    $default  reduce using rule 100 (storage_class_specifier)


State 12

  128 type_qualifier: RESTRICT .

    $default  reduce using rule 128 (type_qualifier)


State 13

  103 type_specifier: SHORT .

    $default  reduce using rule 103 (type_specifier)


State 14

  108 type_specifier: SIGNED .

    $default  reduce using rule 108 (type_specifier)


State 15

   98 storage_class_specifier: STATIC .

    $default  reduce using rule 98 (storage_class_specifier)


State 16

  109 type_specifier: UNSIGNED .

    $default  reduce using rule 109 (type_specifier)


State 17

  101 type_specifier: VOID .

    $default  reduce using rule 101 (type_specifier)


State 18

  129 type_qualifier: VOLATILE .

    $default  reduce using rule 129 (type_qualifier)


State 19

  110 type_specifier: BOOL .

    $default  reduce using rule 110 (type_specifier)


State 20

  111 type_specifier: COMPLEX .

    $default  reduce using rule 111 (type_specifier)


State 21

  112 type_specifier: IMAGINARY .

    $default  reduce using rule 112 (type_specifier)


State 22

  222 external_declaration: declaration .

    $default  reduce using rule 222 (external_declaration)


State 23

   84 declaration: declaration_specifiers . init_declarator_list_opt SEMICOLON
  223 function_definition: declaration_specifiers . declarator declaration_list_opt change_table CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    ROUND_BRACKET_OPEN  shift, and go to state 34
    MULTIPLY            shift, and go to state 35
    IDENTIFIER          shift, and go to state 36

    $default  reduce using rule 86 (init_declarator_list_opt)

    init_declarator_list_opt  go to state 37
    init_declarator_list      go to state 38
    init_declarator           go to state 39
    declarator                go to state 40
    direct_declarator         go to state 41
    pointer                   go to state 42


State 24

   87 declaration_specifiers: storage_class_specifier . declaration_specifiers_opt

    AUTO       shift, and go to state 1
    CHAR       shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOAT      shift, and go to state 7
    INLINE     shift, and go to state 8
    INT        shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOID       shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL       shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21

    $default  reduce using rule 92 (declaration_specifiers_opt)

    declaration_specifiers      go to state 43
    declaration_specifiers_opt  go to state 44
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


State 25

   88 declaration_specifiers: type_specifier . declaration_specifiers_opt

    AUTO       shift, and go to state 1
    CHAR       shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOAT      shift, and go to state 7
    INLINE     shift, and go to state 8
    INT        shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOID       shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL       shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21

    $default  reduce using rule 92 (declaration_specifiers_opt)

    declaration_specifiers      go to state 43
    declaration_specifiers_opt  go to state 45
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


State 26

  113 type_specifier: enum_specifier .

    $default  reduce using rule 113 (type_specifier)


State 27

   89 declaration_specifiers: type_qualifier . declaration_specifiers_opt

    AUTO       shift, and go to state 1
    CHAR       shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOAT      shift, and go to state 7
    INLINE     shift, and go to state 8
    INT        shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOID       shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL       shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21

    $default  reduce using rule 92 (declaration_specifiers_opt)

    declaration_specifiers      go to state 43
    declaration_specifiers_opt  go to state 46
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


State 28

   90 declaration_specifiers: function_specifier . declaration_specifiers_opt

    AUTO       shift, and go to state 1
    CHAR       shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOAT      shift, and go to state 7
    INLINE     shift, and go to state 8
    INT        shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOID       shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL       shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21

    $default  reduce using rule 92 (declaration_specifiers_opt)

    declaration_specifiers      go to state 43
    declaration_specifiers_opt  go to state 47
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


State 29

    0 $accept: translation_unit . $end
  220 translation_unit: translation_unit . external_declaration

    $end       shift, and go to state 48
    AUTO       shift, and go to state 1
    CHAR       shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOAT      shift, and go to state 7
    INLINE     shift, and go to state 8
    INT        shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOID       shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL       shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21

    declaration              go to state 22
    declaration_specifiers   go to state 23
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    external_declaration     go to state 49
    function_definition      go to state 31


State 30

  219 translation_unit: external_declaration .

    $default  reduce using rule 219 (translation_unit)


State 31

  221 external_declaration: function_definition .

    $default  reduce using rule 221 (external_declaration)


State 32

  120 enum_specifier: ENUM IDENTIFIER .
  121 identifier_opt: IDENTIFIER .

    CURLY_BRACKET_OPEN  reduce using rule 121 (identifier_opt)
    $default            reduce using rule 120 (enum_specifier)


State 33

  118 enum_specifier: ENUM identifier_opt . CURLY_BRACKET_OPEN enumerator_list CURLY_BRACKET_CLOSE
  119               | ENUM identifier_opt . CURLY_BRACKET_OPEN enumerator_list COMMA CURLY_BRACKET_CLOSE

    CURLY_BRACKET_OPEN  shift, and go to state 50


State 34

  134 direct_declarator: ROUND_BRACKET_OPEN . declarator ROUND_BRACKET_CLOSE

    ROUND_BRACKET_OPEN  shift, and go to state 34
    MULTIPLY            shift, and go to state 35
    IDENTIFIER          shift, and go to state 36

    declarator         go to state 51
    direct_declarator  go to state 41
    pointer            go to state 42


State 35

  149 pointer: MULTIPLY . type_qualifier_list_opt
  150        | MULTIPLY . type_qualifier_list_opt pointer

    CONST     shift, and go to state 3
    RESTRICT  shift, and go to state 12
    VOLATILE  shift, and go to state 18

    $default  reduce using rule 148 (type_qualifier_list_opt)

    type_qualifier           go to state 52
    type_qualifier_list_opt  go to state 53
    type_qualifier_list      go to state 54


State 36

  133 direct_declarator: IDENTIFIER .

    $default  reduce using rule 133 (direct_declarator)


State 37

   84 declaration: declaration_specifiers init_declarator_list_opt . SEMICOLON

    SEMICOLON  shift, and go to state 55


State 38

   85 init_declarator_list_opt: init_declarator_list .
   94 init_declarator_list: init_declarator_list . COMMA init_declarator

    COMMA  shift, and go to state 56

    $default  reduce using rule 85 (init_declarator_list_opt)


State 39

   93 init_declarator_list: init_declarator .

    $default  reduce using rule 93 (init_declarator_list)


State 40

   95 init_declarator: declarator .
   96                | declarator . ASSIGN initializer
  223 function_definition: declaration_specifiers declarator . declaration_list_opt change_table CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    AUTO       shift, and go to state 1
    CHAR       shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOAT      shift, and go to state 7
    INLINE     shift, and go to state 8
    INT        shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOID       shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL       shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21
    ASSIGN     shift, and go to state 57

    CURLY_BRACKET_OPEN  reduce using rule 225 (declaration_list_opt)
    $default            reduce using rule 95 (init_declarator)

    declaration              go to state 58
    declaration_specifiers   go to state 59
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    declaration_list_opt     go to state 60
    declaration_list         go to state 61


State 41

  132 declarator: direct_declarator .
  135 direct_declarator: direct_declarator . SQUARE_BRACKET_OPEN type_qualifier_list assignment_expression SQUARE_BRACKET_CLOSE
  136                  | direct_declarator . SQUARE_BRACKET_OPEN type_qualifier_list SQUARE_BRACKET_CLOSE
  137                  | direct_declarator . SQUARE_BRACKET_OPEN assignment_expression SQUARE_BRACKET_CLOSE
  138                  | direct_declarator . SQUARE_BRACKET_OPEN SQUARE_BRACKET_CLOSE
  139                  | direct_declarator . ROUND_BRACKET_OPEN change_table parameter_type_list ROUND_BRACKET_CLOSE
  140                  | direct_declarator . ROUND_BRACKET_OPEN change_table ROUND_BRACKET_CLOSE
  141                  | direct_declarator . ROUND_BRACKET_OPEN identifier_list ROUND_BRACKET_CLOSE
  142                  | direct_declarator . SQUARE_BRACKET_OPEN STATIC type_qualifier_list assignment_expression SQUARE_BRACKET_CLOSE
  143                  | direct_declarator . SQUARE_BRACKET_OPEN STATIC assignment_expression SQUARE_BRACKET_CLOSE
  144                  | direct_declarator . SQUARE_BRACKET_OPEN type_qualifier_list STATIC assignment_expression SQUARE_BRACKET_CLOSE
  145                  | direct_declarator . SQUARE_BRACKET_OPEN type_qualifier_list MULTIPLY SQUARE_BRACKET_CLOSE
  146                  | direct_declarator . SQUARE_BRACKET_OPEN MULTIPLY SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_OPEN  shift, and go to state 62
    ROUND_BRACKET_OPEN   shift, and go to state 63

    $default  reduce using rule 132 (declarator)


State 42

  131 declarator: pointer . direct_declarator

    ROUND_BRACKET_OPEN  shift, and go to state 34
    IDENTIFIER          shift, and go to state 36

    direct_declarator  go to state 64


State 43

   91 declaration_specifiers_opt: declaration_specifiers .

    $default  reduce using rule 91 (declaration_specifiers_opt)


State 44

   87 declaration_specifiers: storage_class_specifier declaration_specifiers_opt .

    $default  reduce using rule 87 (declaration_specifiers)


State 45

   88 declaration_specifiers: type_specifier declaration_specifiers_opt .

    $default  reduce using rule 88 (declaration_specifiers)


State 46

   89 declaration_specifiers: type_qualifier declaration_specifiers_opt .

    $default  reduce using rule 89 (declaration_specifiers)


State 47

   90 declaration_specifiers: function_specifier declaration_specifiers_opt .

    $default  reduce using rule 90 (declaration_specifiers)


State 48

    0 $accept: translation_unit $end .

    $default  accept


State 49

  220 translation_unit: translation_unit external_declaration .

    $default  reduce using rule 220 (translation_unit)


State 50

  118 enum_specifier: ENUM identifier_opt CURLY_BRACKET_OPEN . enumerator_list CURLY_BRACKET_CLOSE
  119               | ENUM identifier_opt CURLY_BRACKET_OPEN . enumerator_list COMMA CURLY_BRACKET_CLOSE

    IDENTIFIER  shift, and go to state 65

    enumerator_list  go to state 66
    enumerator       go to state 67


State 51

  134 direct_declarator: ROUND_BRACKET_OPEN declarator . ROUND_BRACKET_CLOSE

    ROUND_BRACKET_CLOSE  shift, and go to state 68


State 52

  151 type_qualifier_list: type_qualifier .

    $default  reduce using rule 151 (type_qualifier_list)


State 53

  149 pointer: MULTIPLY type_qualifier_list_opt .
  150        | MULTIPLY type_qualifier_list_opt . pointer

    MULTIPLY  shift, and go to state 35

    $default  reduce using rule 149 (pointer)

    pointer  go to state 69


State 54

  147 type_qualifier_list_opt: type_qualifier_list .
  152 type_qualifier_list: type_qualifier_list . type_qualifier

    CONST     shift, and go to state 3
    RESTRICT  shift, and go to state 12
    VOLATILE  shift, and go to state 18

    $default  reduce using rule 147 (type_qualifier_list_opt)

    type_qualifier  go to state 70


State 55

   84 declaration: declaration_specifiers init_declarator_list_opt SEMICOLON .

    $default  reduce using rule 84 (declaration)


State 56

   94 init_declarator_list: init_declarator_list COMMA . init_declarator

    ROUND_BRACKET_OPEN  shift, and go to state 34
    MULTIPLY            shift, and go to state 35
    IDENTIFIER          shift, and go to state 36

    init_declarator    go to state 71
    declarator         go to state 72
    direct_declarator  go to state 41
    pointer            go to state 42


State 57

   96 init_declarator: declarator ASSIGN . initializer

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 75
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 106
    initializer                go to state 107


State 58

  226 declaration_list: declaration .

    $default  reduce using rule 226 (declaration_list)


State 59

   84 declaration: declaration_specifiers . init_declarator_list_opt SEMICOLON

    ROUND_BRACKET_OPEN  shift, and go to state 34
    MULTIPLY            shift, and go to state 35
    IDENTIFIER          shift, and go to state 36

    $default  reduce using rule 86 (init_declarator_list_opt)

    init_declarator_list_opt  go to state 37
    init_declarator_list      go to state 38
    init_declarator           go to state 39
    declarator                go to state 72
    direct_declarator         go to state 41
    pointer                   go to state 42


State 60

  223 function_definition: declaration_specifiers declarator declaration_list_opt . change_table CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    $default  reduce using rule 213 (change_table)

    change_table  go to state 108


State 61

  224 declaration_list_opt: declaration_list .
  227 declaration_list: declaration_list . declaration

    AUTO       shift, and go to state 1
    CHAR       shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOAT      shift, and go to state 7
    INLINE     shift, and go to state 8
    INT        shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOID       shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL       shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21

    $default  reduce using rule 224 (declaration_list_opt)

    declaration              go to state 109
    declaration_specifiers   go to state 59
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28


State 62

  135 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN . type_qualifier_list assignment_expression SQUARE_BRACKET_CLOSE
  136                  | direct_declarator SQUARE_BRACKET_OPEN . type_qualifier_list SQUARE_BRACKET_CLOSE
  137                  | direct_declarator SQUARE_BRACKET_OPEN . assignment_expression SQUARE_BRACKET_CLOSE
  138                  | direct_declarator SQUARE_BRACKET_OPEN . SQUARE_BRACKET_CLOSE
  142                  | direct_declarator SQUARE_BRACKET_OPEN . STATIC type_qualifier_list assignment_expression SQUARE_BRACKET_CLOSE
  143                  | direct_declarator SQUARE_BRACKET_OPEN . STATIC assignment_expression SQUARE_BRACKET_CLOSE
  144                  | direct_declarator SQUARE_BRACKET_OPEN . type_qualifier_list STATIC assignment_expression SQUARE_BRACKET_CLOSE
  145                  | direct_declarator SQUARE_BRACKET_OPEN . type_qualifier_list MULTIPLY SQUARE_BRACKET_CLOSE
  146                  | direct_declarator SQUARE_BRACKET_OPEN . MULTIPLY SQUARE_BRACKET_CLOSE

    CONST                 shift, and go to state 3
    RESTRICT              shift, and go to state 12
    SIZEOF                shift, and go to state 73
    STATIC                shift, and go to state 110
    VOLATILE              shift, and go to state 18
    SQUARE_BRACKET_CLOSE  shift, and go to state 111
    ROUND_BRACKET_OPEN    shift, and go to state 74
    INCREMENT             shift, and go to state 76
    DECREMENT             shift, and go to state 77
    BITWISE_AND           shift, and go to state 78
    BITWISE_NOT           shift, and go to state 79
    LOGICAL_NOT           shift, and go to state 80
    MULTIPLY              shift, and go to state 112
    PLUS                  shift, and go to state 82
    MINUS                 shift, and go to state 83
    INTEGER_CONSTANT      shift, and go to state 84
    FLOATING_CONSTANT     shift, and go to state 85
    CHAR_CONSTANT         shift, and go to state 86
    STRING_LITERAL        shift, and go to state 87
    IDENTIFIER            shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 113
    type_qualifier             go to state 52
    type_qualifier_list        go to state 114


State 63

  139 direct_declarator: direct_declarator ROUND_BRACKET_OPEN . change_table parameter_type_list ROUND_BRACKET_CLOSE
  140                  | direct_declarator ROUND_BRACKET_OPEN . change_table ROUND_BRACKET_CLOSE
  141                  | direct_declarator ROUND_BRACKET_OPEN . identifier_list ROUND_BRACKET_CLOSE

    IDENTIFIER  shift, and go to state 115

    $default  reduce using rule 213 (change_table)

    identifier_list  go to state 116
    change_table     go to state 117


State 64

  131 declarator: pointer direct_declarator .
  135 direct_declarator: direct_declarator . SQUARE_BRACKET_OPEN type_qualifier_list assignment_expression SQUARE_BRACKET_CLOSE
  136                  | direct_declarator . SQUARE_BRACKET_OPEN type_qualifier_list SQUARE_BRACKET_CLOSE
  137                  | direct_declarator . SQUARE_BRACKET_OPEN assignment_expression SQUARE_BRACKET_CLOSE
  138                  | direct_declarator . SQUARE_BRACKET_OPEN SQUARE_BRACKET_CLOSE
  139                  | direct_declarator . ROUND_BRACKET_OPEN change_table parameter_type_list ROUND_BRACKET_CLOSE
  140                  | direct_declarator . ROUND_BRACKET_OPEN change_table ROUND_BRACKET_CLOSE
  141                  | direct_declarator . ROUND_BRACKET_OPEN identifier_list ROUND_BRACKET_CLOSE
  142                  | direct_declarator . SQUARE_BRACKET_OPEN STATIC type_qualifier_list assignment_expression SQUARE_BRACKET_CLOSE
  143                  | direct_declarator . SQUARE_BRACKET_OPEN STATIC assignment_expression SQUARE_BRACKET_CLOSE
  144                  | direct_declarator . SQUARE_BRACKET_OPEN type_qualifier_list STATIC assignment_expression SQUARE_BRACKET_CLOSE
  145                  | direct_declarator . SQUARE_BRACKET_OPEN type_qualifier_list MULTIPLY SQUARE_BRACKET_CLOSE
  146                  | direct_declarator . SQUARE_BRACKET_OPEN MULTIPLY SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_OPEN  shift, and go to state 62
    ROUND_BRACKET_OPEN   shift, and go to state 63

    $default  reduce using rule 131 (declarator)


State 65

  125 enumerator: IDENTIFIER .
  126           | IDENTIFIER . ASSIGN constant_expression

    ASSIGN  shift, and go to state 118

    $default  reduce using rule 125 (enumerator)


State 66

  118 enum_specifier: ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list . CURLY_BRACKET_CLOSE
  119               | ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list . COMMA CURLY_BRACKET_CLOSE
  124 enumerator_list: enumerator_list . COMMA enumerator

    CURLY_BRACKET_CLOSE  shift, and go to state 119
    COMMA                shift, and go to state 120


State 67

  123 enumerator_list: enumerator .

    $default  reduce using rule 123 (enumerator_list)


State 68

  134 direct_declarator: ROUND_BRACKET_OPEN declarator ROUND_BRACKET_CLOSE .

    $default  reduce using rule 134 (direct_declarator)


State 69

  150 pointer: MULTIPLY type_qualifier_list_opt pointer .

    $default  reduce using rule 150 (pointer)


State 70

  152 type_qualifier_list: type_qualifier_list type_qualifier .

    $default  reduce using rule 152 (type_qualifier_list)


State 71

   94 init_declarator_list: init_declarator_list COMMA init_declarator .

    $default  reduce using rule 94 (init_declarator_list)


State 72

   95 init_declarator: declarator .
   96                | declarator . ASSIGN initializer

    ASSIGN  shift, and go to state 57

    $default  reduce using rule 95 (init_declarator)


State 73

   26 unary_expression: SIZEOF . unary_expression
   27                 | SIZEOF . ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 121
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression  go to state 89
    constant            go to state 90
    postfix_expression  go to state 91
    unary_expression    go to state 122
    unary_operator      go to state 93


State 74

    4 primary_expression: ROUND_BRACKET_OPEN . expression ROUND_BRACKET_CLOSE
   16 postfix_expression: ROUND_BRACKET_OPEN . type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | ROUND_BRACKET_OPEN . type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE
   35 cast_expression: ROUND_BRACKET_OPEN . type_name ROUND_BRACKET_CLOSE cast_expression

    CHAR                shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    FLOAT               shift, and go to state 7
    INT                 shift, and go to state 9
    LONG                shift, and go to state 10
    RESTRICT            shift, and go to state 12
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 73
    UNSIGNED            shift, and go to state 16
    VOID                shift, and go to state 17
    VOLATILE            shift, and go to state 18
    BOOL                shift, and go to state 19
    COMPLEX             shift, and go to state 20
    IMAGINARY           shift, and go to state 21
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 124
    type_specifier             go to state 125
    specifier_qualifier_list   go to state 126
    enum_specifier             go to state 26
    type_qualifier             go to state 127
    type_name                  go to state 128


State 75

  163 initializer: CURLY_BRACKET_OPEN . initializer_list CURLY_BRACKET_CLOSE
  164            | CURLY_BRACKET_OPEN . initializer_list COMMA CURLY_BRACKET_CLOSE

    SQUARE_BRACKET_OPEN  shift, and go to state 129
    DOT                  shift, and go to state 130

    $default  reduce using rule 168 (designation_opt)

    initializer_list  go to state 131
    designation_opt   go to state 132
    designation       go to state 133
    designator_list   go to state 134
    designator        go to state 135


State 76

   23 unary_expression: INCREMENT . unary_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 136
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression  go to state 89
    constant            go to state 90
    postfix_expression  go to state 91
    unary_expression    go to state 137
    unary_operator      go to state 93


State 77

   24 unary_expression: DECREMENT . unary_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 136
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression  go to state 89
    constant            go to state 90
    postfix_expression  go to state 91
    unary_expression    go to state 138
    unary_operator      go to state 93


State 78

   28 unary_operator: BITWISE_AND .

    $default  reduce using rule 28 (unary_operator)


State 79

   32 unary_operator: BITWISE_NOT .

    $default  reduce using rule 32 (unary_operator)


State 80

   33 unary_operator: LOGICAL_NOT .

    $default  reduce using rule 33 (unary_operator)


State 81

   29 unary_operator: MULTIPLY .

    $default  reduce using rule 29 (unary_operator)


State 82

   30 unary_operator: PLUS .

    $default  reduce using rule 30 (unary_operator)


State 83

   31 unary_operator: MINUS .

    $default  reduce using rule 31 (unary_operator)


State 84

    5 constant: INTEGER_CONSTANT .

    $default  reduce using rule 5 (constant)


State 85

    6 constant: FLOATING_CONSTANT .

    $default  reduce using rule 6 (constant)


State 86

    7 constant: CHAR_CONSTANT .

    $default  reduce using rule 7 (constant)


State 87

    3 primary_expression: STRING_LITERAL .

    $default  reduce using rule 3 (primary_expression)


State 88

    1 primary_expression: IDENTIFIER .

    $default  reduce using rule 1 (primary_expression)


State 89

    8 postfix_expression: primary_expression .

    $default  reduce using rule 8 (postfix_expression)


State 90

    2 primary_expression: constant .

    $default  reduce using rule 2 (primary_expression)


State 91

    9 postfix_expression: postfix_expression . SQUARE_BRACKET_OPEN expression SQUARE_BRACKET_CLOSE
   10                   | postfix_expression . ROUND_BRACKET_OPEN ROUND_BRACKET_CLOSE
   11                   | postfix_expression . ROUND_BRACKET_OPEN argument_expression_list_opt ROUND_BRACKET_CLOSE
   12                   | postfix_expression . DOT IDENTIFIER
   13                   | postfix_expression . ARROW IDENTIFIER
   14                   | postfix_expression . INCREMENT
   15                   | postfix_expression . DECREMENT
   22 unary_expression: postfix_expression .

    SQUARE_BRACKET_OPEN  shift, and go to state 139
    ROUND_BRACKET_OPEN   shift, and go to state 140
    DOT                  shift, and go to state 141
    ARROW                shift, and go to state 142
    INCREMENT            shift, and go to state 143
    DECREMENT            shift, and go to state 144

    $default  reduce using rule 22 (unary_expression)


State 92

   34 cast_expression: unary_expression .
   69 assignment_expression: unary_expression . assignment_operator assignment_expression

    ASSIGN              shift, and go to state 145
    PLUS_ASSIGN         shift, and go to state 146
    MINUS_ASSIGN        shift, and go to state 147
    MULTIPLY_ASSIGN     shift, and go to state 148
    DIVIDE_ASSIGN       shift, and go to state 149
    MODULO_ASSIGN       shift, and go to state 150
    LEFT_SHIFT_ASSIGN   shift, and go to state 151
    RIGHT_SHIFT_ASSIGN  shift, and go to state 152
    BITWISE_AND_ASSIGN  shift, and go to state 153
    BITWISE_XOR_ASSIGN  shift, and go to state 154
    BITWISE_OR_ASSIGN   shift, and go to state 155

    $default  reduce using rule 34 (cast_expression)

    assignment_operator  go to state 156


State 93

   25 unary_expression: unary_operator . cast_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression  go to state 89
    constant            go to state 90
    postfix_expression  go to state 91
    unary_expression    go to state 157
    unary_operator      go to state 93
    cast_expression     go to state 158


State 94

   36 multiplicative_expression: cast_expression .

    $default  reduce using rule 36 (multiplicative_expression)


State 95

   37 multiplicative_expression: multiplicative_expression . MULTIPLY cast_expression
   38                          | multiplicative_expression . DIVIDE cast_expression
   39                          | multiplicative_expression . MODULO cast_expression
   40 additive_expression: multiplicative_expression .

    MULTIPLY  shift, and go to state 159
    DIVIDE    shift, and go to state 160
    MODULO    shift, and go to state 161

    $default  reduce using rule 40 (additive_expression)


State 96

   41 additive_expression: additive_expression . PLUS multiplicative_expression
   42                    | additive_expression . MINUS multiplicative_expression
   43 shift_expression: additive_expression .

    PLUS   shift, and go to state 162
    MINUS  shift, and go to state 163

    $default  reduce using rule 43 (shift_expression)


State 97

   44 shift_expression: shift_expression . LEFT_SHIFT additive_expression
   45                 | shift_expression . RIGHT_SHIFT additive_expression
   46 relational_expression: shift_expression .

    LEFT_SHIFT   shift, and go to state 164
    RIGHT_SHIFT  shift, and go to state 165

    $default  reduce using rule 46 (relational_expression)


State 98

   47 relational_expression: relational_expression . LESS_THAN shift_expression
   48                      | relational_expression . GREATER_THAN shift_expression
   49                      | relational_expression . LESS_THAN_EQUAL shift_expression
   50                      | relational_expression . GREATER_THAN_EQUAL shift_expression
   51 equality_expression: relational_expression .

    LESS_THAN           shift, and go to state 166
    GREATER_THAN        shift, and go to state 167
    LESS_THAN_EQUAL     shift, and go to state 168
    GREATER_THAN_EQUAL  shift, and go to state 169

    $default  reduce using rule 51 (equality_expression)


State 99

   52 equality_expression: equality_expression . EQUAL relational_expression
   53                    | equality_expression . NOT_EQUAL relational_expression
   54 AND_expression: equality_expression .

    EQUAL      shift, and go to state 170
    NOT_EQUAL  shift, and go to state 171

    $default  reduce using rule 54 (AND_expression)


State 100

   55 AND_expression: AND_expression . BITWISE_AND equality_expression
   56 exclusive_OR_expression: AND_expression .

    BITWISE_AND  shift, and go to state 172

    $default  reduce using rule 56 (exclusive_OR_expression)


State 101

   57 exclusive_OR_expression: exclusive_OR_expression . BITWISE_XOR AND_expression
   58 inclusive_OR_expression: exclusive_OR_expression .

    BITWISE_XOR  shift, and go to state 173

    $default  reduce using rule 58 (inclusive_OR_expression)


State 102

   59 inclusive_OR_expression: inclusive_OR_expression . BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: inclusive_OR_expression .

    BITWISE_OR  shift, and go to state 174

    $default  reduce using rule 60 (logical_AND_expression)


State 103

   61 logical_AND_expression: logical_AND_expression . LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: logical_AND_expression .

    LOGICAL_AND  shift, and go to state 175

    $default  reduce using rule 62 (logical_OR_expression)


State 104

   63 logical_OR_expression: logical_OR_expression . LOGICAL_OR M logical_AND_expression
   64 conditional_expression: logical_OR_expression .
   65                       | logical_OR_expression . N QUESTION_MARK M expression N COLON M conditional_expression

    LOGICAL_OR  shift, and go to state 176

    QUESTION_MARK  reduce using rule 67 (N)
    $default       reduce using rule 64 (conditional_expression)

    N  go to state 177


State 105

   68 assignment_expression: conditional_expression .

    $default  reduce using rule 68 (assignment_expression)


State 106

  162 initializer: assignment_expression .

    $default  reduce using rule 162 (initializer)


State 107

   96 init_declarator: declarator ASSIGN initializer .

    $default  reduce using rule 96 (init_declarator)


State 108

  223 function_definition: declaration_specifiers declarator declaration_list_opt change_table . CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    CURLY_BRACKET_OPEN  shift, and go to state 178


State 109

  227 declaration_list: declaration_list declaration .

    $default  reduce using rule 227 (declaration_list)


State 110

  142 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN STATIC . type_qualifier_list assignment_expression SQUARE_BRACKET_CLOSE
  143                  | direct_declarator SQUARE_BRACKET_OPEN STATIC . assignment_expression SQUARE_BRACKET_CLOSE

    CONST               shift, and go to state 3
    RESTRICT            shift, and go to state 12
    SIZEOF              shift, and go to state 73
    VOLATILE            shift, and go to state 18
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 179
    type_qualifier             go to state 52
    type_qualifier_list        go to state 180


State 111

  138 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 138 (direct_declarator)


State 112

   29 unary_operator: MULTIPLY .
  146 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN MULTIPLY . SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_CLOSE  shift, and go to state 181

    $default  reduce using rule 29 (unary_operator)


State 113

  137 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN assignment_expression . SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_CLOSE  shift, and go to state 182


State 114

  135 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list . assignment_expression SQUARE_BRACKET_CLOSE
  136                  | direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list . SQUARE_BRACKET_CLOSE
  144                  | direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list . STATIC assignment_expression SQUARE_BRACKET_CLOSE
  145                  | direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list . MULTIPLY SQUARE_BRACKET_CLOSE
  152 type_qualifier_list: type_qualifier_list . type_qualifier

    CONST                 shift, and go to state 3
    RESTRICT              shift, and go to state 12
    SIZEOF                shift, and go to state 73
    STATIC                shift, and go to state 183
    VOLATILE              shift, and go to state 18
    SQUARE_BRACKET_CLOSE  shift, and go to state 184
    ROUND_BRACKET_OPEN    shift, and go to state 74
    INCREMENT             shift, and go to state 76
    DECREMENT             shift, and go to state 77
    BITWISE_AND           shift, and go to state 78
    BITWISE_NOT           shift, and go to state 79
    LOGICAL_NOT           shift, and go to state 80
    MULTIPLY              shift, and go to state 185
    PLUS                  shift, and go to state 82
    MINUS                 shift, and go to state 83
    INTEGER_CONSTANT      shift, and go to state 84
    FLOATING_CONSTANT     shift, and go to state 85
    CHAR_CONSTANT         shift, and go to state 86
    STRING_LITERAL        shift, and go to state 87
    IDENTIFIER            shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 186
    type_qualifier             go to state 70


State 115

  159 identifier_list: IDENTIFIER .

    $default  reduce using rule 159 (identifier_list)


State 116

  141 direct_declarator: direct_declarator ROUND_BRACKET_OPEN identifier_list . ROUND_BRACKET_CLOSE
  160 identifier_list: identifier_list . COMMA IDENTIFIER

    ROUND_BRACKET_CLOSE  shift, and go to state 187
    COMMA                shift, and go to state 188


State 117

  139 direct_declarator: direct_declarator ROUND_BRACKET_OPEN change_table . parameter_type_list ROUND_BRACKET_CLOSE
  140                  | direct_declarator ROUND_BRACKET_OPEN change_table . ROUND_BRACKET_CLOSE

    AUTO                 shift, and go to state 1
    CHAR                 shift, and go to state 2
    CONST                shift, and go to state 3
    DOUBLE               shift, and go to state 4
    ENUM                 shift, and go to state 5
    EXTERN               shift, and go to state 6
    FLOAT                shift, and go to state 7
    INLINE               shift, and go to state 8
    INT                  shift, and go to state 9
    LONG                 shift, and go to state 10
    REGISTER             shift, and go to state 11
    RESTRICT             shift, and go to state 12
    SHORT                shift, and go to state 13
    SIGNED               shift, and go to state 14
    STATIC               shift, and go to state 15
    UNSIGNED             shift, and go to state 16
    VOID                 shift, and go to state 17
    VOLATILE             shift, and go to state 18
    BOOL                 shift, and go to state 19
    COMPLEX              shift, and go to state 20
    IMAGINARY            shift, and go to state 21
    ROUND_BRACKET_CLOSE  shift, and go to state 189

    declaration_specifiers   go to state 190
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    parameter_type_list      go to state 191
    parameter_list           go to state 192
    parameter_declaration    go to state 193


State 118

  126 enumerator: IDENTIFIER ASSIGN . constant_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 194
    constant_expression        go to state 195


State 119

  118 enum_specifier: ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list CURLY_BRACKET_CLOSE .

    $default  reduce using rule 118 (enum_specifier)


State 120

  119 enum_specifier: ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list COMMA . CURLY_BRACKET_CLOSE
  124 enumerator_list: enumerator_list COMMA . enumerator

    CURLY_BRACKET_CLOSE  shift, and go to state 196
    IDENTIFIER           shift, and go to state 65

    enumerator  go to state 197


State 121

    4 primary_expression: ROUND_BRACKET_OPEN . expression ROUND_BRACKET_CLOSE
   16 postfix_expression: ROUND_BRACKET_OPEN . type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | ROUND_BRACKET_OPEN . type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE
   27 unary_expression: SIZEOF ROUND_BRACKET_OPEN . type_name ROUND_BRACKET_CLOSE

    CHAR                shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    FLOAT               shift, and go to state 7
    INT                 shift, and go to state 9
    LONG                shift, and go to state 10
    RESTRICT            shift, and go to state 12
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 73
    UNSIGNED            shift, and go to state 16
    VOID                shift, and go to state 17
    VOLATILE            shift, and go to state 18
    BOOL                shift, and go to state 19
    COMPLEX             shift, and go to state 20
    IMAGINARY           shift, and go to state 21
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 124
    type_specifier             go to state 125
    specifier_qualifier_list   go to state 126
    enum_specifier             go to state 26
    type_qualifier             go to state 127
    type_name                  go to state 198


State 122

   26 unary_expression: SIZEOF unary_expression .

    $default  reduce using rule 26 (unary_expression)


State 123

   81 expression: assignment_expression .

    $default  reduce using rule 81 (expression)


State 124

    4 primary_expression: ROUND_BRACKET_OPEN expression . ROUND_BRACKET_CLOSE
   82 expression: expression . COMMA assignment_expression

    ROUND_BRACKET_CLOSE  shift, and go to state 199
    COMMA                shift, and go to state 200


State 125

  114 specifier_qualifier_list: type_specifier . specifier_qualifier_list_opt

    CHAR       shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    FLOAT      shift, and go to state 7
    INT        shift, and go to state 9
    LONG       shift, and go to state 10
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    UNSIGNED   shift, and go to state 16
    VOID       shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL       shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21

    $default  reduce using rule 117 (specifier_qualifier_list_opt)

    type_specifier                go to state 125
    specifier_qualifier_list      go to state 201
    specifier_qualifier_list_opt  go to state 202
    enum_specifier                go to state 26
    type_qualifier                go to state 127


State 126

  161 type_name: specifier_qualifier_list .

    $default  reduce using rule 161 (type_name)


State 127

  115 specifier_qualifier_list: type_qualifier . specifier_qualifier_list_opt

    CHAR       shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    FLOAT      shift, and go to state 7
    INT        shift, and go to state 9
    LONG       shift, and go to state 10
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    UNSIGNED   shift, and go to state 16
    VOID       shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL       shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21

    $default  reduce using rule 117 (specifier_qualifier_list_opt)

    type_specifier                go to state 125
    specifier_qualifier_list      go to state 201
    specifier_qualifier_list_opt  go to state 203
    enum_specifier                go to state 26
    type_qualifier                go to state 127


State 128

   16 postfix_expression: ROUND_BRACKET_OPEN type_name . ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | ROUND_BRACKET_OPEN type_name . ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE
   35 cast_expression: ROUND_BRACKET_OPEN type_name . ROUND_BRACKET_CLOSE cast_expression

    ROUND_BRACKET_CLOSE  shift, and go to state 204


State 129

  172 designator: SQUARE_BRACKET_OPEN . constant_expression SQUARE_BRACKET_CLOSE

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 194
    constant_expression        go to state 205


State 130

  173 designator: DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 206


State 131

  163 initializer: CURLY_BRACKET_OPEN initializer_list . CURLY_BRACKET_CLOSE
  164            | CURLY_BRACKET_OPEN initializer_list . COMMA CURLY_BRACKET_CLOSE
  166 initializer_list: initializer_list . COMMA designation_opt initializer

    CURLY_BRACKET_CLOSE  shift, and go to state 207
    COMMA                shift, and go to state 208


State 132

  165 initializer_list: designation_opt . initializer

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 75
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 106
    initializer                go to state 209


State 133

  167 designation_opt: designation .

    $default  reduce using rule 167 (designation_opt)


State 134

  169 designation: designator_list . ASSIGN
  171 designator_list: designator_list . designator

    SQUARE_BRACKET_OPEN  shift, and go to state 129
    DOT                  shift, and go to state 130
    ASSIGN               shift, and go to state 210

    designator  go to state 211


State 135

  170 designator_list: designator .

    $default  reduce using rule 170 (designator_list)


State 136

    4 primary_expression: ROUND_BRACKET_OPEN . expression ROUND_BRACKET_CLOSE
   16 postfix_expression: ROUND_BRACKET_OPEN . type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | ROUND_BRACKET_OPEN . type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE

    CHAR                shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    FLOAT               shift, and go to state 7
    INT                 shift, and go to state 9
    LONG                shift, and go to state 10
    RESTRICT            shift, and go to state 12
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 73
    UNSIGNED            shift, and go to state 16
    VOID                shift, and go to state 17
    VOLATILE            shift, and go to state 18
    BOOL                shift, and go to state 19
    COMPLEX             shift, and go to state 20
    IMAGINARY           shift, and go to state 21
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 124
    type_specifier             go to state 125
    specifier_qualifier_list   go to state 126
    enum_specifier             go to state 26
    type_qualifier             go to state 127
    type_name                  go to state 212


State 137

   23 unary_expression: INCREMENT unary_expression .

    $default  reduce using rule 23 (unary_expression)


State 138

   24 unary_expression: DECREMENT unary_expression .

    $default  reduce using rule 24 (unary_expression)


State 139

    9 postfix_expression: postfix_expression SQUARE_BRACKET_OPEN . expression SQUARE_BRACKET_CLOSE

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 213


State 140

   10 postfix_expression: postfix_expression ROUND_BRACKET_OPEN . ROUND_BRACKET_CLOSE
   11                   | postfix_expression ROUND_BRACKET_OPEN . argument_expression_list_opt ROUND_BRACKET_CLOSE

    SIZEOF               shift, and go to state 73
    ROUND_BRACKET_OPEN   shift, and go to state 74
    ROUND_BRACKET_CLOSE  shift, and go to state 214
    INCREMENT            shift, and go to state 76
    DECREMENT            shift, and go to state 77
    BITWISE_AND          shift, and go to state 78
    BITWISE_NOT          shift, and go to state 79
    LOGICAL_NOT          shift, and go to state 80
    MULTIPLY             shift, and go to state 81
    PLUS                 shift, and go to state 82
    MINUS                shift, and go to state 83
    INTEGER_CONSTANT     shift, and go to state 84
    FLOATING_CONSTANT    shift, and go to state 85
    CHAR_CONSTANT        shift, and go to state 86
    STRING_LITERAL       shift, and go to state 87
    IDENTIFIER           shift, and go to state 88

    ROUND_BRACKET_CLOSE  [reduce using rule 19 (argument_expression_list_opt)]

    primary_expression            go to state 89
    constant                      go to state 90
    postfix_expression            go to state 91
    argument_expression_list_opt  go to state 215
    argument_expression_list      go to state 216
    unary_expression              go to state 92
    unary_operator                go to state 93
    cast_expression               go to state 94
    multiplicative_expression     go to state 95
    additive_expression           go to state 96
    shift_expression              go to state 97
    relational_expression         go to state 98
    equality_expression           go to state 99
    AND_expression                go to state 100
    exclusive_OR_expression       go to state 101
    inclusive_OR_expression       go to state 102
    logical_AND_expression        go to state 103
    logical_OR_expression         go to state 104
    conditional_expression        go to state 105
    assignment_expression         go to state 217


State 141

   12 postfix_expression: postfix_expression DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 218


State 142

   13 postfix_expression: postfix_expression ARROW . IDENTIFIER

    IDENTIFIER  shift, and go to state 219


State 143

   14 postfix_expression: postfix_expression INCREMENT .

    $default  reduce using rule 14 (postfix_expression)


State 144

   15 postfix_expression: postfix_expression DECREMENT .

    $default  reduce using rule 15 (postfix_expression)


State 145

   70 assignment_operator: ASSIGN .

    $default  reduce using rule 70 (assignment_operator)


State 146

   74 assignment_operator: PLUS_ASSIGN .

    $default  reduce using rule 74 (assignment_operator)


State 147

   75 assignment_operator: MINUS_ASSIGN .

    $default  reduce using rule 75 (assignment_operator)


State 148

   71 assignment_operator: MULTIPLY_ASSIGN .

    $default  reduce using rule 71 (assignment_operator)


State 149

   72 assignment_operator: DIVIDE_ASSIGN .

    $default  reduce using rule 72 (assignment_operator)


State 150

   73 assignment_operator: MODULO_ASSIGN .

    $default  reduce using rule 73 (assignment_operator)


State 151

   76 assignment_operator: LEFT_SHIFT_ASSIGN .

    $default  reduce using rule 76 (assignment_operator)


State 152

   77 assignment_operator: RIGHT_SHIFT_ASSIGN .

    $default  reduce using rule 77 (assignment_operator)


State 153

   78 assignment_operator: BITWISE_AND_ASSIGN .

    $default  reduce using rule 78 (assignment_operator)


State 154

   79 assignment_operator: BITWISE_XOR_ASSIGN .

    $default  reduce using rule 79 (assignment_operator)


State 155

   80 assignment_operator: BITWISE_OR_ASSIGN .

    $default  reduce using rule 80 (assignment_operator)


State 156

   69 assignment_expression: unary_expression assignment_operator . assignment_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 220


State 157

   34 cast_expression: unary_expression .

    $default  reduce using rule 34 (cast_expression)


State 158

   25 unary_expression: unary_operator cast_expression .

    $default  reduce using rule 25 (unary_expression)


State 159

   37 multiplicative_expression: multiplicative_expression MULTIPLY . cast_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression  go to state 89
    constant            go to state 90
    postfix_expression  go to state 91
    unary_expression    go to state 157
    unary_operator      go to state 93
    cast_expression     go to state 221


State 160

   38 multiplicative_expression: multiplicative_expression DIVIDE . cast_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression  go to state 89
    constant            go to state 90
    postfix_expression  go to state 91
    unary_expression    go to state 157
    unary_operator      go to state 93
    cast_expression     go to state 222


State 161

   39 multiplicative_expression: multiplicative_expression MODULO . cast_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression  go to state 89
    constant            go to state 90
    postfix_expression  go to state 91
    unary_expression    go to state 157
    unary_operator      go to state 93
    cast_expression     go to state 223


State 162

   41 additive_expression: additive_expression PLUS . multiplicative_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 224


State 163

   42 additive_expression: additive_expression MINUS . multiplicative_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 225


State 164

   44 shift_expression: shift_expression LEFT_SHIFT . additive_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 226


State 165

   45 shift_expression: shift_expression RIGHT_SHIFT . additive_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 227


State 166

   47 relational_expression: relational_expression LESS_THAN . shift_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 228


State 167

   48 relational_expression: relational_expression GREATER_THAN . shift_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 229


State 168

   49 relational_expression: relational_expression LESS_THAN_EQUAL . shift_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 230


State 169

   50 relational_expression: relational_expression GREATER_THAN_EQUAL . shift_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 231


State 170

   52 equality_expression: equality_expression EQUAL . relational_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 232


State 171

   53 equality_expression: equality_expression NOT_EQUAL . relational_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 233


State 172

   55 AND_expression: AND_expression BITWISE_AND . equality_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 234


State 173

   57 exclusive_OR_expression: exclusive_OR_expression BITWISE_XOR . AND_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 235


State 174

   59 inclusive_OR_expression: inclusive_OR_expression BITWISE_OR . exclusive_OR_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 236


State 175

   61 logical_AND_expression: logical_AND_expression LOGICAL_AND . M inclusive_OR_expression

    $default  reduce using rule 66 (M)

    M  go to state 237


State 176

   63 logical_OR_expression: logical_OR_expression LOGICAL_OR . M logical_AND_expression

    $default  reduce using rule 66 (M)

    M  go to state 238


State 177

   65 conditional_expression: logical_OR_expression N . QUESTION_MARK M expression N COLON M conditional_expression

    QUESTION_MARK  shift, and go to state 239


State 178

  223 function_definition: declaration_specifiers declarator declaration_list_opt change_table CURLY_BRACKET_OPEN . block_item_list_opt CURLY_BRACKET_CLOSE

    AUTO                shift, and go to state 1
    BREAK               shift, and go to state 240
    CASE                shift, and go to state 241
    CHAR                shift, and go to state 2
    CONST               shift, and go to state 3
    CONTINUE            shift, and go to state 242
    DEFAULT             shift, and go to state 243
    DO                  shift, and go to state 244
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FLOAT               shift, and go to state 7
    FOR                 shift, and go to state 245
    GOTO                shift, and go to state 246
    IF                  shift, and go to state 247
    INLINE              shift, and go to state 8
    INT                 shift, and go to state 9
    LONG                shift, and go to state 10
    REGISTER            shift, and go to state 11
    RESTRICT            shift, and go to state 12
    RETURN              shift, and go to state 248
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 73
    STATIC              shift, and go to state 15
    SWITCH              shift, and go to state 249
    UNSIGNED            shift, and go to state 16
    VOID                shift, and go to state 17
    VOLATILE            shift, and go to state 18
    WHILE               shift, and go to state 250
    BOOL                shift, and go to state 19
    COMPLEX             shift, and go to state 20
    IMAGINARY           shift, and go to state 21
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 251
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 253

    $default  reduce using rule 191 (block_item_list_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    declaration                go to state 255
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 256
    labeled_statement          go to state 257
    compound_statement         go to state 258
    block_item_list_opt        go to state 259
    block_item_list            go to state 260
    block_item                 go to state 261
    expression_statement       go to state 262
    selection_statement        go to state 263
    iteration_statement        go to state 264
    jump_statement             go to state 265


State 179

  143 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN STATIC assignment_expression . SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_CLOSE  shift, and go to state 266


State 180

  142 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN STATIC type_qualifier_list . assignment_expression SQUARE_BRACKET_CLOSE
  152 type_qualifier_list: type_qualifier_list . type_qualifier

    CONST               shift, and go to state 3
    RESTRICT            shift, and go to state 12
    SIZEOF              shift, and go to state 73
    VOLATILE            shift, and go to state 18
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 267
    type_qualifier             go to state 70


State 181

  146 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN MULTIPLY SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 146 (direct_declarator)


State 182

  137 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN assignment_expression SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 137 (direct_declarator)


State 183

  144 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list STATIC . assignment_expression SQUARE_BRACKET_CLOSE

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 268


State 184

  136 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 136 (direct_declarator)


State 185

   29 unary_operator: MULTIPLY .
  145 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list MULTIPLY . SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_CLOSE  shift, and go to state 269

    $default  reduce using rule 29 (unary_operator)


State 186

  135 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list assignment_expression . SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_CLOSE  shift, and go to state 270


State 187

  141 direct_declarator: direct_declarator ROUND_BRACKET_OPEN identifier_list ROUND_BRACKET_CLOSE .

    $default  reduce using rule 141 (direct_declarator)


State 188

  160 identifier_list: identifier_list COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 271


State 189

  140 direct_declarator: direct_declarator ROUND_BRACKET_OPEN change_table ROUND_BRACKET_CLOSE .

    $default  reduce using rule 140 (direct_declarator)


State 190

  157 parameter_declaration: declaration_specifiers . declarator
  158                      | declaration_specifiers .

    ROUND_BRACKET_OPEN  shift, and go to state 34
    MULTIPLY            shift, and go to state 35
    IDENTIFIER          shift, and go to state 36

    $default  reduce using rule 158 (parameter_declaration)

    declarator         go to state 272
    direct_declarator  go to state 41
    pointer            go to state 42


State 191

  139 direct_declarator: direct_declarator ROUND_BRACKET_OPEN change_table parameter_type_list . ROUND_BRACKET_CLOSE

    ROUND_BRACKET_CLOSE  shift, and go to state 273


State 192

  153 parameter_type_list: parameter_list .
  154                    | parameter_list . COMMA ELLIPSIS
  156 parameter_list: parameter_list . COMMA parameter_declaration

    COMMA  shift, and go to state 274

    $default  reduce using rule 153 (parameter_type_list)


State 193

  155 parameter_list: parameter_declaration .

    $default  reduce using rule 155 (parameter_list)


State 194

   83 constant_expression: conditional_expression .

    $default  reduce using rule 83 (constant_expression)


State 195

  126 enumerator: IDENTIFIER ASSIGN constant_expression .

    $default  reduce using rule 126 (enumerator)


State 196

  119 enum_specifier: ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list COMMA CURLY_BRACKET_CLOSE .

    $default  reduce using rule 119 (enum_specifier)


State 197

  124 enumerator_list: enumerator_list COMMA enumerator .

    $default  reduce using rule 124 (enumerator_list)


State 198

   16 postfix_expression: ROUND_BRACKET_OPEN type_name . ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | ROUND_BRACKET_OPEN type_name . ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE
   27 unary_expression: SIZEOF ROUND_BRACKET_OPEN type_name . ROUND_BRACKET_CLOSE

    ROUND_BRACKET_CLOSE  shift, and go to state 275


State 199

    4 primary_expression: ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE .

    $default  reduce using rule 4 (primary_expression)


State 200

   82 expression: expression COMMA . assignment_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 276


State 201

  116 specifier_qualifier_list_opt: specifier_qualifier_list .

    $default  reduce using rule 116 (specifier_qualifier_list_opt)


State 202

  114 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt .

    $default  reduce using rule 114 (specifier_qualifier_list)


State 203

  115 specifier_qualifier_list: type_qualifier specifier_qualifier_list_opt .

    $default  reduce using rule 115 (specifier_qualifier_list)


State 204

   16 postfix_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE . CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE . CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE
   35 cast_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE . cast_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 277
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression  go to state 89
    constant            go to state 90
    postfix_expression  go to state 91
    unary_expression    go to state 157
    unary_operator      go to state 93
    cast_expression     go to state 278


State 205

  172 designator: SQUARE_BRACKET_OPEN constant_expression . SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_CLOSE  shift, and go to state 279


State 206

  173 designator: DOT IDENTIFIER .

    $default  reduce using rule 173 (designator)


State 207

  163 initializer: CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE .

    $default  reduce using rule 163 (initializer)


State 208

  164 initializer: CURLY_BRACKET_OPEN initializer_list COMMA . CURLY_BRACKET_CLOSE
  166 initializer_list: initializer_list COMMA . designation_opt initializer

    SQUARE_BRACKET_OPEN  shift, and go to state 129
    CURLY_BRACKET_CLOSE  shift, and go to state 280
    DOT                  shift, and go to state 130

    $default  reduce using rule 168 (designation_opt)

    designation_opt  go to state 281
    designation      go to state 133
    designator_list  go to state 134
    designator       go to state 135


State 209

  165 initializer_list: designation_opt initializer .

    $default  reduce using rule 165 (initializer_list)


State 210

  169 designation: designator_list ASSIGN .

    $default  reduce using rule 169 (designation)


State 211

  171 designator_list: designator_list designator .

    $default  reduce using rule 171 (designator_list)


State 212

   16 postfix_expression: ROUND_BRACKET_OPEN type_name . ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | ROUND_BRACKET_OPEN type_name . ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE

    ROUND_BRACKET_CLOSE  shift, and go to state 282


State 213

    9 postfix_expression: postfix_expression SQUARE_BRACKET_OPEN expression . SQUARE_BRACKET_CLOSE
   82 expression: expression . COMMA assignment_expression

    SQUARE_BRACKET_CLOSE  shift, and go to state 283
    COMMA                 shift, and go to state 200


State 214

   10 postfix_expression: postfix_expression ROUND_BRACKET_OPEN ROUND_BRACKET_CLOSE .

    $default  reduce using rule 10 (postfix_expression)


State 215

   11 postfix_expression: postfix_expression ROUND_BRACKET_OPEN argument_expression_list_opt . ROUND_BRACKET_CLOSE

    ROUND_BRACKET_CLOSE  shift, and go to state 284


State 216

   18 argument_expression_list_opt: argument_expression_list .
   21 argument_expression_list: argument_expression_list . COMMA assignment_expression

    COMMA  shift, and go to state 285

    $default  reduce using rule 18 (argument_expression_list_opt)


State 217

   20 argument_expression_list: assignment_expression .

    $default  reduce using rule 20 (argument_expression_list)


State 218

   12 postfix_expression: postfix_expression DOT IDENTIFIER .

    $default  reduce using rule 12 (postfix_expression)


State 219

   13 postfix_expression: postfix_expression ARROW IDENTIFIER .

    $default  reduce using rule 13 (postfix_expression)


State 220

   69 assignment_expression: unary_expression assignment_operator assignment_expression .

    $default  reduce using rule 69 (assignment_expression)


State 221

   37 multiplicative_expression: multiplicative_expression MULTIPLY cast_expression .

    $default  reduce using rule 37 (multiplicative_expression)


State 222

   38 multiplicative_expression: multiplicative_expression DIVIDE cast_expression .

    $default  reduce using rule 38 (multiplicative_expression)


State 223

   39 multiplicative_expression: multiplicative_expression MODULO cast_expression .

    $default  reduce using rule 39 (multiplicative_expression)


State 224

   37 multiplicative_expression: multiplicative_expression . MULTIPLY cast_expression
   38                          | multiplicative_expression . DIVIDE cast_expression
   39                          | multiplicative_expression . MODULO cast_expression
   41 additive_expression: additive_expression PLUS multiplicative_expression .

    MULTIPLY  shift, and go to state 159
    DIVIDE    shift, and go to state 160
    MODULO    shift, and go to state 161

    $default  reduce using rule 41 (additive_expression)


State 225

   37 multiplicative_expression: multiplicative_expression . MULTIPLY cast_expression
   38                          | multiplicative_expression . DIVIDE cast_expression
   39                          | multiplicative_expression . MODULO cast_expression
   42 additive_expression: additive_expression MINUS multiplicative_expression .

    MULTIPLY  shift, and go to state 159
    DIVIDE    shift, and go to state 160
    MODULO    shift, and go to state 161

    $default  reduce using rule 42 (additive_expression)


State 226

   41 additive_expression: additive_expression . PLUS multiplicative_expression
   42                    | additive_expression . MINUS multiplicative_expression
   44 shift_expression: shift_expression LEFT_SHIFT additive_expression .

    PLUS   shift, and go to state 162
    MINUS  shift, and go to state 163

    $default  reduce using rule 44 (shift_expression)


State 227

   41 additive_expression: additive_expression . PLUS multiplicative_expression
   42                    | additive_expression . MINUS multiplicative_expression
   45 shift_expression: shift_expression RIGHT_SHIFT additive_expression .

    PLUS   shift, and go to state 162
    MINUS  shift, and go to state 163

    $default  reduce using rule 45 (shift_expression)


State 228

   44 shift_expression: shift_expression . LEFT_SHIFT additive_expression
   45                 | shift_expression . RIGHT_SHIFT additive_expression
   47 relational_expression: relational_expression LESS_THAN shift_expression .

    LEFT_SHIFT   shift, and go to state 164
    RIGHT_SHIFT  shift, and go to state 165

    $default  reduce using rule 47 (relational_expression)


State 229

   44 shift_expression: shift_expression . LEFT_SHIFT additive_expression
   45                 | shift_expression . RIGHT_SHIFT additive_expression
   48 relational_expression: relational_expression GREATER_THAN shift_expression .

    LEFT_SHIFT   shift, and go to state 164
    RIGHT_SHIFT  shift, and go to state 165

    $default  reduce using rule 48 (relational_expression)


State 230

   44 shift_expression: shift_expression . LEFT_SHIFT additive_expression
   45                 | shift_expression . RIGHT_SHIFT additive_expression
   49 relational_expression: relational_expression LESS_THAN_EQUAL shift_expression .

    LEFT_SHIFT   shift, and go to state 164
    RIGHT_SHIFT  shift, and go to state 165

    $default  reduce using rule 49 (relational_expression)


State 231

   44 shift_expression: shift_expression . LEFT_SHIFT additive_expression
   45                 | shift_expression . RIGHT_SHIFT additive_expression
   50 relational_expression: relational_expression GREATER_THAN_EQUAL shift_expression .

    LEFT_SHIFT   shift, and go to state 164
    RIGHT_SHIFT  shift, and go to state 165

    $default  reduce using rule 50 (relational_expression)


State 232

   47 relational_expression: relational_expression . LESS_THAN shift_expression
   48                      | relational_expression . GREATER_THAN shift_expression
   49                      | relational_expression . LESS_THAN_EQUAL shift_expression
   50                      | relational_expression . GREATER_THAN_EQUAL shift_expression
   52 equality_expression: equality_expression EQUAL relational_expression .

    LESS_THAN           shift, and go to state 166
    GREATER_THAN        shift, and go to state 167
    LESS_THAN_EQUAL     shift, and go to state 168
    GREATER_THAN_EQUAL  shift, and go to state 169

    $default  reduce using rule 52 (equality_expression)


State 233

   47 relational_expression: relational_expression . LESS_THAN shift_expression
   48                      | relational_expression . GREATER_THAN shift_expression
   49                      | relational_expression . LESS_THAN_EQUAL shift_expression
   50                      | relational_expression . GREATER_THAN_EQUAL shift_expression
   53 equality_expression: equality_expression NOT_EQUAL relational_expression .

    LESS_THAN           shift, and go to state 166
    GREATER_THAN        shift, and go to state 167
    LESS_THAN_EQUAL     shift, and go to state 168
    GREATER_THAN_EQUAL  shift, and go to state 169

    $default  reduce using rule 53 (equality_expression)


State 234

   52 equality_expression: equality_expression . EQUAL relational_expression
   53                    | equality_expression . NOT_EQUAL relational_expression
   55 AND_expression: AND_expression BITWISE_AND equality_expression .

    EQUAL      shift, and go to state 170
    NOT_EQUAL  shift, and go to state 171

    $default  reduce using rule 55 (AND_expression)


State 235

   55 AND_expression: AND_expression . BITWISE_AND equality_expression
   57 exclusive_OR_expression: exclusive_OR_expression BITWISE_XOR AND_expression .

    BITWISE_AND  shift, and go to state 172

    $default  reduce using rule 57 (exclusive_OR_expression)


State 236

   57 exclusive_OR_expression: exclusive_OR_expression . BITWISE_XOR AND_expression
   59 inclusive_OR_expression: inclusive_OR_expression BITWISE_OR exclusive_OR_expression .

    BITWISE_XOR  shift, and go to state 173

    $default  reduce using rule 59 (inclusive_OR_expression)


State 237

   61 logical_AND_expression: logical_AND_expression LOGICAL_AND M . inclusive_OR_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 286


State 238

   63 logical_OR_expression: logical_OR_expression LOGICAL_OR M . logical_AND_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 287


State 239

   65 conditional_expression: logical_OR_expression N QUESTION_MARK . M expression N COLON M conditional_expression

    $default  reduce using rule 66 (M)

    M  go to state 288


State 240

  216 jump_statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 289


State 241

  187 labeled_statement: CASE . constant_expression COLON statement

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 194
    constant_expression        go to state 290


State 242

  215 jump_statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 291


State 243

  188 labeled_statement: DEFAULT . COLON statement

    COLON  shift, and go to state 292


State 244

  203 iteration_statement: DO . D M loop_statement M WHILE ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE SEMICOLON
  204                    | DO . D CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE M WHILE ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE SEMICOLON

    $default  reduce using rule 211 (D)

    D  go to state 293


State 245

  205 iteration_statement: FOR . F ROUND_BRACKET_OPEN X change_table declaration M expression_statement M expression N ROUND_BRACKET_CLOSE M loop_statement
  206                    | FOR . F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE M loop_statement
  207                    | FOR . F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE
  208                    | FOR . F ROUND_BRACKET_OPEN X change_table declaration M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    $default  reduce using rule 209 (F)

    F  go to state 294


State 246

  214 jump_statement: GOTO . IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 295


State 247

  198 selection_statement: IF . ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N THEN
  199                    | IF . ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N ELSE M statement

    ROUND_BRACKET_OPEN  shift, and go to state 296


State 248

  217 jump_statement: RETURN . expression SEMICOLON
  218               | RETURN . SEMICOLON

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 297
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 298


State 249

  200 selection_statement: SWITCH . ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE statement

    ROUND_BRACKET_OPEN  shift, and go to state 299


State 250

  201 iteration_statement: WHILE . W ROUND_BRACKET_OPEN X change_table M expression ROUND_BRACKET_CLOSE M loop_statement
  202                    | WHILE . W ROUND_BRACKET_OPEN X change_table M expression ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE

    $default  reduce using rule 210 (W)

    W  go to state 300


State 251

  189 compound_statement: CURLY_BRACKET_OPEN . X change_table block_item_list_opt CURLY_BRACKET_CLOSE

    $default  reduce using rule 212 (X)

    X  go to state 301


State 252

  197 expression_statement: SEMICOLON .

    $default  reduce using rule 197 (expression_statement)


State 253

    1 primary_expression: IDENTIFIER .
  186 labeled_statement: IDENTIFIER . COLON statement

    COLON  shift, and go to state 302

    $default  reduce using rule 1 (primary_expression)


State 254

   82 expression: expression . COMMA assignment_expression
  196 expression_statement: expression . SEMICOLON

    COMMA      shift, and go to state 200
    SEMICOLON  shift, and go to state 303


State 255

  194 block_item: declaration .

    $default  reduce using rule 194 (block_item)


State 256

  195 block_item: statement .

    $default  reduce using rule 195 (block_item)


State 257

  174 statement: labeled_statement .

    $default  reduce using rule 174 (statement)


State 258

  175 statement: compound_statement .

    $default  reduce using rule 175 (statement)


State 259

  223 function_definition: declaration_specifiers declarator declaration_list_opt change_table CURLY_BRACKET_OPEN block_item_list_opt . CURLY_BRACKET_CLOSE

    CURLY_BRACKET_CLOSE  shift, and go to state 304


State 260

  190 block_item_list_opt: block_item_list .
  193 block_item_list: block_item_list . M block_item

    CURLY_BRACKET_CLOSE  reduce using rule 190 (block_item_list_opt)
    $default             reduce using rule 66 (M)

    M  go to state 305


State 261

  192 block_item_list: block_item .

    $default  reduce using rule 192 (block_item_list)


State 262

  176 statement: expression_statement .

    $default  reduce using rule 176 (statement)


State 263

  177 statement: selection_statement .

    $default  reduce using rule 177 (statement)


State 264

  178 statement: iteration_statement .

    $default  reduce using rule 178 (statement)


State 265

  179 statement: jump_statement .

    $default  reduce using rule 179 (statement)


State 266

  143 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN STATIC assignment_expression SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 143 (direct_declarator)


State 267

  142 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN STATIC type_qualifier_list assignment_expression . SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_CLOSE  shift, and go to state 306


State 268

  144 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list STATIC assignment_expression . SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_CLOSE  shift, and go to state 307


State 269

  145 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list MULTIPLY SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 145 (direct_declarator)


State 270

  135 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list assignment_expression SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 135 (direct_declarator)


State 271

  160 identifier_list: identifier_list COMMA IDENTIFIER .

    $default  reduce using rule 160 (identifier_list)


State 272

  157 parameter_declaration: declaration_specifiers declarator .

    $default  reduce using rule 157 (parameter_declaration)


State 273

  139 direct_declarator: direct_declarator ROUND_BRACKET_OPEN change_table parameter_type_list ROUND_BRACKET_CLOSE .

    $default  reduce using rule 139 (direct_declarator)


State 274

  154 parameter_type_list: parameter_list COMMA . ELLIPSIS
  156 parameter_list: parameter_list COMMA . parameter_declaration

    AUTO       shift, and go to state 1
    CHAR       shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOAT      shift, and go to state 7
    INLINE     shift, and go to state 8
    INT        shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOID       shift, and go to state 17
    VOLATILE   shift, and go to state 18
    BOOL       shift, and go to state 19
    COMPLEX    shift, and go to state 20
    IMAGINARY  shift, and go to state 21
    ELLIPSIS   shift, and go to state 308

    declaration_specifiers   go to state 190
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    parameter_declaration    go to state 309


State 275

   16 postfix_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE . CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE . CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE
   27 unary_expression: SIZEOF ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE .

    CURLY_BRACKET_OPEN  shift, and go to state 277

    $default  reduce using rule 27 (unary_expression)


State 276

   82 expression: expression COMMA assignment_expression .

    $default  reduce using rule 82 (expression)


State 277

   16 postfix_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN . initializer_list CURLY_BRACKET_CLOSE
   17                   | ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN . initializer_list COMMA CURLY_BRACKET_CLOSE

    SQUARE_BRACKET_OPEN  shift, and go to state 129
    DOT                  shift, and go to state 130

    $default  reduce using rule 168 (designation_opt)

    initializer_list  go to state 310
    designation_opt   go to state 132
    designation       go to state 133
    designator_list   go to state 134
    designator        go to state 135


State 278

   35 cast_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE cast_expression .

    $default  reduce using rule 35 (cast_expression)


State 279

  172 designator: SQUARE_BRACKET_OPEN constant_expression SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 172 (designator)


State 280

  164 initializer: CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE .

    $default  reduce using rule 164 (initializer)


State 281

  166 initializer_list: initializer_list COMMA designation_opt . initializer

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 75
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 106
    initializer                go to state 311


State 282

   16 postfix_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE . CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE . CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE

    CURLY_BRACKET_OPEN  shift, and go to state 277


State 283

    9 postfix_expression: postfix_expression SQUARE_BRACKET_OPEN expression SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 9 (postfix_expression)


State 284

   11 postfix_expression: postfix_expression ROUND_BRACKET_OPEN argument_expression_list_opt ROUND_BRACKET_CLOSE .

    $default  reduce using rule 11 (postfix_expression)


State 285

   21 argument_expression_list: argument_expression_list COMMA . assignment_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 312


State 286

   59 inclusive_OR_expression: inclusive_OR_expression . BITWISE_OR exclusive_OR_expression
   61 logical_AND_expression: logical_AND_expression LOGICAL_AND M inclusive_OR_expression .

    BITWISE_OR  shift, and go to state 174

    $default  reduce using rule 61 (logical_AND_expression)


State 287

   61 logical_AND_expression: logical_AND_expression . LOGICAL_AND M inclusive_OR_expression
   63 logical_OR_expression: logical_OR_expression LOGICAL_OR M logical_AND_expression .

    LOGICAL_AND  shift, and go to state 175

    $default  reduce using rule 63 (logical_OR_expression)


State 288

   65 conditional_expression: logical_OR_expression N QUESTION_MARK M . expression N COLON M conditional_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 313


State 289

  216 jump_statement: BREAK SEMICOLON .

    $default  reduce using rule 216 (jump_statement)


State 290

  187 labeled_statement: CASE constant_expression . COLON statement

    COLON  shift, and go to state 314


State 291

  215 jump_statement: CONTINUE SEMICOLON .

    $default  reduce using rule 215 (jump_statement)


State 292

  188 labeled_statement: DEFAULT COLON . statement

    BREAK               shift, and go to state 240
    CASE                shift, and go to state 241
    CONTINUE            shift, and go to state 242
    DEFAULT             shift, and go to state 243
    DO                  shift, and go to state 244
    FOR                 shift, and go to state 245
    GOTO                shift, and go to state 246
    IF                  shift, and go to state 247
    RETURN              shift, and go to state 248
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 249
    WHILE               shift, and go to state 250
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 251
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 253

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    statement                  go to state 315
    labeled_statement          go to state 257
    compound_statement         go to state 258
    expression_statement       go to state 262
    selection_statement        go to state 263
    iteration_statement        go to state 264
    jump_statement             go to state 265


State 293

  203 iteration_statement: DO D . M loop_statement M WHILE ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE SEMICOLON
  204                    | DO D . CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE M WHILE ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE SEMICOLON

    CURLY_BRACKET_OPEN  shift, and go to state 316

    CURLY_BRACKET_OPEN  [reduce using rule 66 (M)]
    $default            reduce using rule 66 (M)

    M  go to state 317


State 294

  205 iteration_statement: FOR F . ROUND_BRACKET_OPEN X change_table declaration M expression_statement M expression N ROUND_BRACKET_CLOSE M loop_statement
  206                    | FOR F . ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE M loop_statement
  207                    | FOR F . ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE
  208                    | FOR F . ROUND_BRACKET_OPEN X change_table declaration M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    ROUND_BRACKET_OPEN  shift, and go to state 318


State 295

  214 jump_statement: GOTO IDENTIFIER . SEMICOLON

    SEMICOLON  shift, and go to state 319


State 296

  198 selection_statement: IF ROUND_BRACKET_OPEN . expression N ROUND_BRACKET_CLOSE M statement N THEN
  199                    | IF ROUND_BRACKET_OPEN . expression N ROUND_BRACKET_CLOSE M statement N ELSE M statement

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 320


State 297

  218 jump_statement: RETURN SEMICOLON .

    $default  reduce using rule 218 (jump_statement)


State 298

   82 expression: expression . COMMA assignment_expression
  217 jump_statement: RETURN expression . SEMICOLON

    COMMA      shift, and go to state 200
    SEMICOLON  shift, and go to state 321


State 299

  200 selection_statement: SWITCH ROUND_BRACKET_OPEN . expression ROUND_BRACKET_CLOSE statement

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 322


State 300

  201 iteration_statement: WHILE W . ROUND_BRACKET_OPEN X change_table M expression ROUND_BRACKET_CLOSE M loop_statement
  202                    | WHILE W . ROUND_BRACKET_OPEN X change_table M expression ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE

    ROUND_BRACKET_OPEN  shift, and go to state 323


State 301

  189 compound_statement: CURLY_BRACKET_OPEN X . change_table block_item_list_opt CURLY_BRACKET_CLOSE

    $default  reduce using rule 213 (change_table)

    change_table  go to state 324


State 302

  186 labeled_statement: IDENTIFIER COLON . statement

    BREAK               shift, and go to state 240
    CASE                shift, and go to state 241
    CONTINUE            shift, and go to state 242
    DEFAULT             shift, and go to state 243
    DO                  shift, and go to state 244
    FOR                 shift, and go to state 245
    GOTO                shift, and go to state 246
    IF                  shift, and go to state 247
    RETURN              shift, and go to state 248
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 249
    WHILE               shift, and go to state 250
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 251
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 253

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    statement                  go to state 325
    labeled_statement          go to state 257
    compound_statement         go to state 258
    expression_statement       go to state 262
    selection_statement        go to state 263
    iteration_statement        go to state 264
    jump_statement             go to state 265


State 303

  196 expression_statement: expression SEMICOLON .

    $default  reduce using rule 196 (expression_statement)


State 304

  223 function_definition: declaration_specifiers declarator declaration_list_opt change_table CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE .

    $default  reduce using rule 223 (function_definition)


State 305

  193 block_item_list: block_item_list M . block_item

    AUTO                shift, and go to state 1
    BREAK               shift, and go to state 240
    CASE                shift, and go to state 241
    CHAR                shift, and go to state 2
    CONST               shift, and go to state 3
    CONTINUE            shift, and go to state 242
    DEFAULT             shift, and go to state 243
    DO                  shift, and go to state 244
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FLOAT               shift, and go to state 7
    FOR                 shift, and go to state 245
    GOTO                shift, and go to state 246
    IF                  shift, and go to state 247
    INLINE              shift, and go to state 8
    INT                 shift, and go to state 9
    LONG                shift, and go to state 10
    REGISTER            shift, and go to state 11
    RESTRICT            shift, and go to state 12
    RETURN              shift, and go to state 248
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 73
    STATIC              shift, and go to state 15
    SWITCH              shift, and go to state 249
    UNSIGNED            shift, and go to state 16
    VOID                shift, and go to state 17
    VOLATILE            shift, and go to state 18
    WHILE               shift, and go to state 250
    BOOL                shift, and go to state 19
    COMPLEX             shift, and go to state 20
    IMAGINARY           shift, and go to state 21
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 251
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 253

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    declaration                go to state 255
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 256
    labeled_statement          go to state 257
    compound_statement         go to state 258
    block_item                 go to state 326
    expression_statement       go to state 262
    selection_statement        go to state 263
    iteration_statement        go to state 264
    jump_statement             go to state 265


State 306

  142 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN STATIC type_qualifier_list assignment_expression SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 142 (direct_declarator)


State 307

  144 direct_declarator: direct_declarator SQUARE_BRACKET_OPEN type_qualifier_list STATIC assignment_expression SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 144 (direct_declarator)


State 308

  154 parameter_type_list: parameter_list COMMA ELLIPSIS .

    $default  reduce using rule 154 (parameter_type_list)


State 309

  156 parameter_list: parameter_list COMMA parameter_declaration .

    $default  reduce using rule 156 (parameter_list)


State 310

   16 postfix_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list . CURLY_BRACKET_CLOSE
   17                   | ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list . COMMA CURLY_BRACKET_CLOSE
  166 initializer_list: initializer_list . COMMA designation_opt initializer

    CURLY_BRACKET_CLOSE  shift, and go to state 327
    COMMA                shift, and go to state 328


State 311

  166 initializer_list: initializer_list COMMA designation_opt initializer .

    $default  reduce using rule 166 (initializer_list)


State 312

   21 argument_expression_list: argument_expression_list COMMA assignment_expression .

    $default  reduce using rule 21 (argument_expression_list)


State 313

   65 conditional_expression: logical_OR_expression N QUESTION_MARK M expression . N COLON M conditional_expression
   82 expression: expression . COMMA assignment_expression

    COMMA  shift, and go to state 200

    $default  reduce using rule 67 (N)

    N  go to state 329


State 314

  187 labeled_statement: CASE constant_expression COLON . statement

    BREAK               shift, and go to state 240
    CASE                shift, and go to state 241
    CONTINUE            shift, and go to state 242
    DEFAULT             shift, and go to state 243
    DO                  shift, and go to state 244
    FOR                 shift, and go to state 245
    GOTO                shift, and go to state 246
    IF                  shift, and go to state 247
    RETURN              shift, and go to state 248
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 249
    WHILE               shift, and go to state 250
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 251
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 253

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    statement                  go to state 330
    labeled_statement          go to state 257
    compound_statement         go to state 258
    expression_statement       go to state 262
    selection_statement        go to state 263
    iteration_statement        go to state 264
    jump_statement             go to state 265


State 315

  188 labeled_statement: DEFAULT COLON statement .

    $default  reduce using rule 188 (labeled_statement)


State 316

  204 iteration_statement: DO D CURLY_BRACKET_OPEN . M block_item_list_opt CURLY_BRACKET_CLOSE M WHILE ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE SEMICOLON

    $default  reduce using rule 66 (M)

    M  go to state 331


State 317

  203 iteration_statement: DO D M . loop_statement M WHILE ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE SEMICOLON

    BREAK               shift, and go to state 240
    CASE                shift, and go to state 241
    CONTINUE            shift, and go to state 242
    DEFAULT             shift, and go to state 243
    DO                  shift, and go to state 244
    FOR                 shift, and go to state 245
    GOTO                shift, and go to state 246
    IF                  shift, and go to state 247
    RETURN              shift, and go to state 248
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 249
    WHILE               shift, and go to state 250
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 251
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 253

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    loop_statement             go to state 332
    labeled_statement          go to state 333
    compound_statement         go to state 334
    expression_statement       go to state 335
    selection_statement        go to state 336
    iteration_statement        go to state 337
    jump_statement             go to state 338


State 318

  205 iteration_statement: FOR F ROUND_BRACKET_OPEN . X change_table declaration M expression_statement M expression N ROUND_BRACKET_CLOSE M loop_statement
  206                    | FOR F ROUND_BRACKET_OPEN . X change_table expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE M loop_statement
  207                    | FOR F ROUND_BRACKET_OPEN . X change_table expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE
  208                    | FOR F ROUND_BRACKET_OPEN . X change_table declaration M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    $default  reduce using rule 212 (X)

    X  go to state 339


State 319

  214 jump_statement: GOTO IDENTIFIER SEMICOLON .

    $default  reduce using rule 214 (jump_statement)


State 320

   82 expression: expression . COMMA assignment_expression
  198 selection_statement: IF ROUND_BRACKET_OPEN expression . N ROUND_BRACKET_CLOSE M statement N THEN
  199                    | IF ROUND_BRACKET_OPEN expression . N ROUND_BRACKET_CLOSE M statement N ELSE M statement

    COMMA  shift, and go to state 200

    $default  reduce using rule 67 (N)

    N  go to state 340


State 321

  217 jump_statement: RETURN expression SEMICOLON .

    $default  reduce using rule 217 (jump_statement)


State 322

   82 expression: expression . COMMA assignment_expression
  200 selection_statement: SWITCH ROUND_BRACKET_OPEN expression . ROUND_BRACKET_CLOSE statement

    ROUND_BRACKET_CLOSE  shift, and go to state 341
    COMMA                shift, and go to state 200


State 323

  201 iteration_statement: WHILE W ROUND_BRACKET_OPEN . X change_table M expression ROUND_BRACKET_CLOSE M loop_statement
  202                    | WHILE W ROUND_BRACKET_OPEN . X change_table M expression ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE

    $default  reduce using rule 212 (X)

    X  go to state 342


State 324

  189 compound_statement: CURLY_BRACKET_OPEN X change_table . block_item_list_opt CURLY_BRACKET_CLOSE

    AUTO                shift, and go to state 1
    BREAK               shift, and go to state 240
    CASE                shift, and go to state 241
    CHAR                shift, and go to state 2
    CONST               shift, and go to state 3
    CONTINUE            shift, and go to state 242
    DEFAULT             shift, and go to state 243
    DO                  shift, and go to state 244
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FLOAT               shift, and go to state 7
    FOR                 shift, and go to state 245
    GOTO                shift, and go to state 246
    IF                  shift, and go to state 247
    INLINE              shift, and go to state 8
    INT                 shift, and go to state 9
    LONG                shift, and go to state 10
    REGISTER            shift, and go to state 11
    RESTRICT            shift, and go to state 12
    RETURN              shift, and go to state 248
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 73
    STATIC              shift, and go to state 15
    SWITCH              shift, and go to state 249
    UNSIGNED            shift, and go to state 16
    VOID                shift, and go to state 17
    VOLATILE            shift, and go to state 18
    WHILE               shift, and go to state 250
    BOOL                shift, and go to state 19
    COMPLEX             shift, and go to state 20
    IMAGINARY           shift, and go to state 21
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 251
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 253

    $default  reduce using rule 191 (block_item_list_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    declaration                go to state 255
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 256
    labeled_statement          go to state 257
    compound_statement         go to state 258
    block_item_list_opt        go to state 343
    block_item_list            go to state 260
    block_item                 go to state 261
    expression_statement       go to state 262
    selection_statement        go to state 263
    iteration_statement        go to state 264
    jump_statement             go to state 265


State 325

  186 labeled_statement: IDENTIFIER COLON statement .

    $default  reduce using rule 186 (labeled_statement)


State 326

  193 block_item_list: block_item_list M block_item .

    $default  reduce using rule 193 (block_item_list)


State 327

   16 postfix_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE .

    $default  reduce using rule 16 (postfix_expression)


State 328

   17 postfix_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA . CURLY_BRACKET_CLOSE
  166 initializer_list: initializer_list COMMA . designation_opt initializer

    SQUARE_BRACKET_OPEN  shift, and go to state 129
    CURLY_BRACKET_CLOSE  shift, and go to state 344
    DOT                  shift, and go to state 130

    $default  reduce using rule 168 (designation_opt)

    designation_opt  go to state 281
    designation      go to state 133
    designator_list  go to state 134
    designator       go to state 135


State 329

   65 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N . COLON M conditional_expression

    COLON  shift, and go to state 345


State 330

  187 labeled_statement: CASE constant_expression COLON statement .

    $default  reduce using rule 187 (labeled_statement)


State 331

  204 iteration_statement: DO D CURLY_BRACKET_OPEN M . block_item_list_opt CURLY_BRACKET_CLOSE M WHILE ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE SEMICOLON

    AUTO                shift, and go to state 1
    BREAK               shift, and go to state 240
    CASE                shift, and go to state 241
    CHAR                shift, and go to state 2
    CONST               shift, and go to state 3
    CONTINUE            shift, and go to state 242
    DEFAULT             shift, and go to state 243
    DO                  shift, and go to state 244
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FLOAT               shift, and go to state 7
    FOR                 shift, and go to state 245
    GOTO                shift, and go to state 246
    IF                  shift, and go to state 247
    INLINE              shift, and go to state 8
    INT                 shift, and go to state 9
    LONG                shift, and go to state 10
    REGISTER            shift, and go to state 11
    RESTRICT            shift, and go to state 12
    RETURN              shift, and go to state 248
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 73
    STATIC              shift, and go to state 15
    SWITCH              shift, and go to state 249
    UNSIGNED            shift, and go to state 16
    VOID                shift, and go to state 17
    VOLATILE            shift, and go to state 18
    WHILE               shift, and go to state 250
    BOOL                shift, and go to state 19
    COMPLEX             shift, and go to state 20
    IMAGINARY           shift, and go to state 21
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 251
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 253

    $default  reduce using rule 191 (block_item_list_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    declaration                go to state 255
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 256
    labeled_statement          go to state 257
    compound_statement         go to state 258
    block_item_list_opt        go to state 346
    block_item_list            go to state 260
    block_item                 go to state 261
    expression_statement       go to state 262
    selection_statement        go to state 263
    iteration_statement        go to state 264
    jump_statement             go to state 265


State 332

  203 iteration_statement: DO D M loop_statement . M WHILE ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE SEMICOLON

    $default  reduce using rule 66 (M)

    M  go to state 347


State 333

  180 loop_statement: labeled_statement .

    $default  reduce using rule 180 (loop_statement)


State 334

  181 loop_statement: compound_statement .

    $default  reduce using rule 181 (loop_statement)


State 335

  182 loop_statement: expression_statement .

    $default  reduce using rule 182 (loop_statement)


State 336

  183 loop_statement: selection_statement .

    $default  reduce using rule 183 (loop_statement)


State 337

  184 loop_statement: iteration_statement .

    $default  reduce using rule 184 (loop_statement)


State 338

  185 loop_statement: jump_statement .

    $default  reduce using rule 185 (loop_statement)


State 339

  205 iteration_statement: FOR F ROUND_BRACKET_OPEN X . change_table declaration M expression_statement M expression N ROUND_BRACKET_CLOSE M loop_statement
  206                    | FOR F ROUND_BRACKET_OPEN X . change_table expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE M loop_statement
  207                    | FOR F ROUND_BRACKET_OPEN X . change_table expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE
  208                    | FOR F ROUND_BRACKET_OPEN X . change_table declaration M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    $default  reduce using rule 213 (change_table)

    change_table  go to state 348


State 340

  198 selection_statement: IF ROUND_BRACKET_OPEN expression N . ROUND_BRACKET_CLOSE M statement N THEN
  199                    | IF ROUND_BRACKET_OPEN expression N . ROUND_BRACKET_CLOSE M statement N ELSE M statement

    ROUND_BRACKET_CLOSE  shift, and go to state 349


State 341

  200 selection_statement: SWITCH ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE . statement

    BREAK               shift, and go to state 240
    CASE                shift, and go to state 241
    CONTINUE            shift, and go to state 242
    DEFAULT             shift, and go to state 243
    DO                  shift, and go to state 244
    FOR                 shift, and go to state 245
    GOTO                shift, and go to state 246
    IF                  shift, and go to state 247
    RETURN              shift, and go to state 248
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 249
    WHILE               shift, and go to state 250
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 251
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 253

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    statement                  go to state 350
    labeled_statement          go to state 257
    compound_statement         go to state 258
    expression_statement       go to state 262
    selection_statement        go to state 263
    iteration_statement        go to state 264
    jump_statement             go to state 265


State 342

  201 iteration_statement: WHILE W ROUND_BRACKET_OPEN X . change_table M expression ROUND_BRACKET_CLOSE M loop_statement
  202                    | WHILE W ROUND_BRACKET_OPEN X . change_table M expression ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE

    $default  reduce using rule 213 (change_table)

    change_table  go to state 351


State 343

  189 compound_statement: CURLY_BRACKET_OPEN X change_table block_item_list_opt . CURLY_BRACKET_CLOSE

    CURLY_BRACKET_CLOSE  shift, and go to state 352


State 344

   17 postfix_expression: ROUND_BRACKET_OPEN type_name ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE .

    $default  reduce using rule 17 (postfix_expression)


State 345

   65 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON . M conditional_expression

    $default  reduce using rule 66 (M)

    M  go to state 353


State 346

  204 iteration_statement: DO D CURLY_BRACKET_OPEN M block_item_list_opt . CURLY_BRACKET_CLOSE M WHILE ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE SEMICOLON

    CURLY_BRACKET_CLOSE  shift, and go to state 354


State 347

  203 iteration_statement: DO D M loop_statement M . WHILE ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE SEMICOLON

    WHILE  shift, and go to state 355


State 348

  205 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table . declaration M expression_statement M expression N ROUND_BRACKET_CLOSE M loop_statement
  206                    | FOR F ROUND_BRACKET_OPEN X change_table . expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE M loop_statement
  207                    | FOR F ROUND_BRACKET_OPEN X change_table . expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE
  208                    | FOR F ROUND_BRACKET_OPEN X change_table . declaration M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    AUTO                shift, and go to state 1
    CHAR                shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FLOAT               shift, and go to state 7
    INLINE              shift, and go to state 8
    INT                 shift, and go to state 9
    LONG                shift, and go to state 10
    REGISTER            shift, and go to state 11
    RESTRICT            shift, and go to state 12
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 73
    STATIC              shift, and go to state 15
    UNSIGNED            shift, and go to state 16
    VOID                shift, and go to state 17
    VOLATILE            shift, and go to state 18
    BOOL                shift, and go to state 19
    COMPLEX             shift, and go to state 20
    IMAGINARY           shift, and go to state 21
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    declaration                go to state 356
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    expression_statement       go to state 357


State 349

  198 selection_statement: IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE . M statement N THEN
  199                    | IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE . M statement N ELSE M statement

    $default  reduce using rule 66 (M)

    M  go to state 358


State 350

  200 selection_statement: SWITCH ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE statement .

    $default  reduce using rule 200 (selection_statement)


State 351

  201 iteration_statement: WHILE W ROUND_BRACKET_OPEN X change_table . M expression ROUND_BRACKET_CLOSE M loop_statement
  202                    | WHILE W ROUND_BRACKET_OPEN X change_table . M expression ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE

    $default  reduce using rule 66 (M)

    M  go to state 359


State 352

  189 compound_statement: CURLY_BRACKET_OPEN X change_table block_item_list_opt CURLY_BRACKET_CLOSE .

    $default  reduce using rule 189 (compound_statement)


State 353

   65 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON M . conditional_expression

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 157
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 360


State 354

  204 iteration_statement: DO D CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE . M WHILE ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE SEMICOLON

    $default  reduce using rule 66 (M)

    M  go to state 361


State 355

  203 iteration_statement: DO D M loop_statement M WHILE . ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE SEMICOLON

    ROUND_BRACKET_OPEN  shift, and go to state 362


State 356

  205 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table declaration . M expression_statement M expression N ROUND_BRACKET_CLOSE M loop_statement
  208                    | FOR F ROUND_BRACKET_OPEN X change_table declaration . M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    $default  reduce using rule 66 (M)

    M  go to state 363


State 357

  206 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table expression_statement . M expression_statement M expression N ROUND_BRACKET_CLOSE M loop_statement
  207                    | FOR F ROUND_BRACKET_OPEN X change_table expression_statement . M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    $default  reduce using rule 66 (M)

    M  go to state 364


State 358

  198 selection_statement: IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M . statement N THEN
  199                    | IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M . statement N ELSE M statement

    BREAK               shift, and go to state 240
    CASE                shift, and go to state 241
    CONTINUE            shift, and go to state 242
    DEFAULT             shift, and go to state 243
    DO                  shift, and go to state 244
    FOR                 shift, and go to state 245
    GOTO                shift, and go to state 246
    IF                  shift, and go to state 247
    RETURN              shift, and go to state 248
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 249
    WHILE               shift, and go to state 250
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 251
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 253

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    statement                  go to state 365
    labeled_statement          go to state 257
    compound_statement         go to state 258
    expression_statement       go to state 262
    selection_statement        go to state 263
    iteration_statement        go to state 264
    jump_statement             go to state 265


State 359

  201 iteration_statement: WHILE W ROUND_BRACKET_OPEN X change_table M . expression ROUND_BRACKET_CLOSE M loop_statement
  202                    | WHILE W ROUND_BRACKET_OPEN X change_table M . expression ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 366


State 360

   65 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression .

    $default  reduce using rule 65 (conditional_expression)


State 361

  204 iteration_statement: DO D CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE M . WHILE ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE SEMICOLON

    WHILE  shift, and go to state 367


State 362

  203 iteration_statement: DO D M loop_statement M WHILE ROUND_BRACKET_OPEN . expression ROUND_BRACKET_CLOSE SEMICOLON

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 368


State 363

  205 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table declaration M . expression_statement M expression N ROUND_BRACKET_CLOSE M loop_statement
  208                    | FOR F ROUND_BRACKET_OPEN X change_table declaration M . expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    expression_statement       go to state 369


State 364

  206 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table expression_statement M . expression_statement M expression N ROUND_BRACKET_CLOSE M loop_statement
  207                    | FOR F ROUND_BRACKET_OPEN X change_table expression_statement M . expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    expression_statement       go to state 370


State 365

  198 selection_statement: IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement . N THEN
  199                    | IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement . N ELSE M statement

    $default  reduce using rule 67 (N)

    N  go to state 371


State 366

   82 expression: expression . COMMA assignment_expression
  201 iteration_statement: WHILE W ROUND_BRACKET_OPEN X change_table M expression . ROUND_BRACKET_CLOSE M loop_statement
  202                    | WHILE W ROUND_BRACKET_OPEN X change_table M expression . ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE

    ROUND_BRACKET_CLOSE  shift, and go to state 372
    COMMA                shift, and go to state 200


State 367

  204 iteration_statement: DO D CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE M WHILE . ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE SEMICOLON

    ROUND_BRACKET_OPEN  shift, and go to state 373


State 368

   82 expression: expression . COMMA assignment_expression
  203 iteration_statement: DO D M loop_statement M WHILE ROUND_BRACKET_OPEN expression . ROUND_BRACKET_CLOSE SEMICOLON

    ROUND_BRACKET_CLOSE  shift, and go to state 374
    COMMA                shift, and go to state 200


State 369

  205 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table declaration M expression_statement . M expression N ROUND_BRACKET_CLOSE M loop_statement
  208                    | FOR F ROUND_BRACKET_OPEN X change_table declaration M expression_statement . M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    $default  reduce using rule 66 (M)

    M  go to state 375


State 370

  206 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement . M expression N ROUND_BRACKET_CLOSE M loop_statement
  207                    | FOR F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement . M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    $default  reduce using rule 66 (M)

    M  go to state 376


State 371

  198 selection_statement: IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N . THEN
  199                    | IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N . ELSE M statement

    ELSE  shift, and go to state 377
    THEN  shift, and go to state 378


State 372

  201 iteration_statement: WHILE W ROUND_BRACKET_OPEN X change_table M expression ROUND_BRACKET_CLOSE . M loop_statement
  202                    | WHILE W ROUND_BRACKET_OPEN X change_table M expression ROUND_BRACKET_CLOSE . CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE

    CURLY_BRACKET_OPEN  shift, and go to state 379

    CURLY_BRACKET_OPEN  [reduce using rule 66 (M)]
    $default            reduce using rule 66 (M)

    M  go to state 380


State 373

  204 iteration_statement: DO D CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE M WHILE ROUND_BRACKET_OPEN . expression ROUND_BRACKET_CLOSE SEMICOLON

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 381


State 374

  203 iteration_statement: DO D M loop_statement M WHILE ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE . SEMICOLON

    SEMICOLON  shift, and go to state 382


State 375

  205 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table declaration M expression_statement M . expression N ROUND_BRACKET_CLOSE M loop_statement
  208                    | FOR F ROUND_BRACKET_OPEN X change_table declaration M expression_statement M . expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 383


State 376

  206 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M . expression N ROUND_BRACKET_CLOSE M loop_statement
  207                    | FOR F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M . expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    SIZEOF              shift, and go to state 73
    ROUND_BRACKET_OPEN  shift, and go to state 74
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 88

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 384


State 377

  199 selection_statement: IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N ELSE . M statement

    $default  reduce using rule 66 (M)

    M  go to state 385


State 378

  198 selection_statement: IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N THEN .

    $default  reduce using rule 198 (selection_statement)


State 379

  202 iteration_statement: WHILE W ROUND_BRACKET_OPEN X change_table M expression ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN . M block_item_list_opt CURLY_BRACKET_CLOSE

    $default  reduce using rule 66 (M)

    M  go to state 386


State 380

  201 iteration_statement: WHILE W ROUND_BRACKET_OPEN X change_table M expression ROUND_BRACKET_CLOSE M . loop_statement

    BREAK               shift, and go to state 240
    CASE                shift, and go to state 241
    CONTINUE            shift, and go to state 242
    DEFAULT             shift, and go to state 243
    DO                  shift, and go to state 244
    FOR                 shift, and go to state 245
    GOTO                shift, and go to state 246
    IF                  shift, and go to state 247
    RETURN              shift, and go to state 248
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 249
    WHILE               shift, and go to state 250
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 251
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 253

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    loop_statement             go to state 387
    labeled_statement          go to state 333
    compound_statement         go to state 334
    expression_statement       go to state 335
    selection_statement        go to state 336
    iteration_statement        go to state 337
    jump_statement             go to state 338


State 381

   82 expression: expression . COMMA assignment_expression
  204 iteration_statement: DO D CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE M WHILE ROUND_BRACKET_OPEN expression . ROUND_BRACKET_CLOSE SEMICOLON

    ROUND_BRACKET_CLOSE  shift, and go to state 388
    COMMA                shift, and go to state 200


State 382

  203 iteration_statement: DO D M loop_statement M WHILE ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE SEMICOLON .

    $default  reduce using rule 203 (iteration_statement)


State 383

   82 expression: expression . COMMA assignment_expression
  205 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table declaration M expression_statement M expression . N ROUND_BRACKET_CLOSE M loop_statement
  208                    | FOR F ROUND_BRACKET_OPEN X change_table declaration M expression_statement M expression . N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    COMMA  shift, and go to state 200

    $default  reduce using rule 67 (N)

    N  go to state 389


State 384

   82 expression: expression . COMMA assignment_expression
  206 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M expression . N ROUND_BRACKET_CLOSE M loop_statement
  207                    | FOR F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M expression . N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    COMMA  shift, and go to state 200

    $default  reduce using rule 67 (N)

    N  go to state 390


State 385

  199 selection_statement: IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N ELSE M . statement

    BREAK               shift, and go to state 240
    CASE                shift, and go to state 241
    CONTINUE            shift, and go to state 242
    DEFAULT             shift, and go to state 243
    DO                  shift, and go to state 244
    FOR                 shift, and go to state 245
    GOTO                shift, and go to state 246
    IF                  shift, and go to state 247
    RETURN              shift, and go to state 248
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 249
    WHILE               shift, and go to state 250
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 251
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 253

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    statement                  go to state 391
    labeled_statement          go to state 257
    compound_statement         go to state 258
    expression_statement       go to state 262
    selection_statement        go to state 263
    iteration_statement        go to state 264
    jump_statement             go to state 265


State 386

  202 iteration_statement: WHILE W ROUND_BRACKET_OPEN X change_table M expression ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN M . block_item_list_opt CURLY_BRACKET_CLOSE

    AUTO                shift, and go to state 1
    BREAK               shift, and go to state 240
    CASE                shift, and go to state 241
    CHAR                shift, and go to state 2
    CONST               shift, and go to state 3
    CONTINUE            shift, and go to state 242
    DEFAULT             shift, and go to state 243
    DO                  shift, and go to state 244
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FLOAT               shift, and go to state 7
    FOR                 shift, and go to state 245
    GOTO                shift, and go to state 246
    IF                  shift, and go to state 247
    INLINE              shift, and go to state 8
    INT                 shift, and go to state 9
    LONG                shift, and go to state 10
    REGISTER            shift, and go to state 11
    RESTRICT            shift, and go to state 12
    RETURN              shift, and go to state 248
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 73
    STATIC              shift, and go to state 15
    SWITCH              shift, and go to state 249
    UNSIGNED            shift, and go to state 16
    VOID                shift, and go to state 17
    VOLATILE            shift, and go to state 18
    WHILE               shift, and go to state 250
    BOOL                shift, and go to state 19
    COMPLEX             shift, and go to state 20
    IMAGINARY           shift, and go to state 21
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 251
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 253

    $default  reduce using rule 191 (block_item_list_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    declaration                go to state 255
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 256
    labeled_statement          go to state 257
    compound_statement         go to state 258
    block_item_list_opt        go to state 392
    block_item_list            go to state 260
    block_item                 go to state 261
    expression_statement       go to state 262
    selection_statement        go to state 263
    iteration_statement        go to state 264
    jump_statement             go to state 265


State 387

  201 iteration_statement: WHILE W ROUND_BRACKET_OPEN X change_table M expression ROUND_BRACKET_CLOSE M loop_statement .

    $default  reduce using rule 201 (iteration_statement)


State 388

  204 iteration_statement: DO D CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE M WHILE ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE . SEMICOLON

    SEMICOLON  shift, and go to state 393


State 389

  205 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table declaration M expression_statement M expression N . ROUND_BRACKET_CLOSE M loop_statement
  208                    | FOR F ROUND_BRACKET_OPEN X change_table declaration M expression_statement M expression N . ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    ROUND_BRACKET_CLOSE  shift, and go to state 394


State 390

  206 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M expression N . ROUND_BRACKET_CLOSE M loop_statement
  207                    | FOR F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M expression N . ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    ROUND_BRACKET_CLOSE  shift, and go to state 395


State 391

  199 selection_statement: IF ROUND_BRACKET_OPEN expression N ROUND_BRACKET_CLOSE M statement N ELSE M statement .

    $default  reduce using rule 199 (selection_statement)


State 392

  202 iteration_statement: WHILE W ROUND_BRACKET_OPEN X change_table M expression ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN M block_item_list_opt . CURLY_BRACKET_CLOSE

    CURLY_BRACKET_CLOSE  shift, and go to state 396


State 393

  204 iteration_statement: DO D CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE M WHILE ROUND_BRACKET_OPEN expression ROUND_BRACKET_CLOSE SEMICOLON .

    $default  reduce using rule 204 (iteration_statement)


State 394

  205 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table declaration M expression_statement M expression N ROUND_BRACKET_CLOSE . M loop_statement
  208                    | FOR F ROUND_BRACKET_OPEN X change_table declaration M expression_statement M expression N ROUND_BRACKET_CLOSE . M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    $default  reduce using rule 66 (M)

    M  go to state 397


State 395

  206 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE . M loop_statement
  207                    | FOR F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE . M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    $default  reduce using rule 66 (M)

    M  go to state 398


State 396

  202 iteration_statement: WHILE W ROUND_BRACKET_OPEN X change_table M expression ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN M block_item_list_opt CURLY_BRACKET_CLOSE .

    $default  reduce using rule 202 (iteration_statement)


State 397

  205 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table declaration M expression_statement M expression N ROUND_BRACKET_CLOSE M . loop_statement
  208                    | FOR F ROUND_BRACKET_OPEN X change_table declaration M expression_statement M expression N ROUND_BRACKET_CLOSE M . CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    BREAK               shift, and go to state 240
    CASE                shift, and go to state 241
    CONTINUE            shift, and go to state 242
    DEFAULT             shift, and go to state 243
    DO                  shift, and go to state 244
    FOR                 shift, and go to state 245
    GOTO                shift, and go to state 246
    IF                  shift, and go to state 247
    RETURN              shift, and go to state 248
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 249
    WHILE               shift, and go to state 250
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 399
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 253

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    loop_statement             go to state 400
    labeled_statement          go to state 333
    compound_statement         go to state 334
    expression_statement       go to state 335
    selection_statement        go to state 336
    iteration_statement        go to state 337
    jump_statement             go to state 338


State 398

  206 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE M . loop_statement
  207                    | FOR F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE M . CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE

    BREAK               shift, and go to state 240
    CASE                shift, and go to state 241
    CONTINUE            shift, and go to state 242
    DEFAULT             shift, and go to state 243
    DO                  shift, and go to state 244
    FOR                 shift, and go to state 245
    GOTO                shift, and go to state 246
    IF                  shift, and go to state 247
    RETURN              shift, and go to state 248
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 249
    WHILE               shift, and go to state 250
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 401
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 253

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    loop_statement             go to state 402
    labeled_statement          go to state 333
    compound_statement         go to state 334
    expression_statement       go to state 335
    selection_statement        go to state 336
    iteration_statement        go to state 337
    jump_statement             go to state 338


State 399

  189 compound_statement: CURLY_BRACKET_OPEN . X change_table block_item_list_opt CURLY_BRACKET_CLOSE
  208 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table declaration M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN . block_item_list_opt CURLY_BRACKET_CLOSE

    AUTO                shift, and go to state 1
    BREAK               shift, and go to state 240
    CASE                shift, and go to state 241
    CHAR                shift, and go to state 2
    CONST               shift, and go to state 3
    CONTINUE            shift, and go to state 242
    DEFAULT             shift, and go to state 243
    DO                  shift, and go to state 244
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FLOAT               shift, and go to state 7
    FOR                 shift, and go to state 245
    GOTO                shift, and go to state 246
    IF                  shift, and go to state 247
    INLINE              shift, and go to state 8
    INT                 shift, and go to state 9
    LONG                shift, and go to state 10
    REGISTER            shift, and go to state 11
    RESTRICT            shift, and go to state 12
    RETURN              shift, and go to state 248
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 73
    STATIC              shift, and go to state 15
    SWITCH              shift, and go to state 249
    UNSIGNED            shift, and go to state 16
    VOID                shift, and go to state 17
    VOLATILE            shift, and go to state 18
    WHILE               shift, and go to state 250
    BOOL                shift, and go to state 19
    COMPLEX             shift, and go to state 20
    IMAGINARY           shift, and go to state 21
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 251
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 253

    AUTO                 [reduce using rule 212 (X)]
    BREAK                [reduce using rule 212 (X)]
    CASE                 [reduce using rule 212 (X)]
    CHAR                 [reduce using rule 212 (X)]
    CONST                [reduce using rule 212 (X)]
    CONTINUE             [reduce using rule 212 (X)]
    DEFAULT              [reduce using rule 212 (X)]
    DO                   [reduce using rule 212 (X)]
    DOUBLE               [reduce using rule 212 (X)]
    ENUM                 [reduce using rule 212 (X)]
    EXTERN               [reduce using rule 212 (X)]
    FLOAT                [reduce using rule 212 (X)]
    FOR                  [reduce using rule 212 (X)]
    GOTO                 [reduce using rule 212 (X)]
    IF                   [reduce using rule 212 (X)]
    INLINE               [reduce using rule 212 (X)]
    INT                  [reduce using rule 212 (X)]
    LONG                 [reduce using rule 212 (X)]
    REGISTER             [reduce using rule 212 (X)]
    RESTRICT             [reduce using rule 212 (X)]
    RETURN               [reduce using rule 212 (X)]
    SHORT                [reduce using rule 212 (X)]
    SIGNED               [reduce using rule 212 (X)]
    SIZEOF               [reduce using rule 212 (X)]
    STATIC               [reduce using rule 212 (X)]
    SWITCH               [reduce using rule 212 (X)]
    UNSIGNED             [reduce using rule 212 (X)]
    VOID                 [reduce using rule 212 (X)]
    VOLATILE             [reduce using rule 212 (X)]
    WHILE                [reduce using rule 212 (X)]
    BOOL                 [reduce using rule 212 (X)]
    COMPLEX              [reduce using rule 212 (X)]
    IMAGINARY            [reduce using rule 212 (X)]
    ROUND_BRACKET_OPEN   [reduce using rule 212 (X)]
    CURLY_BRACKET_OPEN   [reduce using rule 212 (X)]
    CURLY_BRACKET_CLOSE  reduce using rule 191 (block_item_list_opt)
    CURLY_BRACKET_CLOSE  [reduce using rule 212 (X)]
    INCREMENT            [reduce using rule 212 (X)]
    DECREMENT            [reduce using rule 212 (X)]
    BITWISE_AND          [reduce using rule 212 (X)]
    BITWISE_NOT          [reduce using rule 212 (X)]
    LOGICAL_NOT          [reduce using rule 212 (X)]
    MULTIPLY             [reduce using rule 212 (X)]
    PLUS                 [reduce using rule 212 (X)]
    MINUS                [reduce using rule 212 (X)]
    SEMICOLON            [reduce using rule 212 (X)]
    INTEGER_CONSTANT     [reduce using rule 212 (X)]
    FLOATING_CONSTANT    [reduce using rule 212 (X)]
    CHAR_CONSTANT        [reduce using rule 212 (X)]
    STRING_LITERAL       [reduce using rule 212 (X)]
    IDENTIFIER           [reduce using rule 212 (X)]
    $default             reduce using rule 191 (block_item_list_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    declaration                go to state 255
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 256
    labeled_statement          go to state 257
    compound_statement         go to state 258
    block_item_list_opt        go to state 403
    block_item_list            go to state 260
    block_item                 go to state 261
    expression_statement       go to state 262
    selection_statement        go to state 263
    iteration_statement        go to state 264
    X                          go to state 301
    jump_statement             go to state 265


State 400

  205 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table declaration M expression_statement M expression N ROUND_BRACKET_CLOSE M loop_statement .

    $default  reduce using rule 205 (iteration_statement)


State 401

  189 compound_statement: CURLY_BRACKET_OPEN . X change_table block_item_list_opt CURLY_BRACKET_CLOSE
  207 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN . block_item_list_opt CURLY_BRACKET_CLOSE

    AUTO                shift, and go to state 1
    BREAK               shift, and go to state 240
    CASE                shift, and go to state 241
    CHAR                shift, and go to state 2
    CONST               shift, and go to state 3
    CONTINUE            shift, and go to state 242
    DEFAULT             shift, and go to state 243
    DO                  shift, and go to state 244
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FLOAT               shift, and go to state 7
    FOR                 shift, and go to state 245
    GOTO                shift, and go to state 246
    IF                  shift, and go to state 247
    INLINE              shift, and go to state 8
    INT                 shift, and go to state 9
    LONG                shift, and go to state 10
    REGISTER            shift, and go to state 11
    RESTRICT            shift, and go to state 12
    RETURN              shift, and go to state 248
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 73
    STATIC              shift, and go to state 15
    SWITCH              shift, and go to state 249
    UNSIGNED            shift, and go to state 16
    VOID                shift, and go to state 17
    VOLATILE            shift, and go to state 18
    WHILE               shift, and go to state 250
    BOOL                shift, and go to state 19
    COMPLEX             shift, and go to state 20
    IMAGINARY           shift, and go to state 21
    ROUND_BRACKET_OPEN  shift, and go to state 74
    CURLY_BRACKET_OPEN  shift, and go to state 251
    INCREMENT           shift, and go to state 76
    DECREMENT           shift, and go to state 77
    BITWISE_AND         shift, and go to state 78
    BITWISE_NOT         shift, and go to state 79
    LOGICAL_NOT         shift, and go to state 80
    MULTIPLY            shift, and go to state 81
    PLUS                shift, and go to state 82
    MINUS               shift, and go to state 83
    SEMICOLON           shift, and go to state 252
    INTEGER_CONSTANT    shift, and go to state 84
    FLOATING_CONSTANT   shift, and go to state 85
    CHAR_CONSTANT       shift, and go to state 86
    STRING_LITERAL      shift, and go to state 87
    IDENTIFIER          shift, and go to state 253

    AUTO                 [reduce using rule 212 (X)]
    BREAK                [reduce using rule 212 (X)]
    CASE                 [reduce using rule 212 (X)]
    CHAR                 [reduce using rule 212 (X)]
    CONST                [reduce using rule 212 (X)]
    CONTINUE             [reduce using rule 212 (X)]
    DEFAULT              [reduce using rule 212 (X)]
    DO                   [reduce using rule 212 (X)]
    DOUBLE               [reduce using rule 212 (X)]
    ENUM                 [reduce using rule 212 (X)]
    EXTERN               [reduce using rule 212 (X)]
    FLOAT                [reduce using rule 212 (X)]
    FOR                  [reduce using rule 212 (X)]
    GOTO                 [reduce using rule 212 (X)]
    IF                   [reduce using rule 212 (X)]
    INLINE               [reduce using rule 212 (X)]
    INT                  [reduce using rule 212 (X)]
    LONG                 [reduce using rule 212 (X)]
    REGISTER             [reduce using rule 212 (X)]
    RESTRICT             [reduce using rule 212 (X)]
    RETURN               [reduce using rule 212 (X)]
    SHORT                [reduce using rule 212 (X)]
    SIGNED               [reduce using rule 212 (X)]
    SIZEOF               [reduce using rule 212 (X)]
    STATIC               [reduce using rule 212 (X)]
    SWITCH               [reduce using rule 212 (X)]
    UNSIGNED             [reduce using rule 212 (X)]
    VOID                 [reduce using rule 212 (X)]
    VOLATILE             [reduce using rule 212 (X)]
    WHILE                [reduce using rule 212 (X)]
    BOOL                 [reduce using rule 212 (X)]
    COMPLEX              [reduce using rule 212 (X)]
    IMAGINARY            [reduce using rule 212 (X)]
    ROUND_BRACKET_OPEN   [reduce using rule 212 (X)]
    CURLY_BRACKET_OPEN   [reduce using rule 212 (X)]
    CURLY_BRACKET_CLOSE  reduce using rule 191 (block_item_list_opt)
    CURLY_BRACKET_CLOSE  [reduce using rule 212 (X)]
    INCREMENT            [reduce using rule 212 (X)]
    DECREMENT            [reduce using rule 212 (X)]
    BITWISE_AND          [reduce using rule 212 (X)]
    BITWISE_NOT          [reduce using rule 212 (X)]
    LOGICAL_NOT          [reduce using rule 212 (X)]
    MULTIPLY             [reduce using rule 212 (X)]
    PLUS                 [reduce using rule 212 (X)]
    MINUS                [reduce using rule 212 (X)]
    SEMICOLON            [reduce using rule 212 (X)]
    INTEGER_CONSTANT     [reduce using rule 212 (X)]
    FLOATING_CONSTANT    [reduce using rule 212 (X)]
    CHAR_CONSTANT        [reduce using rule 212 (X)]
    STRING_LITERAL       [reduce using rule 212 (X)]
    IDENTIFIER           [reduce using rule 212 (X)]
    $default             reduce using rule 191 (block_item_list_opt)

    primary_expression         go to state 89
    constant                   go to state 90
    postfix_expression         go to state 91
    unary_expression           go to state 92
    unary_operator             go to state 93
    cast_expression            go to state 94
    multiplicative_expression  go to state 95
    additive_expression        go to state 96
    shift_expression           go to state 97
    relational_expression      go to state 98
    equality_expression        go to state 99
    AND_expression             go to state 100
    exclusive_OR_expression    go to state 101
    inclusive_OR_expression    go to state 102
    logical_AND_expression     go to state 103
    logical_OR_expression      go to state 104
    conditional_expression     go to state 105
    assignment_expression      go to state 123
    expression                 go to state 254
    declaration                go to state 255
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 256
    labeled_statement          go to state 257
    compound_statement         go to state 258
    block_item_list_opt        go to state 404
    block_item_list            go to state 260
    block_item                 go to state 261
    expression_statement       go to state 262
    selection_statement        go to state 263
    iteration_statement        go to state 264
    X                          go to state 301
    jump_statement             go to state 265


State 402

  206 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE M loop_statement .

    $default  reduce using rule 206 (iteration_statement)


State 403

  208 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table declaration M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt . CURLY_BRACKET_CLOSE

    CURLY_BRACKET_CLOSE  shift, and go to state 405


State 404

  207 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt . CURLY_BRACKET_CLOSE

    CURLY_BRACKET_CLOSE  shift, and go to state 406


State 405

  208 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table declaration M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE .

    $default  reduce using rule 208 (iteration_statement)


State 406

  207 iteration_statement: FOR F ROUND_BRACKET_OPEN X change_table expression_statement M expression_statement M expression N ROUND_BRACKET_CLOSE M CURLY_BRACKET_OPEN block_item_list_opt CURLY_BRACKET_CLOSE .

    $default  reduce using rule 207 (iteration_statement)
